{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c83f5c2f",
   "metadata": {
    "id": "x9LNzEYERaH2",
    "papermill": {
     "duration": 0.003685,
     "end_time": "2025-01-20T03:55:44.998357",
     "exception": false,
     "start_time": "2025-01-20T03:55:44.994672",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Download Packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "464e848b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-20T03:55:45.006008Z",
     "iopub.status.busy": "2025-01-20T03:55:45.005671Z",
     "iopub.status.idle": "2025-01-20T03:55:46.050778Z",
     "shell.execute_reply": "2025-01-20T03:55:46.049599Z"
    },
    "papermill": {
     "duration": 1.051205,
     "end_time": "2025-01-20T03:55:46.052878",
     "exception": false,
     "start_time": "2025-01-20T03:55:45.001673",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GPU 0: Tesla T4 (UUID: GPU-8f785dac-c40a-7414-075a-fe3f83b1bb78)\r\n",
      "GPU 1: Tesla T4 (UUID: GPU-d918071c-7119-cd0e-2b0e-893b4724498d)\r\n"
     ]
    }
   ],
   "source": [
    "!nvidia-smi -L"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a214406d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-20T03:55:46.060857Z",
     "iopub.status.busy": "2025-01-20T03:55:46.060506Z",
     "iopub.status.idle": "2025-01-20T03:56:51.891598Z",
     "shell.execute_reply": "2025-01-20T03:56:51.890201Z"
    },
    "id": "K0oS6IH7VTZX",
    "papermill": {
     "duration": 65.837963,
     "end_time": "2025-01-20T03:56:51.894174",
     "exception": false,
     "start_time": "2025-01-20T03:55:46.056211",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "!pip install -U git+https://github.com/UN-GCPDS/python-gcpds.databases #Package for database reading.\n",
    "!pip install mne #The MNE Package is installed\n",
    "FILEID = \"1lo0MjWLvsyne2CgTA6VZ2HGY9SKxiwZ7\"\n",
    "!wget --load-cookies /tmp/cookies.txt \"https://docs.google.com/uc?export=download&confirm=$(wget --quiet --save-cookies /tmp/cookies.txt --keep-session-cookies --no-check-certificate 'https://docs.google.com/uc?export=download&id='$FILEID -O- | sed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\\1\\n/p')&id=\"$FILEID -O MI_EEG_ClassMeth.zip && rm -rf /tmp/cookies.txt\n",
    "!unzip MI_EEG_ClassMeth.zip #Package with useful functions for motor imagery classification based in EEG.\n",
    "!pip install -U git+https://github.com/UN-GCPDS/python-gcpds.EEG_Tensorflow_models.git\n",
    "!dir"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2833a9e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-20T03:56:51.902622Z",
     "iopub.status.busy": "2025-01-20T03:56:51.902314Z",
     "iopub.status.idle": "2025-01-20T03:58:02.668934Z",
     "shell.execute_reply": "2025-01-20T03:58:02.668073Z"
    },
    "papermill": {
     "duration": 70.773143,
     "end_time": "2025-01-20T03:58:02.671021",
     "exception": false,
     "start_time": "2025-01-20T03:56:51.897878",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r\n",
      "\r\n",
      "\r\n",
      "Package libcudnn8 is not available, but is referred to by another package.\r\n",
      "This may mean that the package is missing, has been obsoleted, or\r\n",
      "is only available from another source\r\n",
      "\r\n",
      "E: Version '8.1.0.77-1+cuda11.2' for 'libcudnn8' was not found\r\n",
      "Collecting tensorflow==2.8.2\r\n",
      "  Downloading tensorflow-2.8.2-cp310-cp310-manylinux2010_x86_64.whl.metadata (2.9 kB)\r\n",
      "Requirement already satisfied: absl-py>=0.4.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (1.4.0)\r\n",
      "Requirement already satisfied: astunparse>=1.6.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (1.6.3)\r\n",
      "Requirement already satisfied: flatbuffers>=1.12 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (24.3.25)\r\n",
      "Requirement already satisfied: gast>=0.2.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (0.5.4)\r\n",
      "Requirement already satisfied: google-pasta>=0.1.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (0.2.0)\r\n",
      "Requirement already satisfied: h5py>=2.9.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (3.11.0)\r\n",
      "Collecting keras-preprocessing>=1.1.1 (from tensorflow==2.8.2)\r\n",
      "  Downloading Keras_Preprocessing-1.1.2-py2.py3-none-any.whl.metadata (1.9 kB)\r\n",
      "Requirement already satisfied: libclang>=9.0.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (18.1.1)\r\n",
      "Requirement already satisfied: numpy>=1.20 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (1.26.4)\r\n",
      "Requirement already satisfied: opt-einsum>=2.3.2 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (3.3.0)\r\n",
      "Collecting protobuf<3.20,>=3.9.2 (from tensorflow==2.8.2)\r\n",
      "  Downloading protobuf-3.19.6-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (787 bytes)\r\n",
      "Requirement already satisfied: setuptools in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (70.0.0)\r\n",
      "Requirement already satisfied: six>=1.12.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (1.16.0)\r\n",
      "Requirement already satisfied: termcolor>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (2.4.0)\r\n",
      "Requirement already satisfied: typing-extensions>=3.6.6 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (4.12.2)\r\n",
      "Requirement already satisfied: wrapt>=1.11.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (1.16.0)\r\n",
      "Collecting tensorboard<2.9,>=2.8 (from tensorflow==2.8.2)\r\n",
      "  Downloading tensorboard-2.8.0-py3-none-any.whl.metadata (1.9 kB)\r\n",
      "Collecting tensorflow-estimator<2.9,>=2.8 (from tensorflow==2.8.2)\r\n",
      "  Downloading tensorflow_estimator-2.8.0-py2.py3-none-any.whl.metadata (1.3 kB)\r\n",
      "Collecting keras<2.9,>=2.8.0rc0 (from tensorflow==2.8.2)\r\n",
      "  Downloading keras-2.8.0-py2.py3-none-any.whl.metadata (1.3 kB)\r\n",
      "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (0.37.0)\r\n",
      "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (1.62.2)\r\n",
      "Requirement already satisfied: wheel<1.0,>=0.23.0 in /opt/conda/lib/python3.10/site-packages (from astunparse>=1.6.0->tensorflow==2.8.2) (0.43.0)\r\n",
      "Requirement already satisfied: google-auth<3,>=1.6.3 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.9,>=2.8->tensorflow==2.8.2) (2.30.0)\r\n",
      "Collecting google-auth-oauthlib<0.5,>=0.4.1 (from tensorboard<2.9,>=2.8->tensorflow==2.8.2)\r\n",
      "  Downloading google_auth_oauthlib-0.4.6-py2.py3-none-any.whl.metadata (2.7 kB)\r\n",
      "Requirement already satisfied: markdown>=2.6.8 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.9,>=2.8->tensorflow==2.8.2) (3.6)\r\n",
      "Requirement already satisfied: requests<3,>=2.21.0 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.9,>=2.8->tensorflow==2.8.2) (2.32.3)\r\n",
      "Collecting tensorboard-data-server<0.7.0,>=0.6.0 (from tensorboard<2.9,>=2.8->tensorflow==2.8.2)\r\n",
      "  Downloading tensorboard_data_server-0.6.1-py3-none-manylinux2010_x86_64.whl.metadata (1.1 kB)\r\n",
      "Collecting tensorboard-plugin-wit>=1.6.0 (from tensorboard<2.9,>=2.8->tensorflow==2.8.2)\r\n",
      "  Downloading tensorboard_plugin_wit-1.8.1-py3-none-any.whl.metadata (873 bytes)\r\n",
      "Requirement already satisfied: werkzeug>=0.11.15 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.9,>=2.8->tensorflow==2.8.2) (3.0.4)\r\n",
      "Requirement already satisfied: cachetools<6.0,>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow==2.8.2) (4.2.4)\r\n",
      "Requirement already satisfied: pyasn1-modules>=0.2.1 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow==2.8.2) (0.4.0)\r\n",
      "Requirement already satisfied: rsa<5,>=3.1.4 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow==2.8.2) (4.9)\r\n",
      "Requirement already satisfied: requests-oauthlib>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.9,>=2.8->tensorflow==2.8.2) (2.0.0)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow==2.8.2) (3.3.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow==2.8.2) (3.7)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow==2.8.2) (1.26.18)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow==2.8.2) (2024.8.30)\r\n",
      "Requirement already satisfied: MarkupSafe>=2.1.1 in /opt/conda/lib/python3.10/site-packages (from werkzeug>=0.11.15->tensorboard<2.9,>=2.8->tensorflow==2.8.2) (2.1.5)\r\n",
      "Requirement already satisfied: pyasn1<0.7.0,>=0.4.6 in /opt/conda/lib/python3.10/site-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow==2.8.2) (0.6.0)\r\n",
      "Requirement already satisfied: oauthlib>=3.0.0 in /opt/conda/lib/python3.10/site-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.9,>=2.8->tensorflow==2.8.2) (3.2.2)\r\n",
      "Downloading tensorflow-2.8.2-cp310-cp310-manylinux2010_x86_64.whl (498.0 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m498.0/498.0 MB\u001b[0m \u001b[31m3.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading keras-2.8.0-py2.py3-none-any.whl (1.4 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.4/1.4 MB\u001b[0m \u001b[31m58.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading Keras_Preprocessing-1.1.2-py2.py3-none-any.whl (42 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m42.6/42.6 kB\u001b[0m \u001b[31m2.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading protobuf-3.19.6-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.1 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.1/1.1 MB\u001b[0m \u001b[31m50.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading tensorboard-2.8.0-py3-none-any.whl (5.8 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m5.8/5.8 MB\u001b[0m \u001b[31m98.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading tensorflow_estimator-2.8.0-py2.py3-none-any.whl (462 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m462.3/462.3 kB\u001b[0m \u001b[31m28.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading google_auth_oauthlib-0.4.6-py2.py3-none-any.whl (18 kB)\r\n",
      "Downloading tensorboard_data_server-0.6.1-py3-none-manylinux2010_x86_64.whl (4.9 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.9/4.9 MB\u001b[0m \u001b[31m80.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading tensorboard_plugin_wit-1.8.1-py3-none-any.whl (781 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m781.3/781.3 kB\u001b[0m \u001b[31m40.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hInstalling collected packages: tensorflow-estimator, tensorboard-plugin-wit, keras, tensorboard-data-server, protobuf, keras-preprocessing, google-auth-oauthlib, tensorboard, tensorflow\r\n",
      "  Attempting uninstall: tensorflow-estimator\r\n",
      "    Found existing installation: tensorflow-estimator 2.15.0\r\n",
      "    Uninstalling tensorflow-estimator-2.15.0:\r\n",
      "      Successfully uninstalled tensorflow-estimator-2.15.0\r\n",
      "  Attempting uninstall: keras\r\n",
      "    Found existing installation: keras 3.3.3\r\n",
      "    Uninstalling keras-3.3.3:\r\n",
      "      Successfully uninstalled keras-3.3.3\r\n",
      "  Attempting uninstall: tensorboard-data-server\r\n",
      "    Found existing installation: tensorboard-data-server 0.7.2\r\n",
      "    Uninstalling tensorboard-data-server-0.7.2:\r\n",
      "      Successfully uninstalled tensorboard-data-server-0.7.2\r\n",
      "  Attempting uninstall: protobuf\r\n",
      "    Found existing installation: protobuf 3.20.3\r\n",
      "    Uninstalling protobuf-3.20.3:\r\n",
      "      Successfully uninstalled protobuf-3.20.3\r\n",
      "  Attempting uninstall: google-auth-oauthlib\r\n",
      "    Found existing installation: google-auth-oauthlib 1.2.0\r\n",
      "    Uninstalling google-auth-oauthlib-1.2.0:\r\n",
      "      Successfully uninstalled google-auth-oauthlib-1.2.0\r\n",
      "  Attempting uninstall: tensorboard\r\n",
      "    Found existing installation: tensorboard 2.16.2\r\n",
      "    Uninstalling tensorboard-2.16.2:\r\n",
      "      Successfully uninstalled tensorboard-2.16.2\r\n",
      "  Attempting uninstall: tensorflow\r\n",
      "    Found existing installation: tensorflow 2.16.1\r\n",
      "    Uninstalling tensorflow-2.16.1:\r\n",
      "      Successfully uninstalled tensorflow-2.16.1\r\n",
      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "apache-beam 2.46.0 requires cloudpickle~=2.2.1, but you have cloudpickle 3.0.0 which is incompatible.\r\n",
      "apache-beam 2.46.0 requires dill<0.3.2,>=0.3.1.1, but you have dill 0.3.8 which is incompatible.\r\n",
      "apache-beam 2.46.0 requires numpy<1.25.0,>=1.14.3, but you have numpy 1.26.4 which is incompatible.\r\n",
      "apache-beam 2.46.0 requires pyarrow<10.0.0,>=3.0.0, but you have pyarrow 16.1.0 which is incompatible.\r\n",
      "google-ai-generativelanguage 0.6.10 requires protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.2, but you have protobuf 3.19.6 which is incompatible.\r\n",
      "google-cloud-aiplatform 0.6.0a1 requires google-api-core[grpc]<2.0.0dev,>=1.22.2, but you have google-api-core 2.11.1 which is incompatible.\r\n",
      "google-cloud-automl 1.0.1 requires google-api-core[grpc]<2.0.0dev,>=1.14.0, but you have google-api-core 2.11.1 which is incompatible.\r\n",
      "google-cloud-datastore 2.20.1 requires protobuf!=3.20.0,!=3.20.1,!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.2, but you have protobuf 3.19.6 which is incompatible.\r\n",
      "google-cloud-language 2.14.0 requires protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.2, but you have protobuf 3.19.6 which is incompatible.\r\n",
      "google-cloud-spanner 3.47.0 requires protobuf!=3.20.0,!=3.20.1,!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.2, but you have protobuf 3.19.6 which is incompatible.\r\n",
      "google-cloud-videointelligence 2.13.5 requires protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.2, but you have protobuf 3.19.6 which is incompatible.\r\n",
      "kfp 2.5.0 requires google-cloud-storage<3,>=2.2.1, but you have google-cloud-storage 1.44.0 which is incompatible.\r\n",
      "onnx 1.17.0 requires protobuf>=3.20.2, but you have protobuf 3.19.6 which is incompatible.\r\n",
      "tensorboardx 2.6.2.2 requires protobuf>=3.20, but you have protobuf 3.19.6 which is incompatible.\r\n",
      "tensorflow-datasets 4.9.6 requires protobuf>=3.20, but you have protobuf 3.19.6 which is incompatible.\r\n",
      "tensorflow-decision-forests 1.9.1 requires tensorflow~=2.16.1, but you have tensorflow 2.8.2 which is incompatible.\r\n",
      "tensorflow-serving-api 2.16.1 requires protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3, but you have protobuf 3.19.6 which is incompatible.\r\n",
      "tensorflow-serving-api 2.16.1 requires tensorflow<3,>=2.16.1, but you have tensorflow 2.8.2 which is incompatible.\r\n",
      "tensorflow-text 2.16.1 requires tensorflow<2.17,>=2.16.1; platform_machine != \"arm64\" or platform_system != \"Darwin\", but you have tensorflow 2.8.2 which is incompatible.\r\n",
      "tf-keras 2.16.0 requires tensorflow<2.17,>=2.16, but you have tensorflow 2.8.2 which is incompatible.\u001b[0m\u001b[31m\r\n",
      "\u001b[0mSuccessfully installed google-auth-oauthlib-0.4.6 keras-2.8.0 keras-preprocessing-1.1.2 protobuf-3.19.6 tensorboard-2.8.0 tensorboard-data-server-0.6.1 tensorboard-plugin-wit-1.8.1 tensorflow-2.8.2 tensorflow-estimator-2.8.0\r\n"
     ]
    }
   ],
   "source": [
    "!apt-get install --allow-change-held-packages libcudnn8=8.1.0.77-1+cuda11.2 -y\n",
    "!pip install tensorflow==2.8.2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bcfa1426",
   "metadata": {
    "papermill": {
     "duration": 0.011724,
     "end_time": "2025-01-20T03:58:02.695165",
     "exception": false,
     "start_time": "2025-01-20T03:58:02.683441",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6e2e0be0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-20T03:58:02.720772Z",
     "iopub.status.busy": "2025-01-20T03:58:02.720408Z",
     "iopub.status.idle": "2025-01-20T03:58:09.374116Z",
     "shell.execute_reply": "2025-01-20T03:58:09.373412Z"
    },
    "id": "yE1sbHYQVbBq",
    "papermill": {
     "duration": 6.668992,
     "end_time": "2025-01-20T03:58:09.376188",
     "exception": false,
     "start_time": "2025-01-20T03:58:02.707196",
     "status": "completed"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [],
   "source": [
    "from gcpds.databases.BCI_Competition_IV import Dataset_2a\n",
    "from typing import Sequence, Tuple\n",
    "from MI_EEG_ClassMeth.FeatExtraction import TimeFrequencyRpr\n",
    "import numpy as np\n",
    "from scipy.signal import resample\n",
    "\n",
    "def load_BCICIV2a(db: Dataset_2a,\n",
    "               sbj: int,\n",
    "               mode: str,\n",
    "               fs: float, \n",
    "               f_bank: np.ndarray, \n",
    "               vwt: np.ndarray, \n",
    "               new_fs: float) -> np.ndarray:\n",
    "\n",
    "  tf_repr = TimeFrequencyRpr(sfreq = fs, f_bank = f_bank, vwt = vwt)\n",
    "\n",
    "  db.load_subject(sbj, mode = mode)\n",
    "    \n",
    "  X, y = db.get_data() #Load all classes, all channels {EEG, EOG}, reject bad trials\n",
    "\n",
    "  X = X[:,:-3,:] # pick EEG channels\n",
    "  X = X*1e6 #uV\n",
    "  X = np.squeeze(tf_repr.transform(X))\n",
    "  #Resampling\n",
    "  if new_fs == fs:\n",
    "    print('No resampling, since new sampling rate same.')\n",
    "  else:\n",
    "    print(\"Resampling from {:f} to {:f} Hz.\".format(fs, new_fs))\n",
    "    X = resample(X, int((X.shape[-1]/fs)*new_fs), axis = -1)\n",
    "    \n",
    "  return X, y\n",
    "\n",
    "\n",
    "from gcpds.databases import GIGA_MI_ME\n",
    "\n",
    "def load_GIGA_MI_ME(db: GIGA_MI_ME,\n",
    "              sbj: int,\n",
    "              eeg_ch_names: Sequence[str],\n",
    "              fs: float, \n",
    "              f_bank: np.ndarray, \n",
    "              vwt: np.ndarray, \n",
    "              new_fs: float) -> Tuple[np.ndarray, np.ndarray]:\n",
    "\n",
    "    index_eeg_chs = db.format_channels_selectors(channels=eeg_ch_names) - 1\n",
    "\n",
    "    tf_repr = TimeFrequencyRpr(sfreq=fs, f_bank=f_bank, vwt=vwt)\n",
    "\n",
    "    # Load subject data\n",
    "    db.load_subject(sbj)\n",
    "    X, y = db.get_data(classes=['left hand mi', 'right hand mi'])\n",
    "    \n",
    "    # Debugging total trials\n",
    "    print(f\"Total trials loaded: {X.shape[0]}\")\n",
    "    print(f\"Shape of X: {X.shape}, Shape of y: {y.shape}\")\n",
    "\n",
    "    # Spatial rearrangement\n",
    "    X = X[:, index_eeg_chs, :]  \n",
    "    X = np.squeeze(tf_repr.transform(X))\n",
    "\n",
    "    # Resampling\n",
    "    if new_fs == fs:\n",
    "        print('No resampling, since new sampling rate is the same.')\n",
    "    else:\n",
    "        print(f\"Resampling from {fs} to {new_fs} Hz.\")\n",
    "        X = resample(X, int((X.shape[-1] / fs) * new_fs), axis=-1)\n",
    "    \n",
    "    return X, y\n",
    "\n",
    "\n",
    "\n",
    "def load_DB(db_name, **load_args):\n",
    "  if db_name == 'BCICIV2a':\n",
    "    X_train, y_train = load_BCICIV2a(**load_args, mode = 'training')\n",
    "    X_test, y_test = load_BCICIV2a(**load_args, mode = 'evaluation')\n",
    "\n",
    "    X_train = np.concatenate([X_train, X_test], axis = 0)\n",
    "    y_train = np.concatenate([y_train, y_test], axis = 0)\n",
    "\n",
    "  elif db_name == 'GIGA_MI_ME':\n",
    "    X_train, y_train = load_GIGA_MI_ME(**load_args)\n",
    "    \n",
    "  else:\n",
    "    raise ValueError('No valid database name')\n",
    "\n",
    "  return X_train, y_train\n",
    "\n",
    "\n",
    "from EEG_Tensorflow_models.Models import DeepConvNet, ShallowConvNet, EEGNet, DMTL_BCI, TCNet_fusion, PST_attention\n",
    "\n",
    "\n",
    "def get_model(model_name, nb_classes):\n",
    "  if model_name == 'DeepConvNet':\n",
    "    model = DeepConvNet\n",
    "    model_params = dict(nb_classes = nb_classes,\n",
    "                      dropoutRate = 0.5, version='2018')\n",
    "    \n",
    "  elif model_name == 'ShallowConvNet':\n",
    "    model = ShallowConvNet\n",
    "    model_params = dict(nb_classes = nb_classes,\n",
    "                      dropoutRate = 0.5,\n",
    "                      version = '2018')\n",
    "    \n",
    "  elif model_name == 'EEGNet':\n",
    "    model = EEGNet\n",
    "    model_params = dict(nb_classes = nb_classes,\n",
    "                      dropoutRate = 0.5,\n",
    "                      kernLength = 32,\n",
    "                      F1 = 8,\n",
    "                      D = 2,\n",
    "                      F2 = 16,\n",
    "                      norm_rate = 0.25, \n",
    "                      dropoutType = 'Dropout')\n",
    "    \n",
    "  elif model_name == 'DMTL_BCI':\n",
    "    model = DMTL_BCI\n",
    "    model_params = dict(nb_classes = nb_classes,\n",
    "                      dropoutRate = 0.5,\n",
    "                      l1 = 0,\n",
    "                      l2 = 0)\n",
    "    \n",
    "  elif model_name == 'TCNet_fusion':\n",
    "    model = TCNet_fusion\n",
    "    model_params = dict(nb_classes = nb_classes,\n",
    "                      layers = 2,\n",
    "                      kernel_s = 4,\n",
    "                      filt = 12,\n",
    "                      dropout = 0.3,\n",
    "                      activation = 'relu',\n",
    "                      F1 = 24,\n",
    "                      D = 2,\n",
    "                      kernLength = 32,\n",
    "                      N_residuals = 2)\n",
    "    \n",
    "  elif model_name == 'PST_attention':\n",
    "    model = PST_attention\n",
    "    model_params = dict(nb_classes = nb_classes,\n",
    "                      dropoutRate = 0.5,\n",
    "                      last_layer = 'Dense')\n",
    "    \n",
    "  else:\n",
    "    raise ValueError('No valid model name')\n",
    "    \n",
    "  return model, model_params\n",
    "\n",
    "from tensorflow.random import set_seed\n",
    "from tensorflow.keras.backend import clear_session\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "from sklearn.metrics import accuracy_score, cohen_kappa_score, roc_auc_score,\\\n",
    "                            f1_score, recall_score, precision_score\n",
    "\n",
    "def train(db_name, load_args, cv_args, model_args, compile_args, fit_args, seed):\n",
    "    X_train, y_train = load_DB(db_name, **load_args)\n",
    "    X_train = X_train[..., np.newaxis]  # Add channel dimension\n",
    "    print(f\"X_train shape: {X_train.shape}, y_train shape: {y_train.shape}\")\n",
    "    \n",
    "    cv_results = {'params': [],\n",
    "                  'mean_acc': np.zeros(cv_args['cv'].get_n_splits()),\n",
    "                  'mean_kappa': np.zeros(cv_args['cv'].get_n_splits()),\n",
    "                  'mean_auc': np.zeros(cv_args['cv'].get_n_splits()),\n",
    "                  'mean_f1_left': np.zeros(cv_args['cv'].get_n_splits()),\n",
    "                  'mean_f1_right': np.zeros(cv_args['cv'].get_n_splits()),\n",
    "                  'mean_recall_left': np.zeros(cv_args['cv'].get_n_splits()),\n",
    "                  'mean_recall_right': np.zeros(cv_args['cv'].get_n_splits()),\n",
    "                  'mean_precision_left': np.zeros(cv_args['cv'].get_n_splits()),\n",
    "                  'mean_precision_right': np.zeros(cv_args['cv'].get_n_splits()),\n",
    "                  'all_folds': []}\n",
    "    \n",
    "    k = 0\n",
    "    max_acc = -np.inf\n",
    "\n",
    "    # Loop through folds\n",
    "    for train_index, val_index in cv_args['cv'].split(X_train, y_train):\n",
    "        print(f\"Running fold {k} with {len(train_index)} training samples and {len(val_index)} validation samples\")\n",
    "        print(f\"Fold {k}: train indices: {train_index[:5]}, val indices: {val_index[:5]}\")  # Print first indices\n",
    "        \n",
    "        X, X_val = X_train[train_index], X_train[val_index]\n",
    "        y, y_val = y_train[train_index], y_train[val_index]\n",
    "        \n",
    "        if model_args['autoencoder']:\n",
    "            y = [X, y]\n",
    "        \n",
    "        print(f\"Training data shape: {X.shape}, Validation data shape: {X_val.shape}\")\n",
    "        \n",
    "        batch_size, C, T = X.shape[:-1]\n",
    "        clear_session()\n",
    "        set_seed(seed)\n",
    "\n",
    "        model_cll, model_params = get_model(model_args['model_name'], model_args['nb_classes'])\n",
    "        model = model_cll(**model_params, Chans=64, Samples=T)\n",
    "        model.compile(loss=compile_args['loss'], optimizer=Adam(compile_args['init_lr']))\n",
    "\n",
    "        history = model.fit(X, y, batch_size=batch_size, **fit_args)\n",
    "        print(f\"Fold {k} training loss: {history.history['loss'][-1]}\")  # Print final loss\n",
    "\n",
    "        if model_args['autoencoder']:\n",
    "            y_prob = model.predict(X_val)[-1]\n",
    "        else:\n",
    "            y_prob = model.predict(X_val)\n",
    "        y_pred = np.argmax(y_prob, axis=1)\n",
    "\n",
    "        print(f\"y_true (val): {y_val[:5]}\")\n",
    "        print(f\"y_pred: {y_pred[:5]}\")\n",
    "        \n",
    "        # Calculate metrics\n",
    "        acc = accuracy_score(y_val, y_pred)\n",
    "        kappa = cohen_kappa_score(y_val, y_pred)\n",
    "        auc = roc_auc_score(y_val, y_prob[:, 1], average='macro') if model_args['nb_classes'] == 2 else None\n",
    "        \n",
    "        # Save metrics for this fold\n",
    "        fold_result = {\n",
    "            'fold_index': k,\n",
    "            'train_indices': train_index.tolist(),\n",
    "            'val_indices': val_index.tolist(),\n",
    "            'accuracy': acc,\n",
    "            'kappa': kappa,\n",
    "            'auc': auc\n",
    "        }\n",
    "        print(f\"Appending results for fold {k}: {fold_result}\")\n",
    "        cv_results['all_folds'].append(fold_result)\n",
    "\n",
    "        # Update overall fold metrics\n",
    "        cv_results['mean_acc'][k] = acc\n",
    "        cv_results['mean_kappa'][k] = kappa\n",
    "        if auc is not None:\n",
    "            cv_results['mean_auc'][k] = auc\n",
    "        \n",
    "        # Save the best model weights\n",
    "        if acc > max_acc:\n",
    "            print('New Max Found!')\n",
    "            max_acc = acc\n",
    "            model.save_weights(f'sbj{load_args[\"sbj\"]}.h5')\n",
    "\n",
    "        k += 1\n",
    "    \n",
    "    # Calculate mean and std metrics\n",
    "    cv_results['std_acc'] = round(cv_results['mean_acc'].std(), 3)\n",
    "    cv_results['mean_acc'] = round(cv_results['mean_acc'].mean(), 3)\n",
    "    cv_results['std_kappa'] = round(cv_results['mean_kappa'].std(), 3)\n",
    "    cv_results['mean_kappa'] = round(cv_results['mean_kappa'].mean(), 3)\n",
    "    cv_results['std_auc'] = round(cv_results['mean_auc'].std(), 3)\n",
    "    cv_results['mean_auc'] = round(cv_results['mean_auc'].mean(), 3)\n",
    "    \n",
    "    print(f\"Final cross-validation results: {cv_results}\")\n",
    "    return cv_results\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d738ae99",
   "metadata": {
    "id": "uBAeW6J5S68g",
    "papermill": {
     "duration": 0.011976,
     "end_time": "2025-01-20T03:58:09.400491",
     "exception": false,
     "start_time": "2025-01-20T03:58:09.388515",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Config"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0f1ce76e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-20T03:58:09.425970Z",
     "iopub.status.busy": "2025-01-20T03:58:09.425360Z",
     "iopub.status.idle": "2025-01-20T03:58:09.429959Z",
     "shell.execute_reply": "2025-01-20T03:58:09.429082Z"
    },
    "id": "2I3IQnNSS9-a",
    "papermill": {
     "duration": 0.019088,
     "end_time": "2025-01-20T03:58:09.431524",
     "exception": false,
     "start_time": "2025-01-20T03:58:09.412436",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Marcos, use these two variables to run the state of the art. First, for BCICIV2a run all the models.\n",
    "# Remeber that this network DMTL_BCI is an autoencoder. Set the nb_classses parameter depending of the database.\n",
    "# set autoencoder based on the model\n",
    "# We need to run all these tests again. Do not forget to add the recall, preci, and f1 for each class (bci 4, giga 2)\n",
    "db_name = 'GIGA_MI_ME'\n",
    "model_args = dict(model_name = 'EEGNet',\n",
    "                  nb_classes = 2,\n",
    "                  autoencoder = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1b037e43",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-20T03:58:09.457021Z",
     "iopub.status.busy": "2025-01-20T03:58:09.456735Z",
     "iopub.status.idle": "2025-01-20T03:58:09.468585Z",
     "shell.execute_reply": "2025-01-20T03:58:09.467986Z"
    },
    "id": "tqMhUFoBIc3B",
    "outputId": "1405fd59-1374-4d5d-8e3a-5e7a45c79bba",
    "papermill": {
     "duration": 0.026517,
     "end_time": "2025-01-20T03:58:09.470222",
     "exception": false,
     "start_time": "2025-01-20T03:58:09.443705",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from tensorflow.keras.callbacks import ReduceLROnPlateau, TerminateOnNaN\n",
    "import numpy as np\n",
    "from tensorflow.keras.losses import SparseCategoricalCrossentropy, MeanSquaredError\n",
    "from sklearn.model_selection import StratifiedShuffleSplit\n",
    "\n",
    "if db_name == 'BCICIV2a':\n",
    "  db = Dataset_2a('/kaggle/input/dataset-2a')\n",
    "  fs = db.metadata['sampling_rate']\n",
    "  load_args = dict(db = db,\n",
    "                 fs = fs,\n",
    "                 f_bank = np.asarray([[4., 40.]]),\n",
    "                 vwt = np.asarray([[2.5, 6]]),\n",
    "                 new_fs = 128.)\n",
    "  subjects = np.arange(db.metadata['subjects']) + 1\n",
    "  \n",
    "elif db_name == 'GIGA_MI_ME':\n",
    "  db = GIGA_MI_ME('/kaggle/input/giga-science-gcpds/GIGA_MI_ME')\n",
    "  fs = db.metadata['sampling_rate']\n",
    "\n",
    "  eeg_ch_names = ['Fp1','Fpz','Fp2',\n",
    "                     'AF7','AF3','AFz','AF4','AF8',\n",
    "                    'F7','F5','F3','F1','Fz','F2','F4','F6','F8',\n",
    "                   'FT7','FC5','FC3','FC1','FCz','FC2','FC4','FC6','FT8',\n",
    "                    'T7','C5','C3','C1','Cz','C2','C4','C6','T8',\n",
    "                   'TP7','CP5','CP3','CP1','CPz','CP2','CP4','CP6','TP8',\n",
    "                    'P9','P7','P5','P3','P1','Pz','P2','P4','P6','P8','P10',\n",
    "                    'PO7','PO3','POz','PO4','PO8',\n",
    "                    'O1','Oz','O2',\n",
    "                    'Iz']\n",
    "\n",
    "  # eeg_ch_names = ['Fp1','Fp2',\n",
    "  #                  'AF3','AF4',\n",
    "  #                  'F7','F3','Fz','F4','F8',\n",
    "  #                  'FC5','FC1','FC2','FC6',\n",
    "  #                  'T7','C3','Cz','C4','T8',\n",
    "  #                  'CP5','CP1','CP2','CP6',\n",
    "  #                  'P7','P3','Pz','P4','P8',\n",
    "  #                  'PO3','PO4',\n",
    "  #                  'O1','Oz','O2']\n",
    "\n",
    "  # eeg_ch_names = ['Fp1','Fp2',\n",
    "  #                 'F7','F3','F4','F8',\n",
    "  #                 'T7','C3','C4','T8',\n",
    "  #                 'P7','P3','P4','P8',\n",
    "  #                 'O1','O2']\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "  # eeg_ch_names = ['Fp1','Fp2',\n",
    "  #              'T7','C3','C4','T8',\n",
    "  #              'O1','O2']\n",
    "    \n",
    "\n",
    "\n",
    "  load_args = dict(db = db,\n",
    "                  eeg_ch_names = eeg_ch_names,\n",
    "                  fs = fs,\n",
    "                  f_bank = np.asarray([[4., 40.]]),\n",
    "                  vwt = np.asarray([[2.5, 5]]),\n",
    "                  new_fs = 128.)\n",
    "  subjects = np.arange(db.metadata['subjects']) + 1\n",
    "  subjects = np.delete(subjects, [28,33])\n",
    "  \n",
    "else:\n",
    "  raise ValueError('No valid database name')\n",
    "\n",
    "verbose = 0\n",
    "reduce_lr_on_plateau = ReduceLROnPlateau(monitor = 'loss', factor = 0.1, patience = 30, verbose = verbose, mode = 'min', min_delta = 0.01, min_lr = 0)\n",
    "terminate_on_nan = TerminateOnNaN()\n",
    "callbacks = [reduce_lr_on_plateau, terminate_on_nan]\n",
    "seed = 23\n",
    "\n",
    "cv_args = dict(cv = StratifiedShuffleSplit(n_splits = 5, test_size = 0.2, random_state = seed))\n",
    "\n",
    "compile_args = dict(loss = SparseCategoricalCrossentropy(), #['mse' , SparseCategoricalCrossentropy()]\n",
    "                    init_lr = 1e-2)\n",
    "                      \n",
    "fit_args = dict(epochs = 500,\n",
    "                verbose = verbose,\n",
    "                callbacks = callbacks)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2fc4c088",
   "metadata": {
    "id": "ukhXifxzTaj9",
    "papermill": {
     "duration": 0.012214,
     "end_time": "2025-01-20T03:58:09.495016",
     "exception": false,
     "start_time": "2025-01-20T03:58:09.482802",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Main"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "fdea69c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-20T03:58:09.520089Z",
     "iopub.status.busy": "2025-01-20T03:58:09.519796Z",
     "iopub.status.idle": "2025-01-20T10:31:00.110008Z",
     "shell.execute_reply": "2025-01-20T10:31:00.109033Z"
    },
    "id": "Ymqd_W21y3NK",
    "outputId": "5ca97a2f-f57c-46ee-8f53-f00181ccea90",
    "papermill": {
     "duration": 23570.620182,
     "end_time": "2025-01-20T10:31:00.127257",
     "exception": false,
     "start_time": "2025-01-20T03:58:09.507075",
     "status": "completed"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sbj =  8\n",
      "Total trials loaded: 198\n",
      "Shape of X: (198, 64, 3584), Shape of y: (198,)\n",
      "Resampling from 512 to 128.0 Hz.\n",
      "X_train shape: (198, 64, 320, 1), y_train shape: (198,)\n",
      "Running fold 0 with 158 training samples and 40 validation samples\n",
      "Fold 0: train indices: [172 177  79  37 128], val indices: [ 31 160 176 132  76]\n",
      "Training data shape: (158, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 0 training loss: 0.06969006359577179\n",
      "y_true (val): [0 1 1 1 0]\n",
      "y_pred: [0 1 1 0 0]\n",
      "Appending results for fold 0: {'fold_index': 0, 'train_indices': [172, 177, 79, 37, 128, 84, 72, 20, 14, 4, 43, 138, 134, 116, 178, 187, 55, 179, 71, 168, 129, 47, 77, 169, 115, 62, 56, 58, 87, 194, 124, 1, 165, 113, 164, 0, 61, 158, 90, 23, 63, 2, 19, 95, 82, 170, 163, 78, 104, 28, 184, 18, 190, 167, 141, 119, 27, 182, 42, 196, 96, 57, 26, 192, 48, 144, 81, 189, 97, 67, 86, 74, 24, 149, 22, 157, 36, 112, 162, 166, 156, 92, 186, 108, 105, 181, 195, 17, 50, 46, 38, 114, 52, 147, 155, 137, 7, 8, 15, 99, 185, 9, 33, 29, 188, 13, 5, 103, 11, 93, 35, 142, 159, 145, 94, 10, 171, 126, 32, 161, 150, 120, 191, 30, 34, 59, 70, 175, 80, 143, 123, 154, 65, 60, 106, 68, 135, 122, 193, 118, 111, 110, 89, 146, 41, 16, 3, 153, 100, 44, 101, 117, 53, 180, 173, 88, 174, 107], 'val_indices': [31, 160, 176, 132, 76, 69, 102, 49, 83, 109, 45, 75, 98, 21, 73, 54, 151, 148, 121, 39, 40, 183, 12, 139, 140, 136, 51, 6, 131, 127, 133, 152, 197, 130, 25, 85, 66, 125, 91, 64], 'accuracy': 0.45, 'kappa': -0.10000000000000009, 'auc': 0.53}\n",
      "New Max Found!\n",
      "Running fold 1 with 158 training samples and 40 validation samples\n",
      "Fold 1: train indices: [ 44 163  85 148  17], val indices: [115  98 142 180  94]\n",
      "Training data shape: (158, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 1 training loss: 0.06079883873462677\n",
      "y_true (val): [1 1 1 1 0]\n",
      "y_pred: [1 1 0 0 0]\n",
      "Appending results for fold 1: {'fold_index': 1, 'train_indices': [44, 163, 85, 148, 17, 170, 132, 155, 171, 138, 74, 179, 73, 20, 58, 174, 46, 133, 37, 69, 150, 136, 194, 157, 118, 95, 106, 129, 190, 3, 68, 102, 97, 6, 104, 166, 53, 88, 100, 175, 117, 65, 51, 63, 191, 121, 10, 59, 151, 96, 177, 39, 27, 112, 24, 149, 185, 114, 184, 34, 153, 48, 1, 30, 71, 77, 156, 181, 45, 5, 35, 12, 130, 41, 113, 122, 144, 33, 64, 123, 101, 87, 125, 111, 120, 164, 40, 126, 47, 128, 36, 70, 137, 8, 167, 0, 4, 110, 187, 28, 145, 29, 105, 83, 103, 15, 26, 76, 11, 152, 124, 196, 66, 25, 23, 168, 75, 186, 189, 60, 50, 84, 139, 55, 43, 192, 162, 146, 141, 107, 81, 99, 89, 182, 9, 183, 82, 160, 56, 62, 195, 140, 119, 93, 79, 108, 49, 14, 19, 178, 72, 143, 52, 42, 127, 161, 172, 31], 'val_indices': [115, 98, 142, 180, 94, 109, 18, 90, 135, 165, 158, 7, 92, 176, 188, 78, 147, 54, 80, 131, 67, 154, 86, 16, 61, 193, 13, 159, 116, 32, 57, 197, 38, 21, 134, 22, 91, 2, 173, 169], 'accuracy': 0.675, 'kappa': 0.35, 'auc': 0.7925}\n",
      "New Max Found!\n",
      "Running fold 2 with 158 training samples and 40 validation samples\n",
      "Fold 2: train indices: [ 14  24  51 131 140], val indices: [  6 147 190  48 118]\n",
      "Training data shape: (158, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 2 training loss: 0.0311406422406435\n",
      "y_true (val): [0 1 1 0 1]\n",
      "y_pred: [1 0 1 0 0]\n",
      "Appending results for fold 2: {'fold_index': 2, 'train_indices': [14, 24, 51, 131, 140, 141, 1, 134, 197, 53, 65, 132, 79, 155, 153, 144, 192, 171, 146, 35, 119, 34, 104, 183, 39, 95, 28, 37, 19, 67, 75, 40, 127, 164, 16, 30, 42, 149, 82, 0, 13, 154, 77, 91, 139, 55, 100, 113, 193, 46, 162, 142, 186, 125, 191, 158, 159, 52, 7, 167, 59, 69, 121, 10, 22, 195, 115, 109, 173, 86, 143, 194, 165, 38, 179, 98, 152, 90, 117, 172, 43, 94, 87, 27, 26, 73, 89, 96, 136, 72, 122, 103, 160, 189, 99, 116, 4, 20, 36, 92, 196, 78, 93, 128, 178, 66, 85, 170, 11, 49, 107, 68, 106, 15, 185, 9, 135, 175, 63, 174, 2, 81, 182, 101, 181, 108, 71, 126, 25, 31, 3, 84, 60, 184, 156, 133, 64, 177, 145, 17, 56, 41, 80, 105, 123, 124, 129, 74, 187, 166, 44, 163, 120, 23, 70, 58, 32, 111], 'val_indices': [6, 147, 190, 48, 118, 50, 157, 88, 5, 45, 180, 76, 130, 33, 21, 168, 29, 176, 161, 114, 110, 188, 62, 169, 47, 8, 18, 148, 112, 97, 12, 151, 150, 54, 83, 138, 57, 137, 102, 61], 'accuracy': 0.625, 'kappa': 0.25, 'auc': 0.655}\n",
      "Running fold 3 with 158 training samples and 40 validation samples\n",
      "Fold 3: train indices: [159  71  75  62  93], val indices: [122 180  30  27 132]\n",
      "Training data shape: (158, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 3 training loss: 0.12224016338586807\n",
      "y_true (val): [1 1 0 0 1]\n",
      "y_pred: [0 1 1 1 0]\n",
      "Appending results for fold 3: {'fold_index': 3, 'train_indices': [159, 71, 75, 62, 93, 22, 73, 137, 123, 82, 15, 124, 172, 118, 65, 47, 193, 174, 61, 140, 63, 104, 29, 151, 40, 189, 59, 91, 8, 38, 121, 184, 45, 155, 170, 185, 96, 87, 89, 107, 157, 16, 117, 26, 136, 179, 101, 1, 98, 72, 141, 52, 162, 54, 4, 197, 171, 31, 105, 9, 17, 152, 35, 164, 66, 12, 34, 175, 183, 149, 21, 111, 53, 48, 50, 83, 81, 74, 158, 156, 128, 196, 130, 106, 86, 85, 60, 177, 108, 77, 44, 18, 188, 0, 25, 41, 173, 37, 102, 146, 97, 92, 13, 56, 55, 147, 145, 90, 163, 191, 3, 24, 115, 139, 11, 6, 165, 110, 49, 88, 143, 195, 194, 109, 168, 84, 76, 94, 32, 176, 78, 126, 187, 120, 129, 23, 33, 166, 7, 69, 28, 178, 138, 116, 160, 148, 119, 125, 144, 131, 133, 99, 43, 10, 134, 181, 68, 169], 'val_indices': [122, 180, 30, 27, 132, 150, 192, 67, 153, 154, 79, 142, 113, 80, 95, 182, 42, 70, 114, 190, 46, 186, 57, 58, 135, 14, 103, 5, 39, 19, 20, 2, 51, 36, 167, 64, 100, 127, 112, 161], 'accuracy': 0.625, 'kappa': 0.25, 'auc': 0.6399999999999999}\n",
      "Running fold 4 with 158 training samples and 40 validation samples\n",
      "Fold 4: train indices: [104  59 113 169  52], val indices: [  5  40  42 138 122]\n",
      "Training data shape: (158, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 4 training loss: 0.03706764057278633\n",
      "y_true (val): [0 0 0 1 1]\n",
      "y_pred: [0 0 1 1 1]\n",
      "Appending results for fold 4: {'fold_index': 4, 'train_indices': [104, 59, 113, 169, 52, 127, 61, 157, 10, 141, 74, 94, 188, 39, 125, 176, 77, 72, 37, 179, 143, 68, 47, 110, 119, 128, 112, 172, 48, 14, 163, 120, 108, 131, 85, 124, 23, 171, 38, 15, 134, 102, 30, 103, 149, 155, 136, 194, 195, 105, 64, 6, 16, 99, 160, 97, 21, 84, 51, 34, 35, 98, 174, 92, 55, 76, 58, 153, 93, 190, 73, 87, 129, 88, 115, 148, 36, 142, 60, 177, 86, 106, 28, 191, 27, 159, 145, 8, 101, 184, 114, 53, 18, 186, 182, 147, 175, 181, 7, 161, 20, 189, 133, 139, 44, 116, 80, 135, 25, 187, 12, 13, 67, 54, 196, 173, 46, 24, 109, 82, 63, 57, 31, 123, 11, 71, 4, 96, 49, 9, 83, 185, 100, 168, 75, 0, 95, 117, 3, 197, 50, 154, 180, 69, 22, 146, 193, 66, 165, 152, 89, 26, 166, 107, 45, 183, 70, 156], 'val_indices': [5, 40, 42, 138, 122, 178, 158, 17, 130, 170, 167, 79, 137, 164, 90, 1, 151, 33, 78, 150, 162, 62, 126, 132, 29, 2, 32, 43, 81, 41, 111, 144, 192, 118, 65, 140, 91, 19, 121, 56], 'accuracy': 0.65, 'kappa': 0.30000000000000004, 'auc': 0.63}\n",
      "Final cross-validation results: {'params': [], 'mean_acc': 0.605, 'mean_kappa': 0.21, 'mean_auc': 0.65, 'mean_f1_left': array([0., 0., 0., 0., 0.]), 'mean_f1_right': array([0., 0., 0., 0., 0.]), 'mean_recall_left': array([0., 0., 0., 0., 0.]), 'mean_recall_right': array([0., 0., 0., 0., 0.]), 'mean_precision_left': array([0., 0., 0., 0., 0.]), 'mean_precision_right': array([0., 0., 0., 0., 0.]), 'all_folds': [{'fold_index': 0, 'train_indices': [172, 177, 79, 37, 128, 84, 72, 20, 14, 4, 43, 138, 134, 116, 178, 187, 55, 179, 71, 168, 129, 47, 77, 169, 115, 62, 56, 58, 87, 194, 124, 1, 165, 113, 164, 0, 61, 158, 90, 23, 63, 2, 19, 95, 82, 170, 163, 78, 104, 28, 184, 18, 190, 167, 141, 119, 27, 182, 42, 196, 96, 57, 26, 192, 48, 144, 81, 189, 97, 67, 86, 74, 24, 149, 22, 157, 36, 112, 162, 166, 156, 92, 186, 108, 105, 181, 195, 17, 50, 46, 38, 114, 52, 147, 155, 137, 7, 8, 15, 99, 185, 9, 33, 29, 188, 13, 5, 103, 11, 93, 35, 142, 159, 145, 94, 10, 171, 126, 32, 161, 150, 120, 191, 30, 34, 59, 70, 175, 80, 143, 123, 154, 65, 60, 106, 68, 135, 122, 193, 118, 111, 110, 89, 146, 41, 16, 3, 153, 100, 44, 101, 117, 53, 180, 173, 88, 174, 107], 'val_indices': [31, 160, 176, 132, 76, 69, 102, 49, 83, 109, 45, 75, 98, 21, 73, 54, 151, 148, 121, 39, 40, 183, 12, 139, 140, 136, 51, 6, 131, 127, 133, 152, 197, 130, 25, 85, 66, 125, 91, 64], 'accuracy': 0.45, 'kappa': -0.10000000000000009, 'auc': 0.53}, {'fold_index': 1, 'train_indices': [44, 163, 85, 148, 17, 170, 132, 155, 171, 138, 74, 179, 73, 20, 58, 174, 46, 133, 37, 69, 150, 136, 194, 157, 118, 95, 106, 129, 190, 3, 68, 102, 97, 6, 104, 166, 53, 88, 100, 175, 117, 65, 51, 63, 191, 121, 10, 59, 151, 96, 177, 39, 27, 112, 24, 149, 185, 114, 184, 34, 153, 48, 1, 30, 71, 77, 156, 181, 45, 5, 35, 12, 130, 41, 113, 122, 144, 33, 64, 123, 101, 87, 125, 111, 120, 164, 40, 126, 47, 128, 36, 70, 137, 8, 167, 0, 4, 110, 187, 28, 145, 29, 105, 83, 103, 15, 26, 76, 11, 152, 124, 196, 66, 25, 23, 168, 75, 186, 189, 60, 50, 84, 139, 55, 43, 192, 162, 146, 141, 107, 81, 99, 89, 182, 9, 183, 82, 160, 56, 62, 195, 140, 119, 93, 79, 108, 49, 14, 19, 178, 72, 143, 52, 42, 127, 161, 172, 31], 'val_indices': [115, 98, 142, 180, 94, 109, 18, 90, 135, 165, 158, 7, 92, 176, 188, 78, 147, 54, 80, 131, 67, 154, 86, 16, 61, 193, 13, 159, 116, 32, 57, 197, 38, 21, 134, 22, 91, 2, 173, 169], 'accuracy': 0.675, 'kappa': 0.35, 'auc': 0.7925}, {'fold_index': 2, 'train_indices': [14, 24, 51, 131, 140, 141, 1, 134, 197, 53, 65, 132, 79, 155, 153, 144, 192, 171, 146, 35, 119, 34, 104, 183, 39, 95, 28, 37, 19, 67, 75, 40, 127, 164, 16, 30, 42, 149, 82, 0, 13, 154, 77, 91, 139, 55, 100, 113, 193, 46, 162, 142, 186, 125, 191, 158, 159, 52, 7, 167, 59, 69, 121, 10, 22, 195, 115, 109, 173, 86, 143, 194, 165, 38, 179, 98, 152, 90, 117, 172, 43, 94, 87, 27, 26, 73, 89, 96, 136, 72, 122, 103, 160, 189, 99, 116, 4, 20, 36, 92, 196, 78, 93, 128, 178, 66, 85, 170, 11, 49, 107, 68, 106, 15, 185, 9, 135, 175, 63, 174, 2, 81, 182, 101, 181, 108, 71, 126, 25, 31, 3, 84, 60, 184, 156, 133, 64, 177, 145, 17, 56, 41, 80, 105, 123, 124, 129, 74, 187, 166, 44, 163, 120, 23, 70, 58, 32, 111], 'val_indices': [6, 147, 190, 48, 118, 50, 157, 88, 5, 45, 180, 76, 130, 33, 21, 168, 29, 176, 161, 114, 110, 188, 62, 169, 47, 8, 18, 148, 112, 97, 12, 151, 150, 54, 83, 138, 57, 137, 102, 61], 'accuracy': 0.625, 'kappa': 0.25, 'auc': 0.655}, {'fold_index': 3, 'train_indices': [159, 71, 75, 62, 93, 22, 73, 137, 123, 82, 15, 124, 172, 118, 65, 47, 193, 174, 61, 140, 63, 104, 29, 151, 40, 189, 59, 91, 8, 38, 121, 184, 45, 155, 170, 185, 96, 87, 89, 107, 157, 16, 117, 26, 136, 179, 101, 1, 98, 72, 141, 52, 162, 54, 4, 197, 171, 31, 105, 9, 17, 152, 35, 164, 66, 12, 34, 175, 183, 149, 21, 111, 53, 48, 50, 83, 81, 74, 158, 156, 128, 196, 130, 106, 86, 85, 60, 177, 108, 77, 44, 18, 188, 0, 25, 41, 173, 37, 102, 146, 97, 92, 13, 56, 55, 147, 145, 90, 163, 191, 3, 24, 115, 139, 11, 6, 165, 110, 49, 88, 143, 195, 194, 109, 168, 84, 76, 94, 32, 176, 78, 126, 187, 120, 129, 23, 33, 166, 7, 69, 28, 178, 138, 116, 160, 148, 119, 125, 144, 131, 133, 99, 43, 10, 134, 181, 68, 169], 'val_indices': [122, 180, 30, 27, 132, 150, 192, 67, 153, 154, 79, 142, 113, 80, 95, 182, 42, 70, 114, 190, 46, 186, 57, 58, 135, 14, 103, 5, 39, 19, 20, 2, 51, 36, 167, 64, 100, 127, 112, 161], 'accuracy': 0.625, 'kappa': 0.25, 'auc': 0.6399999999999999}, {'fold_index': 4, 'train_indices': [104, 59, 113, 169, 52, 127, 61, 157, 10, 141, 74, 94, 188, 39, 125, 176, 77, 72, 37, 179, 143, 68, 47, 110, 119, 128, 112, 172, 48, 14, 163, 120, 108, 131, 85, 124, 23, 171, 38, 15, 134, 102, 30, 103, 149, 155, 136, 194, 195, 105, 64, 6, 16, 99, 160, 97, 21, 84, 51, 34, 35, 98, 174, 92, 55, 76, 58, 153, 93, 190, 73, 87, 129, 88, 115, 148, 36, 142, 60, 177, 86, 106, 28, 191, 27, 159, 145, 8, 101, 184, 114, 53, 18, 186, 182, 147, 175, 181, 7, 161, 20, 189, 133, 139, 44, 116, 80, 135, 25, 187, 12, 13, 67, 54, 196, 173, 46, 24, 109, 82, 63, 57, 31, 123, 11, 71, 4, 96, 49, 9, 83, 185, 100, 168, 75, 0, 95, 117, 3, 197, 50, 154, 180, 69, 22, 146, 193, 66, 165, 152, 89, 26, 166, 107, 45, 183, 70, 156], 'val_indices': [5, 40, 42, 138, 122, 178, 158, 17, 130, 170, 167, 79, 137, 164, 90, 1, 151, 33, 78, 150, 162, 62, 126, 132, 29, 2, 32, 43, 81, 41, 111, 144, 192, 118, 65, 140, 91, 19, 121, 56], 'accuracy': 0.65, 'kappa': 0.30000000000000004, 'auc': 0.63}], 'std_acc': 0.08, 'std_kappa': 0.159, 'std_auc': 0.084}\n",
      "sbj =  9\n",
      "Total trials loaded: 240\n",
      "Shape of X: (240, 64, 3584), Shape of y: (240,)\n",
      "Resampling from 512 to 128.0 Hz.\n",
      "X_train shape: (240, 64, 320, 1), y_train shape: (240,)\n",
      "Running fold 0 with 192 training samples and 48 validation samples\n",
      "Fold 0: train indices: [226 220  34 169  29], val indices: [152  76 228 122  85]\n",
      "Training data shape: (192, 64, 320, 1), Validation data shape: (48, 64, 320, 1)\n",
      "Fold 0 training loss: 0.045134205371141434\n",
      "y_true (val): [1 0 1 1 0]\n",
      "y_pred: [1 0 0 1 1]\n",
      "Appending results for fold 0: {'fold_index': 0, 'train_indices': [226, 220, 34, 169, 29, 161, 156, 60, 159, 48, 223, 9, 59, 155, 119, 173, 46, 68, 33, 56, 19, 5, 195, 97, 208, 24, 149, 126, 205, 53, 157, 41, 234, 112, 30, 132, 187, 213, 212, 71, 38, 61, 106, 58, 100, 108, 18, 130, 170, 77, 207, 199, 214, 86, 26, 47, 197, 183, 136, 22, 204, 158, 127, 148, 116, 177, 80, 140, 224, 50, 95, 70, 101, 133, 139, 160, 227, 184, 137, 201, 96, 92, 16, 125, 217, 65, 82, 87, 146, 232, 28, 215, 150, 57, 88, 99, 166, 196, 81, 238, 43, 17, 55, 93, 52, 21, 237, 98, 165, 35, 128, 178, 84, 189, 153, 78, 141, 210, 229, 185, 179, 193, 89, 138, 14, 11, 164, 107, 3, 110, 23, 191, 225, 62, 37, 124, 123, 74, 15, 2, 131, 8, 145, 63, 211, 194, 180, 44, 105, 1, 115, 32, 143, 20, 174, 118, 167, 36, 203, 113, 171, 134, 219, 216, 233, 188, 144, 13, 221, 72, 111, 202, 94, 147, 114, 10, 235, 175, 4, 42, 79, 67, 218, 0, 239, 192, 27, 117, 200, 172, 7, 206], 'val_indices': [152, 76, 228, 122, 85, 103, 31, 120, 102, 222, 209, 129, 163, 142, 75, 49, 45, 69, 151, 73, 236, 83, 51, 135, 6, 91, 154, 231, 186, 104, 182, 66, 12, 168, 40, 190, 90, 181, 230, 54, 25, 176, 109, 162, 121, 39, 198, 64], 'accuracy': 0.7083333333333334, 'kappa': 0.41666666666666663, 'auc': 0.8020833333333333}\n",
      "New Max Found!\n",
      "Running fold 1 with 192 training samples and 48 validation samples\n",
      "Fold 1: train indices: [132 148 150 159  76], val indices: [238 116  61  84  44]\n",
      "Training data shape: (192, 64, 320, 1), Validation data shape: (48, 64, 320, 1)\n",
      "Fold 1 training loss: 0.07936776429414749\n",
      "y_true (val): [1 0 0 0 0]\n",
      "y_pred: [1 1 0 0 1]\n",
      "Appending results for fold 1: {'fold_index': 1, 'train_indices': [132, 148, 150, 159, 76, 70, 120, 117, 47, 129, 166, 18, 177, 154, 203, 111, 135, 176, 160, 34, 19, 130, 126, 98, 191, 193, 68, 119, 25, 196, 163, 13, 91, 26, 136, 121, 78, 174, 199, 179, 36, 198, 63, 133, 134, 210, 170, 185, 218, 138, 55, 145, 49, 59, 205, 94, 102, 115, 234, 57, 208, 165, 142, 28, 144, 69, 124, 82, 95, 40, 7, 131, 188, 226, 37, 80, 97, 180, 20, 214, 223, 112, 173, 96, 220, 110, 12, 88, 17, 22, 106, 101, 233, 109, 21, 182, 137, 236, 66, 6, 90, 228, 30, 194, 79, 10, 215, 43, 62, 113, 224, 5, 99, 161, 16, 147, 45, 2, 230, 8, 118, 81, 38, 32, 14, 227, 87, 195, 213, 122, 93, 52, 108, 237, 200, 128, 222, 67, 178, 114, 83, 181, 54, 31, 183, 73, 3, 29, 164, 60, 42, 39, 190, 72, 221, 219, 216, 58, 153, 89, 125, 202, 50, 64, 23, 74, 162, 158, 189, 4, 235, 92, 187, 123, 211, 141, 239, 65, 149, 27, 231, 217, 75, 139, 46, 143, 85, 146, 204, 197, 0, 151], 'val_indices': [238, 116, 61, 84, 44, 168, 107, 184, 86, 207, 201, 156, 209, 225, 1, 232, 15, 48, 35, 175, 206, 77, 186, 11, 152, 71, 157, 140, 33, 104, 24, 53, 9, 171, 100, 127, 155, 192, 229, 105, 103, 41, 51, 167, 56, 212, 172, 169], 'accuracy': 0.5833333333333334, 'kappa': 0.16666666666666663, 'auc': 0.5868055555555556}\n",
      "Running fold 2 with 192 training samples and 48 validation samples\n",
      "Fold 2: train indices: [168 214 118 197 149], val indices: [134  50 170 234  58]\n",
      "Training data shape: (192, 64, 320, 1), Validation data shape: (48, 64, 320, 1)\n",
      "Fold 2 training loss: 0.11867845803499222\n",
      "y_true (val): [1 0 1 1 0]\n",
      "y_pred: [0 1 1 1 0]\n",
      "Appending results for fold 2: {'fold_index': 2, 'train_indices': [168, 214, 118, 197, 149, 72, 117, 125, 44, 46, 225, 8, 142, 49, 108, 24, 237, 178, 123, 192, 92, 66, 164, 238, 32, 27, 190, 88, 105, 16, 186, 205, 124, 45, 90, 151, 155, 141, 204, 14, 37, 235, 96, 189, 126, 102, 231, 103, 161, 22, 75, 121, 25, 146, 110, 210, 84, 221, 211, 93, 209, 71, 140, 81, 112, 115, 227, 167, 65, 207, 199, 153, 3, 145, 74, 85, 76, 233, 48, 95, 98, 18, 87, 198, 89, 129, 53, 148, 47, 60, 182, 31, 232, 56, 188, 203, 26, 206, 212, 181, 201, 179, 39, 187, 158, 156, 154, 175, 144, 6, 55, 62, 229, 69, 9, 174, 176, 61, 86, 104, 163, 183, 162, 191, 40, 35, 68, 78, 195, 64, 12, 200, 208, 152, 42, 101, 138, 54, 196, 222, 83, 184, 113, 169, 193, 17, 239, 109, 147, 13, 63, 173, 29, 135, 185, 122, 150, 77, 137, 97, 157, 119, 133, 166, 94, 11, 5, 218, 59, 132, 0, 10, 91, 131, 20, 180, 216, 107, 4, 213, 171, 80, 99, 51, 127, 236, 111, 23, 70, 136, 7, 116], 'val_indices': [134, 50, 170, 234, 58, 28, 79, 52, 215, 1, 21, 160, 100, 67, 230, 159, 177, 202, 106, 15, 43, 220, 139, 57, 224, 223, 219, 226, 172, 165, 228, 120, 194, 38, 36, 82, 128, 143, 34, 114, 33, 217, 19, 2, 130, 30, 73, 41], 'accuracy': 0.7083333333333334, 'kappa': 0.41666666666666663, 'auc': 0.7430555555555556}\n",
      "Running fold 3 with 192 training samples and 48 validation samples\n",
      "Fold 3: train indices: [219 224 196 126 171], val indices: [175 117 237  59 216]\n",
      "Training data shape: (192, 64, 320, 1), Validation data shape: (48, 64, 320, 1)\n",
      "Fold 3 training loss: 0.040321871638298035\n",
      "y_true (val): [1 0 1 0 1]\n",
      "y_pred: [1 1 1 1 1]\n",
      "Appending results for fold 3: {'fold_index': 3, 'train_indices': [219, 224, 196, 126, 171, 81, 203, 107, 173, 142, 64, 10, 66, 152, 166, 29, 210, 78, 52, 63, 28, 223, 211, 23, 215, 164, 220, 188, 185, 12, 4, 170, 21, 103, 95, 55, 97, 217, 3, 98, 19, 83, 53, 123, 116, 84, 145, 194, 184, 2, 58, 206, 214, 94, 121, 51, 168, 42, 212, 226, 150, 238, 108, 118, 43, 197, 35, 156, 136, 193, 27, 87, 228, 162, 179, 62, 141, 221, 130, 47, 191, 88, 18, 69, 192, 26, 80, 233, 71, 176, 15, 151, 16, 0, 17, 236, 198, 73, 177, 32, 202, 41, 25, 13, 138, 60, 182, 92, 11, 144, 46, 77, 163, 111, 93, 234, 44, 201, 135, 207, 209, 161, 190, 70, 199, 119, 189, 114, 56, 127, 112, 45, 120, 30, 129, 178, 186, 106, 39, 9, 5, 24, 205, 139, 74, 105, 158, 222, 133, 72, 124, 22, 195, 174, 20, 65, 149, 8, 100, 132, 208, 96, 230, 101, 128, 90, 146, 57, 137, 160, 165, 7, 61, 125, 231, 109, 204, 131, 38, 122, 229, 91, 40, 54, 6, 37, 218, 31, 143, 200, 153, 36], 'val_indices': [175, 117, 237, 59, 216, 225, 75, 172, 82, 79, 76, 99, 48, 134, 14, 147, 232, 68, 169, 187, 102, 239, 235, 49, 148, 167, 104, 85, 180, 227, 33, 154, 113, 183, 67, 155, 159, 50, 213, 86, 140, 110, 89, 115, 157, 181, 34, 1], 'accuracy': 0.6666666666666666, 'kappa': 0.33333333333333337, 'auc': 0.7326388888888888}\n",
      "Running fold 4 with 192 training samples and 48 validation samples\n",
      "Fold 4: train indices: [182 140 177  57 197], val indices: [144  66  63  73 206]\n",
      "Training data shape: (192, 64, 320, 1), Validation data shape: (48, 64, 320, 1)\n",
      "Fold 4 training loss: 0.03631657734513283\n",
      "y_true (val): [1 0 0 0 1]\n",
      "y_pred: [0 1 1 0 1]\n",
      "Appending results for fold 4: {'fold_index': 4, 'train_indices': [182, 140, 177, 57, 197, 111, 45, 24, 215, 68, 32, 116, 59, 130, 17, 105, 165, 19, 219, 41, 97, 14, 72, 107, 20, 180, 64, 33, 118, 231, 95, 91, 224, 10, 30, 71, 22, 151, 3, 159, 69, 191, 83, 200, 141, 148, 18, 27, 127, 167, 7, 106, 61, 237, 172, 43, 82, 121, 160, 81, 149, 37, 222, 210, 109, 205, 188, 44, 239, 76, 162, 199, 15, 47, 42, 110, 29, 204, 75, 135, 128, 0, 123, 70, 56, 77, 119, 49, 235, 90, 60, 184, 53, 232, 103, 220, 54, 234, 26, 176, 169, 229, 233, 122, 94, 88, 194, 96, 115, 198, 65, 78, 145, 134, 171, 34, 166, 38, 139, 227, 98, 133, 163, 201, 117, 100, 92, 55, 187, 28, 104, 85, 138, 89, 6, 25, 178, 203, 208, 174, 136, 168, 142, 150, 1, 154, 51, 153, 13, 39, 16, 238, 126, 120, 236, 202, 35, 164, 9, 193, 156, 11, 146, 155, 217, 79, 125, 86, 183, 87, 102, 179, 131, 221, 212, 31, 189, 230, 185, 99, 147, 157, 158, 137, 226, 80, 228, 50, 108, 196, 124, 113], 'val_indices': [144, 66, 63, 73, 206, 74, 192, 2, 213, 129, 132, 152, 84, 93, 173, 195, 101, 4, 214, 5, 223, 218, 211, 36, 21, 170, 23, 114, 112, 67, 175, 40, 190, 207, 181, 8, 12, 62, 161, 143, 48, 46, 186, 225, 209, 216, 58, 52], 'accuracy': 0.5625, 'kappa': 0.125, 'auc': 0.703125}\n",
      "Final cross-validation results: {'params': [], 'mean_acc': 0.646, 'mean_kappa': 0.292, 'mean_auc': 0.714, 'mean_f1_left': array([0., 0., 0., 0., 0.]), 'mean_f1_right': array([0., 0., 0., 0., 0.]), 'mean_recall_left': array([0., 0., 0., 0., 0.]), 'mean_recall_right': array([0., 0., 0., 0., 0.]), 'mean_precision_left': array([0., 0., 0., 0., 0.]), 'mean_precision_right': array([0., 0., 0., 0., 0.]), 'all_folds': [{'fold_index': 0, 'train_indices': [226, 220, 34, 169, 29, 161, 156, 60, 159, 48, 223, 9, 59, 155, 119, 173, 46, 68, 33, 56, 19, 5, 195, 97, 208, 24, 149, 126, 205, 53, 157, 41, 234, 112, 30, 132, 187, 213, 212, 71, 38, 61, 106, 58, 100, 108, 18, 130, 170, 77, 207, 199, 214, 86, 26, 47, 197, 183, 136, 22, 204, 158, 127, 148, 116, 177, 80, 140, 224, 50, 95, 70, 101, 133, 139, 160, 227, 184, 137, 201, 96, 92, 16, 125, 217, 65, 82, 87, 146, 232, 28, 215, 150, 57, 88, 99, 166, 196, 81, 238, 43, 17, 55, 93, 52, 21, 237, 98, 165, 35, 128, 178, 84, 189, 153, 78, 141, 210, 229, 185, 179, 193, 89, 138, 14, 11, 164, 107, 3, 110, 23, 191, 225, 62, 37, 124, 123, 74, 15, 2, 131, 8, 145, 63, 211, 194, 180, 44, 105, 1, 115, 32, 143, 20, 174, 118, 167, 36, 203, 113, 171, 134, 219, 216, 233, 188, 144, 13, 221, 72, 111, 202, 94, 147, 114, 10, 235, 175, 4, 42, 79, 67, 218, 0, 239, 192, 27, 117, 200, 172, 7, 206], 'val_indices': [152, 76, 228, 122, 85, 103, 31, 120, 102, 222, 209, 129, 163, 142, 75, 49, 45, 69, 151, 73, 236, 83, 51, 135, 6, 91, 154, 231, 186, 104, 182, 66, 12, 168, 40, 190, 90, 181, 230, 54, 25, 176, 109, 162, 121, 39, 198, 64], 'accuracy': 0.7083333333333334, 'kappa': 0.41666666666666663, 'auc': 0.8020833333333333}, {'fold_index': 1, 'train_indices': [132, 148, 150, 159, 76, 70, 120, 117, 47, 129, 166, 18, 177, 154, 203, 111, 135, 176, 160, 34, 19, 130, 126, 98, 191, 193, 68, 119, 25, 196, 163, 13, 91, 26, 136, 121, 78, 174, 199, 179, 36, 198, 63, 133, 134, 210, 170, 185, 218, 138, 55, 145, 49, 59, 205, 94, 102, 115, 234, 57, 208, 165, 142, 28, 144, 69, 124, 82, 95, 40, 7, 131, 188, 226, 37, 80, 97, 180, 20, 214, 223, 112, 173, 96, 220, 110, 12, 88, 17, 22, 106, 101, 233, 109, 21, 182, 137, 236, 66, 6, 90, 228, 30, 194, 79, 10, 215, 43, 62, 113, 224, 5, 99, 161, 16, 147, 45, 2, 230, 8, 118, 81, 38, 32, 14, 227, 87, 195, 213, 122, 93, 52, 108, 237, 200, 128, 222, 67, 178, 114, 83, 181, 54, 31, 183, 73, 3, 29, 164, 60, 42, 39, 190, 72, 221, 219, 216, 58, 153, 89, 125, 202, 50, 64, 23, 74, 162, 158, 189, 4, 235, 92, 187, 123, 211, 141, 239, 65, 149, 27, 231, 217, 75, 139, 46, 143, 85, 146, 204, 197, 0, 151], 'val_indices': [238, 116, 61, 84, 44, 168, 107, 184, 86, 207, 201, 156, 209, 225, 1, 232, 15, 48, 35, 175, 206, 77, 186, 11, 152, 71, 157, 140, 33, 104, 24, 53, 9, 171, 100, 127, 155, 192, 229, 105, 103, 41, 51, 167, 56, 212, 172, 169], 'accuracy': 0.5833333333333334, 'kappa': 0.16666666666666663, 'auc': 0.5868055555555556}, {'fold_index': 2, 'train_indices': [168, 214, 118, 197, 149, 72, 117, 125, 44, 46, 225, 8, 142, 49, 108, 24, 237, 178, 123, 192, 92, 66, 164, 238, 32, 27, 190, 88, 105, 16, 186, 205, 124, 45, 90, 151, 155, 141, 204, 14, 37, 235, 96, 189, 126, 102, 231, 103, 161, 22, 75, 121, 25, 146, 110, 210, 84, 221, 211, 93, 209, 71, 140, 81, 112, 115, 227, 167, 65, 207, 199, 153, 3, 145, 74, 85, 76, 233, 48, 95, 98, 18, 87, 198, 89, 129, 53, 148, 47, 60, 182, 31, 232, 56, 188, 203, 26, 206, 212, 181, 201, 179, 39, 187, 158, 156, 154, 175, 144, 6, 55, 62, 229, 69, 9, 174, 176, 61, 86, 104, 163, 183, 162, 191, 40, 35, 68, 78, 195, 64, 12, 200, 208, 152, 42, 101, 138, 54, 196, 222, 83, 184, 113, 169, 193, 17, 239, 109, 147, 13, 63, 173, 29, 135, 185, 122, 150, 77, 137, 97, 157, 119, 133, 166, 94, 11, 5, 218, 59, 132, 0, 10, 91, 131, 20, 180, 216, 107, 4, 213, 171, 80, 99, 51, 127, 236, 111, 23, 70, 136, 7, 116], 'val_indices': [134, 50, 170, 234, 58, 28, 79, 52, 215, 1, 21, 160, 100, 67, 230, 159, 177, 202, 106, 15, 43, 220, 139, 57, 224, 223, 219, 226, 172, 165, 228, 120, 194, 38, 36, 82, 128, 143, 34, 114, 33, 217, 19, 2, 130, 30, 73, 41], 'accuracy': 0.7083333333333334, 'kappa': 0.41666666666666663, 'auc': 0.7430555555555556}, {'fold_index': 3, 'train_indices': [219, 224, 196, 126, 171, 81, 203, 107, 173, 142, 64, 10, 66, 152, 166, 29, 210, 78, 52, 63, 28, 223, 211, 23, 215, 164, 220, 188, 185, 12, 4, 170, 21, 103, 95, 55, 97, 217, 3, 98, 19, 83, 53, 123, 116, 84, 145, 194, 184, 2, 58, 206, 214, 94, 121, 51, 168, 42, 212, 226, 150, 238, 108, 118, 43, 197, 35, 156, 136, 193, 27, 87, 228, 162, 179, 62, 141, 221, 130, 47, 191, 88, 18, 69, 192, 26, 80, 233, 71, 176, 15, 151, 16, 0, 17, 236, 198, 73, 177, 32, 202, 41, 25, 13, 138, 60, 182, 92, 11, 144, 46, 77, 163, 111, 93, 234, 44, 201, 135, 207, 209, 161, 190, 70, 199, 119, 189, 114, 56, 127, 112, 45, 120, 30, 129, 178, 186, 106, 39, 9, 5, 24, 205, 139, 74, 105, 158, 222, 133, 72, 124, 22, 195, 174, 20, 65, 149, 8, 100, 132, 208, 96, 230, 101, 128, 90, 146, 57, 137, 160, 165, 7, 61, 125, 231, 109, 204, 131, 38, 122, 229, 91, 40, 54, 6, 37, 218, 31, 143, 200, 153, 36], 'val_indices': [175, 117, 237, 59, 216, 225, 75, 172, 82, 79, 76, 99, 48, 134, 14, 147, 232, 68, 169, 187, 102, 239, 235, 49, 148, 167, 104, 85, 180, 227, 33, 154, 113, 183, 67, 155, 159, 50, 213, 86, 140, 110, 89, 115, 157, 181, 34, 1], 'accuracy': 0.6666666666666666, 'kappa': 0.33333333333333337, 'auc': 0.7326388888888888}, {'fold_index': 4, 'train_indices': [182, 140, 177, 57, 197, 111, 45, 24, 215, 68, 32, 116, 59, 130, 17, 105, 165, 19, 219, 41, 97, 14, 72, 107, 20, 180, 64, 33, 118, 231, 95, 91, 224, 10, 30, 71, 22, 151, 3, 159, 69, 191, 83, 200, 141, 148, 18, 27, 127, 167, 7, 106, 61, 237, 172, 43, 82, 121, 160, 81, 149, 37, 222, 210, 109, 205, 188, 44, 239, 76, 162, 199, 15, 47, 42, 110, 29, 204, 75, 135, 128, 0, 123, 70, 56, 77, 119, 49, 235, 90, 60, 184, 53, 232, 103, 220, 54, 234, 26, 176, 169, 229, 233, 122, 94, 88, 194, 96, 115, 198, 65, 78, 145, 134, 171, 34, 166, 38, 139, 227, 98, 133, 163, 201, 117, 100, 92, 55, 187, 28, 104, 85, 138, 89, 6, 25, 178, 203, 208, 174, 136, 168, 142, 150, 1, 154, 51, 153, 13, 39, 16, 238, 126, 120, 236, 202, 35, 164, 9, 193, 156, 11, 146, 155, 217, 79, 125, 86, 183, 87, 102, 179, 131, 221, 212, 31, 189, 230, 185, 99, 147, 157, 158, 137, 226, 80, 228, 50, 108, 196, 124, 113], 'val_indices': [144, 66, 63, 73, 206, 74, 192, 2, 213, 129, 132, 152, 84, 93, 173, 195, 101, 4, 214, 5, 223, 218, 211, 36, 21, 170, 23, 114, 112, 67, 175, 40, 190, 207, 181, 8, 12, 62, 161, 143, 48, 46, 186, 225, 209, 216, 58, 52], 'accuracy': 0.5625, 'kappa': 0.125, 'auc': 0.703125}], 'std_acc': 0.062, 'std_kappa': 0.124, 'std_auc': 0.071}\n",
      "sbj =  10\n",
      "Total trials loaded: 200\n",
      "Shape of X: (200, 64, 3584), Shape of y: (200,)\n",
      "Resampling from 512 to 128.0 Hz.\n",
      "X_train shape: (200, 64, 320, 1), y_train shape: (200,)\n",
      "Running fold 0 with 160 training samples and 40 validation samples\n",
      "Fold 0: train indices: [  4 142 183  71  50], val indices: [ 25 107  31 188  83]\n",
      "Training data shape: (160, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 0 training loss: 0.09526560455560684\n",
      "y_true (val): [0 1 0 1 0]\n",
      "y_pred: [0 1 0 1 1]\n",
      "Appending results for fold 0: {'fold_index': 0, 'train_indices': [4, 142, 183, 71, 50, 179, 125, 131, 117, 60, 82, 55, 89, 21, 157, 47, 5, 42, 11, 19, 23, 172, 148, 99, 140, 34, 146, 115, 48, 147, 93, 2, 182, 138, 43, 57, 158, 187, 128, 18, 160, 33, 97, 14, 44, 177, 196, 61, 56, 174, 46, 67, 8, 101, 7, 41, 129, 184, 198, 98, 190, 74, 169, 24, 159, 173, 15, 70, 163, 58, 186, 72, 27, 87, 81, 26, 122, 96, 120, 65, 119, 102, 123, 167, 94, 130, 135, 77, 192, 175, 20, 37, 16, 0, 180, 144, 52, 145, 106, 139, 63, 9, 36, 153, 126, 17, 59, 29, 164, 30, 85, 156, 53, 79, 38, 118, 124, 193, 171, 35, 13, 151, 110, 95, 149, 136, 165, 168, 109, 88, 84, 92, 3, 121, 114, 143, 1, 10, 195, 28, 197, 103, 137, 152, 113, 112, 32, 189, 62, 199, 78, 68, 176, 161, 22, 155, 108, 80, 181, 166], 'val_indices': [25, 107, 31, 188, 83, 86, 111, 75, 191, 170, 76, 12, 100, 154, 73, 6, 66, 54, 104, 162, 91, 51, 132, 39, 105, 40, 134, 141, 45, 116, 185, 178, 127, 150, 194, 69, 133, 90, 64, 49], 'accuracy': 0.8, 'kappa': 0.6, 'auc': 0.915}\n",
      "New Max Found!\n",
      "Running fold 1 with 160 training samples and 40 validation samples\n",
      "Fold 1: train indices: [162  56 128 110  84], val indices: [175 156   7 191  76]\n",
      "Training data shape: (160, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 1 training loss: 0.04525371268391609\n",
      "y_true (val): [1 1 0 1 0]\n",
      "y_pred: [1 1 0 1 0]\n",
      "Appending results for fold 1: {'fold_index': 1, 'train_indices': [162, 56, 128, 110, 84, 70, 139, 147, 115, 155, 50, 165, 142, 109, 159, 194, 60, 15, 140, 195, 55, 86, 87, 130, 38, 79, 177, 92, 145, 47, 39, 135, 94, 197, 164, 104, 108, 88, 14, 21, 154, 17, 49, 11, 187, 114, 181, 158, 19, 77, 185, 123, 34, 25, 4, 12, 65, 30, 40, 129, 81, 189, 102, 141, 170, 68, 24, 71, 132, 107, 36, 27, 96, 66, 138, 63, 193, 113, 124, 99, 10, 150, 103, 5, 143, 146, 153, 122, 148, 9, 183, 105, 53, 166, 75, 52, 169, 43, 188, 59, 35, 186, 199, 93, 106, 3, 184, 33, 125, 74, 37, 1, 48, 180, 126, 121, 72, 62, 0, 173, 83, 119, 152, 23, 95, 73, 179, 44, 58, 120, 127, 157, 20, 163, 69, 190, 26, 112, 6, 134, 29, 64, 192, 172, 174, 28, 45, 168, 8, 46, 31, 116, 85, 131, 51, 32, 176, 198, 151, 42], 'val_indices': [175, 156, 7, 191, 76, 117, 54, 16, 2, 80, 41, 118, 78, 90, 100, 160, 149, 161, 171, 18, 82, 182, 101, 61, 91, 167, 144, 133, 196, 67, 22, 57, 137, 136, 98, 111, 89, 13, 178, 97], 'accuracy': 0.9, 'kappa': 0.8, 'auc': 0.9275}\n",
      "New Max Found!\n",
      "Running fold 2 with 160 training samples and 40 validation samples\n",
      "Fold 2: train indices: [  3 109 165  70  15], val indices: [ 58 152 153  54 171]\n",
      "Training data shape: (160, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 2 training loss: 0.05536545440554619\n",
      "y_true (val): [0 1 1 0 1]\n",
      "y_pred: [0 1 1 0 1]\n",
      "Appending results for fold 2: {'fold_index': 2, 'train_indices': [3, 109, 165, 70, 15, 172, 19, 5, 38, 146, 77, 11, 147, 198, 92, 18, 174, 2, 176, 168, 118, 199, 63, 100, 158, 17, 134, 86, 105, 24, 34, 175, 61, 166, 125, 97, 39, 108, 78, 79, 80, 31, 46, 180, 60, 113, 127, 87, 186, 144, 124, 67, 13, 136, 74, 65, 115, 167, 123, 72, 191, 182, 82, 23, 110, 40, 119, 183, 148, 128, 143, 85, 142, 107, 189, 30, 130, 145, 103, 96, 164, 151, 98, 64, 101, 43, 81, 49, 75, 69, 89, 106, 66, 162, 154, 161, 122, 188, 121, 10, 20, 91, 52, 111, 137, 57, 93, 178, 102, 138, 55, 47, 133, 42, 12, 196, 99, 177, 44, 169, 37, 193, 157, 1, 190, 0, 26, 141, 155, 173, 28, 27, 16, 32, 7, 195, 131, 197, 14, 156, 185, 36, 95, 71, 51, 160, 194, 117, 56, 68, 126, 41, 59, 135, 129, 4, 53, 90, 94, 179], 'val_indices': [58, 152, 153, 54, 171, 88, 170, 45, 21, 84, 181, 73, 150, 22, 29, 184, 25, 120, 159, 114, 116, 187, 6, 149, 83, 33, 50, 139, 104, 9, 48, 132, 112, 35, 76, 163, 8, 140, 192, 62], 'accuracy': 0.775, 'kappa': 0.55, 'auc': 0.8975}\n",
      "Running fold 3 with 160 training samples and 40 validation samples\n",
      "Fold 3: train indices: [66 43 45 22 69], val indices: [ 20  14 169 144 196]\n",
      "Training data shape: (160, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 3 training loss: 0.0697268694639206\n",
      "y_true (val): [0 0 1 1 1]\n",
      "y_pred: [0 0 1 1 1]\n",
      "Appending results for fold 3: {'fold_index': 3, 'train_indices': [66, 43, 45, 22, 69, 48, 44, 60, 123, 74, 179, 25, 150, 171, 132, 28, 165, 96, 73, 113, 127, 72, 135, 52, 38, 23, 122, 100, 177, 92, 137, 148, 12, 8, 91, 159, 172, 125, 187, 32, 29, 173, 40, 108, 4, 151, 37, 186, 34, 21, 1, 33, 190, 176, 35, 146, 143, 68, 160, 136, 107, 103, 53, 49, 141, 131, 15, 50, 54, 199, 126, 154, 7, 193, 0, 89, 55, 56, 10, 98, 134, 106, 161, 168, 138, 112, 63, 88, 83, 174, 121, 81, 65, 61, 109, 78, 26, 47, 104, 9, 153, 180, 31, 94, 71, 77, 18, 195, 167, 75, 164, 162, 86, 85, 157, 119, 3, 84, 149, 142, 82, 95, 175, 191, 139, 133, 117, 24, 76, 41, 62, 198, 6, 111, 183, 110, 30, 11, 99, 178, 93, 87, 13, 166, 189, 170, 185, 118, 130, 197, 120, 128, 158, 140, 16, 59, 145, 101, 17, 181], 'val_indices': [20, 14, 169, 144, 196, 105, 67, 182, 36, 39, 97, 57, 64, 58, 79, 90, 188, 194, 155, 129, 102, 192, 27, 5, 124, 116, 80, 184, 152, 163, 46, 156, 114, 147, 115, 70, 19, 2, 51, 42], 'accuracy': 0.8, 'kappa': 0.6, 'auc': 0.8650000000000001}\n",
      "Running fold 4 with 160 training samples and 40 validation samples\n",
      "Fold 4: train indices: [ 52   4 194  64  46], val indices: [123  35  89 183   0]\n",
      "Training data shape: (160, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 4 training loss: 0.12369563430547714\n",
      "y_true (val): [1 0 0 1 0]\n",
      "y_pred: [0 0 0 1 0]\n",
      "Appending results for fold 4: {'fold_index': 4, 'train_indices': [52, 4, 194, 64, 46, 59, 38, 21, 193, 157, 28, 57, 17, 154, 184, 97, 139, 125, 102, 182, 30, 143, 180, 50, 126, 13, 161, 100, 15, 135, 45, 74, 153, 51, 115, 189, 181, 187, 37, 133, 118, 168, 16, 136, 66, 73, 19, 174, 22, 24, 71, 192, 63, 144, 122, 72, 54, 175, 147, 155, 85, 107, 149, 103, 69, 31, 27, 145, 7, 84, 77, 191, 88, 79, 114, 49, 90, 124, 5, 111, 36, 172, 131, 61, 32, 185, 173, 2, 166, 39, 148, 110, 34, 199, 65, 186, 23, 91, 159, 170, 93, 119, 195, 116, 129, 76, 53, 158, 101, 130, 178, 156, 6, 94, 138, 167, 96, 68, 132, 165, 92, 140, 12, 137, 44, 188, 160, 83, 47, 60, 98, 81, 105, 78, 58, 11, 25, 26, 82, 141, 171, 196, 62, 48, 1, 177, 70, 121, 8, 163, 109, 95, 104, 43, 117, 150, 14, 197, 127, 33], 'val_indices': [123, 35, 89, 183, 0, 80, 75, 134, 10, 87, 120, 40, 151, 67, 86, 99, 152, 42, 20, 176, 162, 169, 41, 190, 56, 9, 142, 146, 112, 108, 3, 128, 198, 106, 55, 29, 18, 164, 113, 179], 'accuracy': 0.75, 'kappa': 0.5, 'auc': 0.8999999999999999}\n",
      "Final cross-validation results: {'params': [], 'mean_acc': 0.805, 'mean_kappa': 0.61, 'mean_auc': 0.901, 'mean_f1_left': array([0., 0., 0., 0., 0.]), 'mean_f1_right': array([0., 0., 0., 0., 0.]), 'mean_recall_left': array([0., 0., 0., 0., 0.]), 'mean_recall_right': array([0., 0., 0., 0., 0.]), 'mean_precision_left': array([0., 0., 0., 0., 0.]), 'mean_precision_right': array([0., 0., 0., 0., 0.]), 'all_folds': [{'fold_index': 0, 'train_indices': [4, 142, 183, 71, 50, 179, 125, 131, 117, 60, 82, 55, 89, 21, 157, 47, 5, 42, 11, 19, 23, 172, 148, 99, 140, 34, 146, 115, 48, 147, 93, 2, 182, 138, 43, 57, 158, 187, 128, 18, 160, 33, 97, 14, 44, 177, 196, 61, 56, 174, 46, 67, 8, 101, 7, 41, 129, 184, 198, 98, 190, 74, 169, 24, 159, 173, 15, 70, 163, 58, 186, 72, 27, 87, 81, 26, 122, 96, 120, 65, 119, 102, 123, 167, 94, 130, 135, 77, 192, 175, 20, 37, 16, 0, 180, 144, 52, 145, 106, 139, 63, 9, 36, 153, 126, 17, 59, 29, 164, 30, 85, 156, 53, 79, 38, 118, 124, 193, 171, 35, 13, 151, 110, 95, 149, 136, 165, 168, 109, 88, 84, 92, 3, 121, 114, 143, 1, 10, 195, 28, 197, 103, 137, 152, 113, 112, 32, 189, 62, 199, 78, 68, 176, 161, 22, 155, 108, 80, 181, 166], 'val_indices': [25, 107, 31, 188, 83, 86, 111, 75, 191, 170, 76, 12, 100, 154, 73, 6, 66, 54, 104, 162, 91, 51, 132, 39, 105, 40, 134, 141, 45, 116, 185, 178, 127, 150, 194, 69, 133, 90, 64, 49], 'accuracy': 0.8, 'kappa': 0.6, 'auc': 0.915}, {'fold_index': 1, 'train_indices': [162, 56, 128, 110, 84, 70, 139, 147, 115, 155, 50, 165, 142, 109, 159, 194, 60, 15, 140, 195, 55, 86, 87, 130, 38, 79, 177, 92, 145, 47, 39, 135, 94, 197, 164, 104, 108, 88, 14, 21, 154, 17, 49, 11, 187, 114, 181, 158, 19, 77, 185, 123, 34, 25, 4, 12, 65, 30, 40, 129, 81, 189, 102, 141, 170, 68, 24, 71, 132, 107, 36, 27, 96, 66, 138, 63, 193, 113, 124, 99, 10, 150, 103, 5, 143, 146, 153, 122, 148, 9, 183, 105, 53, 166, 75, 52, 169, 43, 188, 59, 35, 186, 199, 93, 106, 3, 184, 33, 125, 74, 37, 1, 48, 180, 126, 121, 72, 62, 0, 173, 83, 119, 152, 23, 95, 73, 179, 44, 58, 120, 127, 157, 20, 163, 69, 190, 26, 112, 6, 134, 29, 64, 192, 172, 174, 28, 45, 168, 8, 46, 31, 116, 85, 131, 51, 32, 176, 198, 151, 42], 'val_indices': [175, 156, 7, 191, 76, 117, 54, 16, 2, 80, 41, 118, 78, 90, 100, 160, 149, 161, 171, 18, 82, 182, 101, 61, 91, 167, 144, 133, 196, 67, 22, 57, 137, 136, 98, 111, 89, 13, 178, 97], 'accuracy': 0.9, 'kappa': 0.8, 'auc': 0.9275}, {'fold_index': 2, 'train_indices': [3, 109, 165, 70, 15, 172, 19, 5, 38, 146, 77, 11, 147, 198, 92, 18, 174, 2, 176, 168, 118, 199, 63, 100, 158, 17, 134, 86, 105, 24, 34, 175, 61, 166, 125, 97, 39, 108, 78, 79, 80, 31, 46, 180, 60, 113, 127, 87, 186, 144, 124, 67, 13, 136, 74, 65, 115, 167, 123, 72, 191, 182, 82, 23, 110, 40, 119, 183, 148, 128, 143, 85, 142, 107, 189, 30, 130, 145, 103, 96, 164, 151, 98, 64, 101, 43, 81, 49, 75, 69, 89, 106, 66, 162, 154, 161, 122, 188, 121, 10, 20, 91, 52, 111, 137, 57, 93, 178, 102, 138, 55, 47, 133, 42, 12, 196, 99, 177, 44, 169, 37, 193, 157, 1, 190, 0, 26, 141, 155, 173, 28, 27, 16, 32, 7, 195, 131, 197, 14, 156, 185, 36, 95, 71, 51, 160, 194, 117, 56, 68, 126, 41, 59, 135, 129, 4, 53, 90, 94, 179], 'val_indices': [58, 152, 153, 54, 171, 88, 170, 45, 21, 84, 181, 73, 150, 22, 29, 184, 25, 120, 159, 114, 116, 187, 6, 149, 83, 33, 50, 139, 104, 9, 48, 132, 112, 35, 76, 163, 8, 140, 192, 62], 'accuracy': 0.775, 'kappa': 0.55, 'auc': 0.8975}, {'fold_index': 3, 'train_indices': [66, 43, 45, 22, 69, 48, 44, 60, 123, 74, 179, 25, 150, 171, 132, 28, 165, 96, 73, 113, 127, 72, 135, 52, 38, 23, 122, 100, 177, 92, 137, 148, 12, 8, 91, 159, 172, 125, 187, 32, 29, 173, 40, 108, 4, 151, 37, 186, 34, 21, 1, 33, 190, 176, 35, 146, 143, 68, 160, 136, 107, 103, 53, 49, 141, 131, 15, 50, 54, 199, 126, 154, 7, 193, 0, 89, 55, 56, 10, 98, 134, 106, 161, 168, 138, 112, 63, 88, 83, 174, 121, 81, 65, 61, 109, 78, 26, 47, 104, 9, 153, 180, 31, 94, 71, 77, 18, 195, 167, 75, 164, 162, 86, 85, 157, 119, 3, 84, 149, 142, 82, 95, 175, 191, 139, 133, 117, 24, 76, 41, 62, 198, 6, 111, 183, 110, 30, 11, 99, 178, 93, 87, 13, 166, 189, 170, 185, 118, 130, 197, 120, 128, 158, 140, 16, 59, 145, 101, 17, 181], 'val_indices': [20, 14, 169, 144, 196, 105, 67, 182, 36, 39, 97, 57, 64, 58, 79, 90, 188, 194, 155, 129, 102, 192, 27, 5, 124, 116, 80, 184, 152, 163, 46, 156, 114, 147, 115, 70, 19, 2, 51, 42], 'accuracy': 0.8, 'kappa': 0.6, 'auc': 0.8650000000000001}, {'fold_index': 4, 'train_indices': [52, 4, 194, 64, 46, 59, 38, 21, 193, 157, 28, 57, 17, 154, 184, 97, 139, 125, 102, 182, 30, 143, 180, 50, 126, 13, 161, 100, 15, 135, 45, 74, 153, 51, 115, 189, 181, 187, 37, 133, 118, 168, 16, 136, 66, 73, 19, 174, 22, 24, 71, 192, 63, 144, 122, 72, 54, 175, 147, 155, 85, 107, 149, 103, 69, 31, 27, 145, 7, 84, 77, 191, 88, 79, 114, 49, 90, 124, 5, 111, 36, 172, 131, 61, 32, 185, 173, 2, 166, 39, 148, 110, 34, 199, 65, 186, 23, 91, 159, 170, 93, 119, 195, 116, 129, 76, 53, 158, 101, 130, 178, 156, 6, 94, 138, 167, 96, 68, 132, 165, 92, 140, 12, 137, 44, 188, 160, 83, 47, 60, 98, 81, 105, 78, 58, 11, 25, 26, 82, 141, 171, 196, 62, 48, 1, 177, 70, 121, 8, 163, 109, 95, 104, 43, 117, 150, 14, 197, 127, 33], 'val_indices': [123, 35, 89, 183, 0, 80, 75, 134, 10, 87, 120, 40, 151, 67, 86, 99, 152, 42, 20, 176, 162, 169, 41, 190, 56, 9, 142, 146, 112, 108, 3, 128, 198, 106, 55, 29, 18, 164, 113, 179], 'accuracy': 0.75, 'kappa': 0.5, 'auc': 0.8999999999999999}], 'std_acc': 0.051, 'std_kappa': 0.102, 'std_auc': 0.021}\n",
      "sbj =  11\n",
      "Total trials loaded: 200\n",
      "Shape of X: (200, 64, 3584), Shape of y: (200,)\n",
      "Resampling from 512 to 128.0 Hz.\n",
      "X_train shape: (200, 64, 320, 1), y_train shape: (200,)\n",
      "Running fold 0 with 160 training samples and 40 validation samples\n",
      "Fold 0: train indices: [  4 142 183  71  50], val indices: [ 25 107  31 188  83]\n",
      "Training data shape: (160, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 0 training loss: 0.0880574882030487\n",
      "y_true (val): [0 1 0 1 0]\n",
      "y_pred: [1 0 1 0 0]\n",
      "Appending results for fold 0: {'fold_index': 0, 'train_indices': [4, 142, 183, 71, 50, 179, 125, 131, 117, 60, 82, 55, 89, 21, 157, 47, 5, 42, 11, 19, 23, 172, 148, 99, 140, 34, 146, 115, 48, 147, 93, 2, 182, 138, 43, 57, 158, 187, 128, 18, 160, 33, 97, 14, 44, 177, 196, 61, 56, 174, 46, 67, 8, 101, 7, 41, 129, 184, 198, 98, 190, 74, 169, 24, 159, 173, 15, 70, 163, 58, 186, 72, 27, 87, 81, 26, 122, 96, 120, 65, 119, 102, 123, 167, 94, 130, 135, 77, 192, 175, 20, 37, 16, 0, 180, 144, 52, 145, 106, 139, 63, 9, 36, 153, 126, 17, 59, 29, 164, 30, 85, 156, 53, 79, 38, 118, 124, 193, 171, 35, 13, 151, 110, 95, 149, 136, 165, 168, 109, 88, 84, 92, 3, 121, 114, 143, 1, 10, 195, 28, 197, 103, 137, 152, 113, 112, 32, 189, 62, 199, 78, 68, 176, 161, 22, 155, 108, 80, 181, 166], 'val_indices': [25, 107, 31, 188, 83, 86, 111, 75, 191, 170, 76, 12, 100, 154, 73, 6, 66, 54, 104, 162, 91, 51, 132, 39, 105, 40, 134, 141, 45, 116, 185, 178, 127, 150, 194, 69, 133, 90, 64, 49], 'accuracy': 0.425, 'kappa': -0.1499999999999999, 'auc': 0.48}\n",
      "New Max Found!\n",
      "Running fold 1 with 160 training samples and 40 validation samples\n",
      "Fold 1: train indices: [162  56 128 110  84], val indices: [175 156   7 191  76]\n",
      "Training data shape: (160, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 1 training loss: 0.1586058884859085\n",
      "y_true (val): [1 1 0 1 0]\n",
      "y_pred: [1 1 0 1 0]\n",
      "Appending results for fold 1: {'fold_index': 1, 'train_indices': [162, 56, 128, 110, 84, 70, 139, 147, 115, 155, 50, 165, 142, 109, 159, 194, 60, 15, 140, 195, 55, 86, 87, 130, 38, 79, 177, 92, 145, 47, 39, 135, 94, 197, 164, 104, 108, 88, 14, 21, 154, 17, 49, 11, 187, 114, 181, 158, 19, 77, 185, 123, 34, 25, 4, 12, 65, 30, 40, 129, 81, 189, 102, 141, 170, 68, 24, 71, 132, 107, 36, 27, 96, 66, 138, 63, 193, 113, 124, 99, 10, 150, 103, 5, 143, 146, 153, 122, 148, 9, 183, 105, 53, 166, 75, 52, 169, 43, 188, 59, 35, 186, 199, 93, 106, 3, 184, 33, 125, 74, 37, 1, 48, 180, 126, 121, 72, 62, 0, 173, 83, 119, 152, 23, 95, 73, 179, 44, 58, 120, 127, 157, 20, 163, 69, 190, 26, 112, 6, 134, 29, 64, 192, 172, 174, 28, 45, 168, 8, 46, 31, 116, 85, 131, 51, 32, 176, 198, 151, 42], 'val_indices': [175, 156, 7, 191, 76, 117, 54, 16, 2, 80, 41, 118, 78, 90, 100, 160, 149, 161, 171, 18, 82, 182, 101, 61, 91, 167, 144, 133, 196, 67, 22, 57, 137, 136, 98, 111, 89, 13, 178, 97], 'accuracy': 0.525, 'kappa': 0.050000000000000044, 'auc': 0.575}\n",
      "New Max Found!\n",
      "Running fold 2 with 160 training samples and 40 validation samples\n",
      "Fold 2: train indices: [  3 109 165  70  15], val indices: [ 58 152 153  54 171]\n",
      "Training data shape: (160, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 2 training loss: 0.06373266875743866\n",
      "y_true (val): [0 1 1 0 1]\n",
      "y_pred: [1 0 1 0 1]\n",
      "Appending results for fold 2: {'fold_index': 2, 'train_indices': [3, 109, 165, 70, 15, 172, 19, 5, 38, 146, 77, 11, 147, 198, 92, 18, 174, 2, 176, 168, 118, 199, 63, 100, 158, 17, 134, 86, 105, 24, 34, 175, 61, 166, 125, 97, 39, 108, 78, 79, 80, 31, 46, 180, 60, 113, 127, 87, 186, 144, 124, 67, 13, 136, 74, 65, 115, 167, 123, 72, 191, 182, 82, 23, 110, 40, 119, 183, 148, 128, 143, 85, 142, 107, 189, 30, 130, 145, 103, 96, 164, 151, 98, 64, 101, 43, 81, 49, 75, 69, 89, 106, 66, 162, 154, 161, 122, 188, 121, 10, 20, 91, 52, 111, 137, 57, 93, 178, 102, 138, 55, 47, 133, 42, 12, 196, 99, 177, 44, 169, 37, 193, 157, 1, 190, 0, 26, 141, 155, 173, 28, 27, 16, 32, 7, 195, 131, 197, 14, 156, 185, 36, 95, 71, 51, 160, 194, 117, 56, 68, 126, 41, 59, 135, 129, 4, 53, 90, 94, 179], 'val_indices': [58, 152, 153, 54, 171, 88, 170, 45, 21, 84, 181, 73, 150, 22, 29, 184, 25, 120, 159, 114, 116, 187, 6, 149, 83, 33, 50, 139, 104, 9, 48, 132, 112, 35, 76, 163, 8, 140, 192, 62], 'accuracy': 0.725, 'kappa': 0.44999999999999996, 'auc': 0.8775}\n",
      "New Max Found!\n",
      "Running fold 3 with 160 training samples and 40 validation samples\n",
      "Fold 3: train indices: [66 43 45 22 69], val indices: [ 20  14 169 144 196]\n",
      "Training data shape: (160, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 3 training loss: 0.05409931018948555\n",
      "y_true (val): [0 0 1 1 1]\n",
      "y_pred: [0 1 1 0 1]\n",
      "Appending results for fold 3: {'fold_index': 3, 'train_indices': [66, 43, 45, 22, 69, 48, 44, 60, 123, 74, 179, 25, 150, 171, 132, 28, 165, 96, 73, 113, 127, 72, 135, 52, 38, 23, 122, 100, 177, 92, 137, 148, 12, 8, 91, 159, 172, 125, 187, 32, 29, 173, 40, 108, 4, 151, 37, 186, 34, 21, 1, 33, 190, 176, 35, 146, 143, 68, 160, 136, 107, 103, 53, 49, 141, 131, 15, 50, 54, 199, 126, 154, 7, 193, 0, 89, 55, 56, 10, 98, 134, 106, 161, 168, 138, 112, 63, 88, 83, 174, 121, 81, 65, 61, 109, 78, 26, 47, 104, 9, 153, 180, 31, 94, 71, 77, 18, 195, 167, 75, 164, 162, 86, 85, 157, 119, 3, 84, 149, 142, 82, 95, 175, 191, 139, 133, 117, 24, 76, 41, 62, 198, 6, 111, 183, 110, 30, 11, 99, 178, 93, 87, 13, 166, 189, 170, 185, 118, 130, 197, 120, 128, 158, 140, 16, 59, 145, 101, 17, 181], 'val_indices': [20, 14, 169, 144, 196, 105, 67, 182, 36, 39, 97, 57, 64, 58, 79, 90, 188, 194, 155, 129, 102, 192, 27, 5, 124, 116, 80, 184, 152, 163, 46, 156, 114, 147, 115, 70, 19, 2, 51, 42], 'accuracy': 0.55, 'kappa': 0.09999999999999998, 'auc': 0.6200000000000001}\n",
      "Running fold 4 with 160 training samples and 40 validation samples\n",
      "Fold 4: train indices: [ 52   4 194  64  46], val indices: [123  35  89 183   0]\n",
      "Training data shape: (160, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 4 training loss: 0.033385761082172394\n",
      "y_true (val): [1 0 0 1 0]\n",
      "y_pred: [1 1 1 1 0]\n",
      "Appending results for fold 4: {'fold_index': 4, 'train_indices': [52, 4, 194, 64, 46, 59, 38, 21, 193, 157, 28, 57, 17, 154, 184, 97, 139, 125, 102, 182, 30, 143, 180, 50, 126, 13, 161, 100, 15, 135, 45, 74, 153, 51, 115, 189, 181, 187, 37, 133, 118, 168, 16, 136, 66, 73, 19, 174, 22, 24, 71, 192, 63, 144, 122, 72, 54, 175, 147, 155, 85, 107, 149, 103, 69, 31, 27, 145, 7, 84, 77, 191, 88, 79, 114, 49, 90, 124, 5, 111, 36, 172, 131, 61, 32, 185, 173, 2, 166, 39, 148, 110, 34, 199, 65, 186, 23, 91, 159, 170, 93, 119, 195, 116, 129, 76, 53, 158, 101, 130, 178, 156, 6, 94, 138, 167, 96, 68, 132, 165, 92, 140, 12, 137, 44, 188, 160, 83, 47, 60, 98, 81, 105, 78, 58, 11, 25, 26, 82, 141, 171, 196, 62, 48, 1, 177, 70, 121, 8, 163, 109, 95, 104, 43, 117, 150, 14, 197, 127, 33], 'val_indices': [123, 35, 89, 183, 0, 80, 75, 134, 10, 87, 120, 40, 151, 67, 86, 99, 152, 42, 20, 176, 162, 169, 41, 190, 56, 9, 142, 146, 112, 108, 3, 128, 198, 106, 55, 29, 18, 164, 113, 179], 'accuracy': 0.525, 'kappa': 0.050000000000000044, 'auc': 0.585}\n",
      "Final cross-validation results: {'params': [], 'mean_acc': 0.55, 'mean_kappa': 0.1, 'mean_auc': 0.628, 'mean_f1_left': array([0., 0., 0., 0., 0.]), 'mean_f1_right': array([0., 0., 0., 0., 0.]), 'mean_recall_left': array([0., 0., 0., 0., 0.]), 'mean_recall_right': array([0., 0., 0., 0., 0.]), 'mean_precision_left': array([0., 0., 0., 0., 0.]), 'mean_precision_right': array([0., 0., 0., 0., 0.]), 'all_folds': [{'fold_index': 0, 'train_indices': [4, 142, 183, 71, 50, 179, 125, 131, 117, 60, 82, 55, 89, 21, 157, 47, 5, 42, 11, 19, 23, 172, 148, 99, 140, 34, 146, 115, 48, 147, 93, 2, 182, 138, 43, 57, 158, 187, 128, 18, 160, 33, 97, 14, 44, 177, 196, 61, 56, 174, 46, 67, 8, 101, 7, 41, 129, 184, 198, 98, 190, 74, 169, 24, 159, 173, 15, 70, 163, 58, 186, 72, 27, 87, 81, 26, 122, 96, 120, 65, 119, 102, 123, 167, 94, 130, 135, 77, 192, 175, 20, 37, 16, 0, 180, 144, 52, 145, 106, 139, 63, 9, 36, 153, 126, 17, 59, 29, 164, 30, 85, 156, 53, 79, 38, 118, 124, 193, 171, 35, 13, 151, 110, 95, 149, 136, 165, 168, 109, 88, 84, 92, 3, 121, 114, 143, 1, 10, 195, 28, 197, 103, 137, 152, 113, 112, 32, 189, 62, 199, 78, 68, 176, 161, 22, 155, 108, 80, 181, 166], 'val_indices': [25, 107, 31, 188, 83, 86, 111, 75, 191, 170, 76, 12, 100, 154, 73, 6, 66, 54, 104, 162, 91, 51, 132, 39, 105, 40, 134, 141, 45, 116, 185, 178, 127, 150, 194, 69, 133, 90, 64, 49], 'accuracy': 0.425, 'kappa': -0.1499999999999999, 'auc': 0.48}, {'fold_index': 1, 'train_indices': [162, 56, 128, 110, 84, 70, 139, 147, 115, 155, 50, 165, 142, 109, 159, 194, 60, 15, 140, 195, 55, 86, 87, 130, 38, 79, 177, 92, 145, 47, 39, 135, 94, 197, 164, 104, 108, 88, 14, 21, 154, 17, 49, 11, 187, 114, 181, 158, 19, 77, 185, 123, 34, 25, 4, 12, 65, 30, 40, 129, 81, 189, 102, 141, 170, 68, 24, 71, 132, 107, 36, 27, 96, 66, 138, 63, 193, 113, 124, 99, 10, 150, 103, 5, 143, 146, 153, 122, 148, 9, 183, 105, 53, 166, 75, 52, 169, 43, 188, 59, 35, 186, 199, 93, 106, 3, 184, 33, 125, 74, 37, 1, 48, 180, 126, 121, 72, 62, 0, 173, 83, 119, 152, 23, 95, 73, 179, 44, 58, 120, 127, 157, 20, 163, 69, 190, 26, 112, 6, 134, 29, 64, 192, 172, 174, 28, 45, 168, 8, 46, 31, 116, 85, 131, 51, 32, 176, 198, 151, 42], 'val_indices': [175, 156, 7, 191, 76, 117, 54, 16, 2, 80, 41, 118, 78, 90, 100, 160, 149, 161, 171, 18, 82, 182, 101, 61, 91, 167, 144, 133, 196, 67, 22, 57, 137, 136, 98, 111, 89, 13, 178, 97], 'accuracy': 0.525, 'kappa': 0.050000000000000044, 'auc': 0.575}, {'fold_index': 2, 'train_indices': [3, 109, 165, 70, 15, 172, 19, 5, 38, 146, 77, 11, 147, 198, 92, 18, 174, 2, 176, 168, 118, 199, 63, 100, 158, 17, 134, 86, 105, 24, 34, 175, 61, 166, 125, 97, 39, 108, 78, 79, 80, 31, 46, 180, 60, 113, 127, 87, 186, 144, 124, 67, 13, 136, 74, 65, 115, 167, 123, 72, 191, 182, 82, 23, 110, 40, 119, 183, 148, 128, 143, 85, 142, 107, 189, 30, 130, 145, 103, 96, 164, 151, 98, 64, 101, 43, 81, 49, 75, 69, 89, 106, 66, 162, 154, 161, 122, 188, 121, 10, 20, 91, 52, 111, 137, 57, 93, 178, 102, 138, 55, 47, 133, 42, 12, 196, 99, 177, 44, 169, 37, 193, 157, 1, 190, 0, 26, 141, 155, 173, 28, 27, 16, 32, 7, 195, 131, 197, 14, 156, 185, 36, 95, 71, 51, 160, 194, 117, 56, 68, 126, 41, 59, 135, 129, 4, 53, 90, 94, 179], 'val_indices': [58, 152, 153, 54, 171, 88, 170, 45, 21, 84, 181, 73, 150, 22, 29, 184, 25, 120, 159, 114, 116, 187, 6, 149, 83, 33, 50, 139, 104, 9, 48, 132, 112, 35, 76, 163, 8, 140, 192, 62], 'accuracy': 0.725, 'kappa': 0.44999999999999996, 'auc': 0.8775}, {'fold_index': 3, 'train_indices': [66, 43, 45, 22, 69, 48, 44, 60, 123, 74, 179, 25, 150, 171, 132, 28, 165, 96, 73, 113, 127, 72, 135, 52, 38, 23, 122, 100, 177, 92, 137, 148, 12, 8, 91, 159, 172, 125, 187, 32, 29, 173, 40, 108, 4, 151, 37, 186, 34, 21, 1, 33, 190, 176, 35, 146, 143, 68, 160, 136, 107, 103, 53, 49, 141, 131, 15, 50, 54, 199, 126, 154, 7, 193, 0, 89, 55, 56, 10, 98, 134, 106, 161, 168, 138, 112, 63, 88, 83, 174, 121, 81, 65, 61, 109, 78, 26, 47, 104, 9, 153, 180, 31, 94, 71, 77, 18, 195, 167, 75, 164, 162, 86, 85, 157, 119, 3, 84, 149, 142, 82, 95, 175, 191, 139, 133, 117, 24, 76, 41, 62, 198, 6, 111, 183, 110, 30, 11, 99, 178, 93, 87, 13, 166, 189, 170, 185, 118, 130, 197, 120, 128, 158, 140, 16, 59, 145, 101, 17, 181], 'val_indices': [20, 14, 169, 144, 196, 105, 67, 182, 36, 39, 97, 57, 64, 58, 79, 90, 188, 194, 155, 129, 102, 192, 27, 5, 124, 116, 80, 184, 152, 163, 46, 156, 114, 147, 115, 70, 19, 2, 51, 42], 'accuracy': 0.55, 'kappa': 0.09999999999999998, 'auc': 0.6200000000000001}, {'fold_index': 4, 'train_indices': [52, 4, 194, 64, 46, 59, 38, 21, 193, 157, 28, 57, 17, 154, 184, 97, 139, 125, 102, 182, 30, 143, 180, 50, 126, 13, 161, 100, 15, 135, 45, 74, 153, 51, 115, 189, 181, 187, 37, 133, 118, 168, 16, 136, 66, 73, 19, 174, 22, 24, 71, 192, 63, 144, 122, 72, 54, 175, 147, 155, 85, 107, 149, 103, 69, 31, 27, 145, 7, 84, 77, 191, 88, 79, 114, 49, 90, 124, 5, 111, 36, 172, 131, 61, 32, 185, 173, 2, 166, 39, 148, 110, 34, 199, 65, 186, 23, 91, 159, 170, 93, 119, 195, 116, 129, 76, 53, 158, 101, 130, 178, 156, 6, 94, 138, 167, 96, 68, 132, 165, 92, 140, 12, 137, 44, 188, 160, 83, 47, 60, 98, 81, 105, 78, 58, 11, 25, 26, 82, 141, 171, 196, 62, 48, 1, 177, 70, 121, 8, 163, 109, 95, 104, 43, 117, 150, 14, 197, 127, 33], 'val_indices': [123, 35, 89, 183, 0, 80, 75, 134, 10, 87, 120, 40, 151, 67, 86, 99, 152, 42, 20, 176, 162, 169, 41, 190, 56, 9, 142, 146, 112, 108, 3, 128, 198, 106, 55, 29, 18, 164, 113, 179], 'accuracy': 0.525, 'kappa': 0.050000000000000044, 'auc': 0.585}], 'std_acc': 0.097, 'std_kappa': 0.195, 'std_auc': 0.133}\n",
      "sbj =  12\n",
      "Total trials loaded: 174\n",
      "Shape of X: (174, 64, 3584), Shape of y: (174,)\n",
      "Resampling from 512 to 128.0 Hz.\n",
      "X_train shape: (174, 64, 320, 1), y_train shape: (174,)\n",
      "Running fold 0 with 139 training samples and 35 validation samples\n",
      "Fold 0: train indices: [ 84  92 117 147  18], val indices: [ 12 113 136  86  45]\n",
      "Training data shape: (139, 64, 320, 1), Validation data shape: (35, 64, 320, 1)\n",
      "Fold 0 training loss: 0.15237823128700256\n",
      "y_true (val): [0 1 1 1 0]\n",
      "y_pred: [0 0 1 0 0]\n",
      "Appending results for fold 0: {'fold_index': 0, 'train_indices': [84, 92, 117, 147, 18, 57, 129, 146, 50, 159, 144, 81, 72, 23, 28, 108, 8, 0, 34, 105, 59, 143, 15, 44, 17, 75, 95, 112, 14, 101, 5, 62, 162, 13, 156, 19, 68, 37, 46, 32, 63, 131, 99, 152, 150, 41, 106, 130, 71, 155, 16, 20, 171, 7, 133, 114, 161, 142, 163, 137, 56, 26, 35, 30, 93, 55, 169, 58, 27, 94, 168, 116, 102, 4, 60, 47, 153, 67, 2, 61, 36, 52, 91, 123, 10, 164, 154, 33, 127, 100, 132, 24, 134, 138, 48, 79, 170, 103, 125, 22, 151, 88, 21, 96, 82, 141, 104, 107, 1, 98, 11, 165, 77, 70, 89, 87, 42, 122, 43, 173, 160, 145, 38, 3, 111, 158, 85, 149, 29, 166, 110, 53, 135, 65, 126, 80, 78, 157, 9], 'val_indices': [12, 113, 136, 86, 45, 69, 6, 115, 128, 148, 120, 90, 31, 73, 25, 121, 97, 119, 124, 139, 118, 64, 76, 172, 54, 51, 167, 66, 39, 49, 140, 40, 109, 83, 74], 'accuracy': 0.8, 'kappa': 0.6029173419773096, 'auc': 0.8137254901960784}\n",
      "New Max Found!\n",
      "Running fold 1 with 139 training samples and 35 validation samples\n",
      "Fold 1: train indices: [158 153  15 125 112], val indices: [ 75  97 102  66  41]\n",
      "Training data shape: (139, 64, 320, 1), Validation data shape: (35, 64, 320, 1)\n",
      "Fold 1 training loss: 0.05230402201414108\n",
      "y_true (val): [0 1 1 0 0]\n",
      "y_pred: [0 0 1 0 0]\n",
      "Appending results for fold 1: {'fold_index': 1, 'train_indices': [158, 153, 15, 125, 112, 4, 121, 6, 82, 18, 172, 162, 159, 90, 72, 129, 51, 127, 151, 92, 122, 126, 62, 14, 152, 30, 136, 103, 39, 11, 109, 108, 17, 110, 67, 93, 59, 146, 23, 89, 106, 53, 71, 37, 68, 76, 73, 64, 116, 147, 10, 156, 31, 46, 12, 173, 165, 130, 160, 169, 139, 28, 84, 48, 78, 45, 63, 56, 120, 164, 19, 16, 40, 36, 52, 144, 60, 94, 86, 104, 49, 1, 143, 150, 96, 47, 83, 55, 132, 35, 135, 149, 170, 32, 74, 79, 171, 91, 7, 99, 21, 0, 61, 57, 167, 115, 142, 70, 87, 148, 123, 27, 33, 88, 168, 95, 140, 20, 3, 80, 24, 117, 119, 131, 25, 166, 141, 58, 101, 9, 145, 38, 34, 154, 105, 22, 44, 124, 8], 'val_indices': [75, 97, 102, 66, 41, 163, 77, 118, 138, 98, 111, 13, 54, 113, 69, 5, 107, 133, 128, 85, 155, 161, 137, 50, 43, 134, 114, 26, 100, 42, 29, 65, 157, 2, 81], 'accuracy': 0.7142857142857143, 'kappa': 0.4299674267100978, 'auc': 0.8071895424836601}\n",
      "Running fold 2 with 139 training samples and 35 validation samples\n",
      "Fold 2: train indices: [ 12 129 125  22  94], val indices: [126  89  28   7  27]\n",
      "Training data shape: (139, 64, 320, 1), Validation data shape: (35, 64, 320, 1)\n",
      "Fold 2 training loss: 0.045238737016916275\n",
      "y_true (val): [1 1 0 0 0]\n",
      "y_pred: [1 1 0 0 0]\n",
      "Appending results for fold 2: {'fold_index': 2, 'train_indices': [12, 129, 125, 22, 94, 107, 6, 140, 52, 141, 59, 0, 34, 41, 88, 106, 110, 162, 92, 120, 99, 102, 114, 57, 144, 49, 66, 53, 38, 23, 67, 64, 79, 70, 10, 105, 29, 111, 132, 9, 43, 75, 47, 42, 85, 21, 122, 68, 104, 167, 109, 159, 14, 76, 163, 116, 157, 121, 16, 134, 61, 97, 127, 37, 48, 146, 117, 168, 130, 95, 25, 73, 20, 84, 153, 17, 171, 82, 137, 170, 158, 90, 58, 103, 26, 56, 149, 4, 148, 124, 152, 93, 165, 50, 123, 80, 15, 166, 62, 161, 69, 11, 45, 83, 169, 86, 74, 54, 142, 96, 87, 71, 5, 44, 147, 13, 8, 113, 139, 1, 3, 72, 173, 19, 150, 143, 164, 100, 151, 60, 118, 33, 77, 119, 135, 32, 128, 78, 30], 'val_indices': [126, 89, 28, 7, 27, 98, 91, 136, 108, 138, 131, 40, 63, 101, 155, 31, 65, 145, 81, 172, 133, 46, 156, 112, 55, 18, 35, 2, 115, 154, 24, 36, 39, 51, 160], 'accuracy': 0.8857142857142857, 'kappa': 0.7704918032786885, 'auc': 0.9509803921568627}\n",
      "New Max Found!\n",
      "Running fold 3 with 139 training samples and 35 validation samples\n",
      "Fold 3: train indices: [152 110  93  36  75], val indices: [ 92 154  10 167  29]\n",
      "Training data shape: (139, 64, 320, 1), Validation data shape: (35, 64, 320, 1)\n",
      "Fold 3 training loss: 0.02822699397802353\n",
      "y_true (val): [1 1 0 1 0]\n",
      "y_pred: [1 0 0 1 0]\n",
      "Appending results for fold 3: {'fold_index': 3, 'train_indices': [152, 110, 93, 36, 75, 125, 142, 172, 4, 45, 1, 67, 150, 19, 22, 9, 37, 57, 48, 137, 12, 52, 18, 133, 64, 159, 94, 25, 90, 131, 50, 44, 160, 42, 59, 87, 101, 27, 55, 135, 68, 47, 164, 115, 145, 173, 21, 112, 144, 91, 163, 17, 127, 83, 84, 100, 70, 169, 114, 161, 106, 103, 148, 139, 74, 54, 72, 61, 66, 121, 16, 166, 60, 56, 146, 32, 104, 3, 7, 140, 149, 88, 41, 126, 2, 40, 82, 147, 95, 97, 89, 39, 119, 165, 111, 58, 107, 162, 65, 43, 26, 53, 158, 128, 63, 120, 105, 157, 108, 31, 78, 85, 62, 113, 73, 129, 69, 46, 134, 24, 99, 0, 109, 143, 141, 71, 171, 136, 80, 98, 51, 5, 30, 13, 86, 23, 8, 130, 132], 'val_indices': [92, 154, 10, 167, 29, 6, 49, 76, 38, 20, 14, 79, 77, 117, 123, 155, 33, 138, 116, 96, 102, 153, 34, 118, 122, 15, 168, 81, 156, 11, 35, 170, 151, 124, 28], 'accuracy': 0.8571428571428571, 'kappa': 0.7145187601957586, 'auc': 0.9117647058823529}\n",
      "Running fold 4 with 139 training samples and 35 validation samples\n",
      "Fold 4: train indices: [146  45 166  76 132], val indices: [164  17 112 116 133]\n",
      "Training data shape: (139, 64, 320, 1), Validation data shape: (35, 64, 320, 1)\n",
      "Fold 4 training loss: 0.01736762747168541\n",
      "y_true (val): [1 0 1 1 1]\n",
      "y_pred: [1 0 0 1 1]\n",
      "Appending results for fold 4: {'fold_index': 4, 'train_indices': [146, 45, 166, 76, 132, 60, 5, 134, 144, 161, 67, 16, 25, 149, 156, 44, 21, 6, 79, 147, 170, 100, 141, 105, 43, 128, 131, 167, 85, 42, 68, 77, 119, 49, 64, 87, 127, 93, 96, 38, 110, 92, 150, 173, 14, 52, 117, 27, 65, 71, 171, 126, 107, 118, 15, 37, 114, 34, 39, 130, 135, 36, 151, 0, 48, 53, 95, 123, 63, 152, 18, 31, 3, 155, 10, 9, 121, 80, 125, 111, 138, 13, 98, 168, 72, 158, 73, 28, 163, 12, 153, 169, 145, 89, 157, 33, 2, 35, 108, 40, 165, 137, 1, 81, 46, 70, 102, 8, 91, 139, 32, 90, 29, 75, 7, 94, 136, 51, 26, 82, 88, 142, 54, 160, 69, 30, 23, 140, 50, 57, 129, 4, 99, 109, 120, 55, 47, 172, 104], 'val_indices': [164, 17, 112, 116, 133, 74, 101, 59, 24, 58, 115, 11, 78, 83, 61, 56, 154, 122, 84, 62, 20, 143, 19, 162, 148, 103, 22, 113, 86, 41, 106, 97, 159, 66, 124], 'accuracy': 0.7714285714285715, 'kappa': 0.540983606557377, 'auc': 0.7973856209150327}\n",
      "Final cross-validation results: {'params': [], 'mean_acc': 0.806, 'mean_kappa': 0.612, 'mean_auc': 0.856, 'mean_f1_left': array([0., 0., 0., 0., 0.]), 'mean_f1_right': array([0., 0., 0., 0., 0.]), 'mean_recall_left': array([0., 0., 0., 0., 0.]), 'mean_recall_right': array([0., 0., 0., 0., 0.]), 'mean_precision_left': array([0., 0., 0., 0., 0.]), 'mean_precision_right': array([0., 0., 0., 0., 0.]), 'all_folds': [{'fold_index': 0, 'train_indices': [84, 92, 117, 147, 18, 57, 129, 146, 50, 159, 144, 81, 72, 23, 28, 108, 8, 0, 34, 105, 59, 143, 15, 44, 17, 75, 95, 112, 14, 101, 5, 62, 162, 13, 156, 19, 68, 37, 46, 32, 63, 131, 99, 152, 150, 41, 106, 130, 71, 155, 16, 20, 171, 7, 133, 114, 161, 142, 163, 137, 56, 26, 35, 30, 93, 55, 169, 58, 27, 94, 168, 116, 102, 4, 60, 47, 153, 67, 2, 61, 36, 52, 91, 123, 10, 164, 154, 33, 127, 100, 132, 24, 134, 138, 48, 79, 170, 103, 125, 22, 151, 88, 21, 96, 82, 141, 104, 107, 1, 98, 11, 165, 77, 70, 89, 87, 42, 122, 43, 173, 160, 145, 38, 3, 111, 158, 85, 149, 29, 166, 110, 53, 135, 65, 126, 80, 78, 157, 9], 'val_indices': [12, 113, 136, 86, 45, 69, 6, 115, 128, 148, 120, 90, 31, 73, 25, 121, 97, 119, 124, 139, 118, 64, 76, 172, 54, 51, 167, 66, 39, 49, 140, 40, 109, 83, 74], 'accuracy': 0.8, 'kappa': 0.6029173419773096, 'auc': 0.8137254901960784}, {'fold_index': 1, 'train_indices': [158, 153, 15, 125, 112, 4, 121, 6, 82, 18, 172, 162, 159, 90, 72, 129, 51, 127, 151, 92, 122, 126, 62, 14, 152, 30, 136, 103, 39, 11, 109, 108, 17, 110, 67, 93, 59, 146, 23, 89, 106, 53, 71, 37, 68, 76, 73, 64, 116, 147, 10, 156, 31, 46, 12, 173, 165, 130, 160, 169, 139, 28, 84, 48, 78, 45, 63, 56, 120, 164, 19, 16, 40, 36, 52, 144, 60, 94, 86, 104, 49, 1, 143, 150, 96, 47, 83, 55, 132, 35, 135, 149, 170, 32, 74, 79, 171, 91, 7, 99, 21, 0, 61, 57, 167, 115, 142, 70, 87, 148, 123, 27, 33, 88, 168, 95, 140, 20, 3, 80, 24, 117, 119, 131, 25, 166, 141, 58, 101, 9, 145, 38, 34, 154, 105, 22, 44, 124, 8], 'val_indices': [75, 97, 102, 66, 41, 163, 77, 118, 138, 98, 111, 13, 54, 113, 69, 5, 107, 133, 128, 85, 155, 161, 137, 50, 43, 134, 114, 26, 100, 42, 29, 65, 157, 2, 81], 'accuracy': 0.7142857142857143, 'kappa': 0.4299674267100978, 'auc': 0.8071895424836601}, {'fold_index': 2, 'train_indices': [12, 129, 125, 22, 94, 107, 6, 140, 52, 141, 59, 0, 34, 41, 88, 106, 110, 162, 92, 120, 99, 102, 114, 57, 144, 49, 66, 53, 38, 23, 67, 64, 79, 70, 10, 105, 29, 111, 132, 9, 43, 75, 47, 42, 85, 21, 122, 68, 104, 167, 109, 159, 14, 76, 163, 116, 157, 121, 16, 134, 61, 97, 127, 37, 48, 146, 117, 168, 130, 95, 25, 73, 20, 84, 153, 17, 171, 82, 137, 170, 158, 90, 58, 103, 26, 56, 149, 4, 148, 124, 152, 93, 165, 50, 123, 80, 15, 166, 62, 161, 69, 11, 45, 83, 169, 86, 74, 54, 142, 96, 87, 71, 5, 44, 147, 13, 8, 113, 139, 1, 3, 72, 173, 19, 150, 143, 164, 100, 151, 60, 118, 33, 77, 119, 135, 32, 128, 78, 30], 'val_indices': [126, 89, 28, 7, 27, 98, 91, 136, 108, 138, 131, 40, 63, 101, 155, 31, 65, 145, 81, 172, 133, 46, 156, 112, 55, 18, 35, 2, 115, 154, 24, 36, 39, 51, 160], 'accuracy': 0.8857142857142857, 'kappa': 0.7704918032786885, 'auc': 0.9509803921568627}, {'fold_index': 3, 'train_indices': [152, 110, 93, 36, 75, 125, 142, 172, 4, 45, 1, 67, 150, 19, 22, 9, 37, 57, 48, 137, 12, 52, 18, 133, 64, 159, 94, 25, 90, 131, 50, 44, 160, 42, 59, 87, 101, 27, 55, 135, 68, 47, 164, 115, 145, 173, 21, 112, 144, 91, 163, 17, 127, 83, 84, 100, 70, 169, 114, 161, 106, 103, 148, 139, 74, 54, 72, 61, 66, 121, 16, 166, 60, 56, 146, 32, 104, 3, 7, 140, 149, 88, 41, 126, 2, 40, 82, 147, 95, 97, 89, 39, 119, 165, 111, 58, 107, 162, 65, 43, 26, 53, 158, 128, 63, 120, 105, 157, 108, 31, 78, 85, 62, 113, 73, 129, 69, 46, 134, 24, 99, 0, 109, 143, 141, 71, 171, 136, 80, 98, 51, 5, 30, 13, 86, 23, 8, 130, 132], 'val_indices': [92, 154, 10, 167, 29, 6, 49, 76, 38, 20, 14, 79, 77, 117, 123, 155, 33, 138, 116, 96, 102, 153, 34, 118, 122, 15, 168, 81, 156, 11, 35, 170, 151, 124, 28], 'accuracy': 0.8571428571428571, 'kappa': 0.7145187601957586, 'auc': 0.9117647058823529}, {'fold_index': 4, 'train_indices': [146, 45, 166, 76, 132, 60, 5, 134, 144, 161, 67, 16, 25, 149, 156, 44, 21, 6, 79, 147, 170, 100, 141, 105, 43, 128, 131, 167, 85, 42, 68, 77, 119, 49, 64, 87, 127, 93, 96, 38, 110, 92, 150, 173, 14, 52, 117, 27, 65, 71, 171, 126, 107, 118, 15, 37, 114, 34, 39, 130, 135, 36, 151, 0, 48, 53, 95, 123, 63, 152, 18, 31, 3, 155, 10, 9, 121, 80, 125, 111, 138, 13, 98, 168, 72, 158, 73, 28, 163, 12, 153, 169, 145, 89, 157, 33, 2, 35, 108, 40, 165, 137, 1, 81, 46, 70, 102, 8, 91, 139, 32, 90, 29, 75, 7, 94, 136, 51, 26, 82, 88, 142, 54, 160, 69, 30, 23, 140, 50, 57, 129, 4, 99, 109, 120, 55, 47, 172, 104], 'val_indices': [164, 17, 112, 116, 133, 74, 101, 59, 24, 58, 115, 11, 78, 83, 61, 56, 154, 122, 84, 62, 20, 143, 19, 162, 148, 103, 22, 113, 86, 41, 106, 97, 159, 66, 124], 'accuracy': 0.7714285714285715, 'kappa': 0.540983606557377, 'auc': 0.7973856209150327}], 'std_acc': 0.061, 'std_kappa': 0.122, 'std_auc': 0.063}\n",
      "sbj =  13\n",
      "Total trials loaded: 200\n",
      "Shape of X: (200, 64, 3584), Shape of y: (200,)\n",
      "Resampling from 512 to 128.0 Hz.\n",
      "X_train shape: (200, 64, 320, 1), y_train shape: (200,)\n",
      "Running fold 0 with 160 training samples and 40 validation samples\n",
      "Fold 0: train indices: [  4 142 183  71  50], val indices: [ 25 107  31 188  83]\n",
      "Training data shape: (160, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 0 training loss: 0.08929146826267242\n",
      "y_true (val): [0 1 0 1 0]\n",
      "y_pred: [0 0 0 1 0]\n",
      "Appending results for fold 0: {'fold_index': 0, 'train_indices': [4, 142, 183, 71, 50, 179, 125, 131, 117, 60, 82, 55, 89, 21, 157, 47, 5, 42, 11, 19, 23, 172, 148, 99, 140, 34, 146, 115, 48, 147, 93, 2, 182, 138, 43, 57, 158, 187, 128, 18, 160, 33, 97, 14, 44, 177, 196, 61, 56, 174, 46, 67, 8, 101, 7, 41, 129, 184, 198, 98, 190, 74, 169, 24, 159, 173, 15, 70, 163, 58, 186, 72, 27, 87, 81, 26, 122, 96, 120, 65, 119, 102, 123, 167, 94, 130, 135, 77, 192, 175, 20, 37, 16, 0, 180, 144, 52, 145, 106, 139, 63, 9, 36, 153, 126, 17, 59, 29, 164, 30, 85, 156, 53, 79, 38, 118, 124, 193, 171, 35, 13, 151, 110, 95, 149, 136, 165, 168, 109, 88, 84, 92, 3, 121, 114, 143, 1, 10, 195, 28, 197, 103, 137, 152, 113, 112, 32, 189, 62, 199, 78, 68, 176, 161, 22, 155, 108, 80, 181, 166], 'val_indices': [25, 107, 31, 188, 83, 86, 111, 75, 191, 170, 76, 12, 100, 154, 73, 6, 66, 54, 104, 162, 91, 51, 132, 39, 105, 40, 134, 141, 45, 116, 185, 178, 127, 150, 194, 69, 133, 90, 64, 49], 'accuracy': 0.925, 'kappa': 0.85, 'auc': 0.9750000000000001}\n",
      "New Max Found!\n",
      "Running fold 1 with 160 training samples and 40 validation samples\n",
      "Fold 1: train indices: [162  56 128 110  84], val indices: [175 156   7 191  76]\n",
      "Training data shape: (160, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 1 training loss: 0.13414613902568817\n",
      "y_true (val): [1 1 0 1 0]\n",
      "y_pred: [1 1 0 1 0]\n",
      "Appending results for fold 1: {'fold_index': 1, 'train_indices': [162, 56, 128, 110, 84, 70, 139, 147, 115, 155, 50, 165, 142, 109, 159, 194, 60, 15, 140, 195, 55, 86, 87, 130, 38, 79, 177, 92, 145, 47, 39, 135, 94, 197, 164, 104, 108, 88, 14, 21, 154, 17, 49, 11, 187, 114, 181, 158, 19, 77, 185, 123, 34, 25, 4, 12, 65, 30, 40, 129, 81, 189, 102, 141, 170, 68, 24, 71, 132, 107, 36, 27, 96, 66, 138, 63, 193, 113, 124, 99, 10, 150, 103, 5, 143, 146, 153, 122, 148, 9, 183, 105, 53, 166, 75, 52, 169, 43, 188, 59, 35, 186, 199, 93, 106, 3, 184, 33, 125, 74, 37, 1, 48, 180, 126, 121, 72, 62, 0, 173, 83, 119, 152, 23, 95, 73, 179, 44, 58, 120, 127, 157, 20, 163, 69, 190, 26, 112, 6, 134, 29, 64, 192, 172, 174, 28, 45, 168, 8, 46, 31, 116, 85, 131, 51, 32, 176, 198, 151, 42], 'val_indices': [175, 156, 7, 191, 76, 117, 54, 16, 2, 80, 41, 118, 78, 90, 100, 160, 149, 161, 171, 18, 82, 182, 101, 61, 91, 167, 144, 133, 196, 67, 22, 57, 137, 136, 98, 111, 89, 13, 178, 97], 'accuracy': 0.875, 'kappa': 0.75, 'auc': 0.9550000000000001}\n",
      "Running fold 2 with 160 training samples and 40 validation samples\n",
      "Fold 2: train indices: [  3 109 165  70  15], val indices: [ 58 152 153  54 171]\n",
      "Training data shape: (160, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 2 training loss: 0.06347734481096268\n",
      "y_true (val): [0 1 1 0 1]\n",
      "y_pred: [0 1 1 0 1]\n",
      "Appending results for fold 2: {'fold_index': 2, 'train_indices': [3, 109, 165, 70, 15, 172, 19, 5, 38, 146, 77, 11, 147, 198, 92, 18, 174, 2, 176, 168, 118, 199, 63, 100, 158, 17, 134, 86, 105, 24, 34, 175, 61, 166, 125, 97, 39, 108, 78, 79, 80, 31, 46, 180, 60, 113, 127, 87, 186, 144, 124, 67, 13, 136, 74, 65, 115, 167, 123, 72, 191, 182, 82, 23, 110, 40, 119, 183, 148, 128, 143, 85, 142, 107, 189, 30, 130, 145, 103, 96, 164, 151, 98, 64, 101, 43, 81, 49, 75, 69, 89, 106, 66, 162, 154, 161, 122, 188, 121, 10, 20, 91, 52, 111, 137, 57, 93, 178, 102, 138, 55, 47, 133, 42, 12, 196, 99, 177, 44, 169, 37, 193, 157, 1, 190, 0, 26, 141, 155, 173, 28, 27, 16, 32, 7, 195, 131, 197, 14, 156, 185, 36, 95, 71, 51, 160, 194, 117, 56, 68, 126, 41, 59, 135, 129, 4, 53, 90, 94, 179], 'val_indices': [58, 152, 153, 54, 171, 88, 170, 45, 21, 84, 181, 73, 150, 22, 29, 184, 25, 120, 159, 114, 116, 187, 6, 149, 83, 33, 50, 139, 104, 9, 48, 132, 112, 35, 76, 163, 8, 140, 192, 62], 'accuracy': 0.85, 'kappa': 0.7, 'auc': 0.9375}\n",
      "Running fold 3 with 160 training samples and 40 validation samples\n",
      "Fold 3: train indices: [66 43 45 22 69], val indices: [ 20  14 169 144 196]\n",
      "Training data shape: (160, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 3 training loss: 0.047047290951013565\n",
      "y_true (val): [0 0 1 1 1]\n",
      "y_pred: [0 0 1 1 1]\n",
      "Appending results for fold 3: {'fold_index': 3, 'train_indices': [66, 43, 45, 22, 69, 48, 44, 60, 123, 74, 179, 25, 150, 171, 132, 28, 165, 96, 73, 113, 127, 72, 135, 52, 38, 23, 122, 100, 177, 92, 137, 148, 12, 8, 91, 159, 172, 125, 187, 32, 29, 173, 40, 108, 4, 151, 37, 186, 34, 21, 1, 33, 190, 176, 35, 146, 143, 68, 160, 136, 107, 103, 53, 49, 141, 131, 15, 50, 54, 199, 126, 154, 7, 193, 0, 89, 55, 56, 10, 98, 134, 106, 161, 168, 138, 112, 63, 88, 83, 174, 121, 81, 65, 61, 109, 78, 26, 47, 104, 9, 153, 180, 31, 94, 71, 77, 18, 195, 167, 75, 164, 162, 86, 85, 157, 119, 3, 84, 149, 142, 82, 95, 175, 191, 139, 133, 117, 24, 76, 41, 62, 198, 6, 111, 183, 110, 30, 11, 99, 178, 93, 87, 13, 166, 189, 170, 185, 118, 130, 197, 120, 128, 158, 140, 16, 59, 145, 101, 17, 181], 'val_indices': [20, 14, 169, 144, 196, 105, 67, 182, 36, 39, 97, 57, 64, 58, 79, 90, 188, 194, 155, 129, 102, 192, 27, 5, 124, 116, 80, 184, 152, 163, 46, 156, 114, 147, 115, 70, 19, 2, 51, 42], 'accuracy': 0.925, 'kappa': 0.85, 'auc': 0.99}\n",
      "Running fold 4 with 160 training samples and 40 validation samples\n",
      "Fold 4: train indices: [ 52   4 194  64  46], val indices: [123  35  89 183   0]\n",
      "Training data shape: (160, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 4 training loss: 0.06803253293037415\n",
      "y_true (val): [1 0 0 1 0]\n",
      "y_pred: [1 0 0 1 0]\n",
      "Appending results for fold 4: {'fold_index': 4, 'train_indices': [52, 4, 194, 64, 46, 59, 38, 21, 193, 157, 28, 57, 17, 154, 184, 97, 139, 125, 102, 182, 30, 143, 180, 50, 126, 13, 161, 100, 15, 135, 45, 74, 153, 51, 115, 189, 181, 187, 37, 133, 118, 168, 16, 136, 66, 73, 19, 174, 22, 24, 71, 192, 63, 144, 122, 72, 54, 175, 147, 155, 85, 107, 149, 103, 69, 31, 27, 145, 7, 84, 77, 191, 88, 79, 114, 49, 90, 124, 5, 111, 36, 172, 131, 61, 32, 185, 173, 2, 166, 39, 148, 110, 34, 199, 65, 186, 23, 91, 159, 170, 93, 119, 195, 116, 129, 76, 53, 158, 101, 130, 178, 156, 6, 94, 138, 167, 96, 68, 132, 165, 92, 140, 12, 137, 44, 188, 160, 83, 47, 60, 98, 81, 105, 78, 58, 11, 25, 26, 82, 141, 171, 196, 62, 48, 1, 177, 70, 121, 8, 163, 109, 95, 104, 43, 117, 150, 14, 197, 127, 33], 'val_indices': [123, 35, 89, 183, 0, 80, 75, 134, 10, 87, 120, 40, 151, 67, 86, 99, 152, 42, 20, 176, 162, 169, 41, 190, 56, 9, 142, 146, 112, 108, 3, 128, 198, 106, 55, 29, 18, 164, 113, 179], 'accuracy': 1.0, 'kappa': 1.0, 'auc': 1.0}\n",
      "New Max Found!\n",
      "Final cross-validation results: {'params': [], 'mean_acc': 0.915, 'mean_kappa': 0.83, 'mean_auc': 0.972, 'mean_f1_left': array([0., 0., 0., 0., 0.]), 'mean_f1_right': array([0., 0., 0., 0., 0.]), 'mean_recall_left': array([0., 0., 0., 0., 0.]), 'mean_recall_right': array([0., 0., 0., 0., 0.]), 'mean_precision_left': array([0., 0., 0., 0., 0.]), 'mean_precision_right': array([0., 0., 0., 0., 0.]), 'all_folds': [{'fold_index': 0, 'train_indices': [4, 142, 183, 71, 50, 179, 125, 131, 117, 60, 82, 55, 89, 21, 157, 47, 5, 42, 11, 19, 23, 172, 148, 99, 140, 34, 146, 115, 48, 147, 93, 2, 182, 138, 43, 57, 158, 187, 128, 18, 160, 33, 97, 14, 44, 177, 196, 61, 56, 174, 46, 67, 8, 101, 7, 41, 129, 184, 198, 98, 190, 74, 169, 24, 159, 173, 15, 70, 163, 58, 186, 72, 27, 87, 81, 26, 122, 96, 120, 65, 119, 102, 123, 167, 94, 130, 135, 77, 192, 175, 20, 37, 16, 0, 180, 144, 52, 145, 106, 139, 63, 9, 36, 153, 126, 17, 59, 29, 164, 30, 85, 156, 53, 79, 38, 118, 124, 193, 171, 35, 13, 151, 110, 95, 149, 136, 165, 168, 109, 88, 84, 92, 3, 121, 114, 143, 1, 10, 195, 28, 197, 103, 137, 152, 113, 112, 32, 189, 62, 199, 78, 68, 176, 161, 22, 155, 108, 80, 181, 166], 'val_indices': [25, 107, 31, 188, 83, 86, 111, 75, 191, 170, 76, 12, 100, 154, 73, 6, 66, 54, 104, 162, 91, 51, 132, 39, 105, 40, 134, 141, 45, 116, 185, 178, 127, 150, 194, 69, 133, 90, 64, 49], 'accuracy': 0.925, 'kappa': 0.85, 'auc': 0.9750000000000001}, {'fold_index': 1, 'train_indices': [162, 56, 128, 110, 84, 70, 139, 147, 115, 155, 50, 165, 142, 109, 159, 194, 60, 15, 140, 195, 55, 86, 87, 130, 38, 79, 177, 92, 145, 47, 39, 135, 94, 197, 164, 104, 108, 88, 14, 21, 154, 17, 49, 11, 187, 114, 181, 158, 19, 77, 185, 123, 34, 25, 4, 12, 65, 30, 40, 129, 81, 189, 102, 141, 170, 68, 24, 71, 132, 107, 36, 27, 96, 66, 138, 63, 193, 113, 124, 99, 10, 150, 103, 5, 143, 146, 153, 122, 148, 9, 183, 105, 53, 166, 75, 52, 169, 43, 188, 59, 35, 186, 199, 93, 106, 3, 184, 33, 125, 74, 37, 1, 48, 180, 126, 121, 72, 62, 0, 173, 83, 119, 152, 23, 95, 73, 179, 44, 58, 120, 127, 157, 20, 163, 69, 190, 26, 112, 6, 134, 29, 64, 192, 172, 174, 28, 45, 168, 8, 46, 31, 116, 85, 131, 51, 32, 176, 198, 151, 42], 'val_indices': [175, 156, 7, 191, 76, 117, 54, 16, 2, 80, 41, 118, 78, 90, 100, 160, 149, 161, 171, 18, 82, 182, 101, 61, 91, 167, 144, 133, 196, 67, 22, 57, 137, 136, 98, 111, 89, 13, 178, 97], 'accuracy': 0.875, 'kappa': 0.75, 'auc': 0.9550000000000001}, {'fold_index': 2, 'train_indices': [3, 109, 165, 70, 15, 172, 19, 5, 38, 146, 77, 11, 147, 198, 92, 18, 174, 2, 176, 168, 118, 199, 63, 100, 158, 17, 134, 86, 105, 24, 34, 175, 61, 166, 125, 97, 39, 108, 78, 79, 80, 31, 46, 180, 60, 113, 127, 87, 186, 144, 124, 67, 13, 136, 74, 65, 115, 167, 123, 72, 191, 182, 82, 23, 110, 40, 119, 183, 148, 128, 143, 85, 142, 107, 189, 30, 130, 145, 103, 96, 164, 151, 98, 64, 101, 43, 81, 49, 75, 69, 89, 106, 66, 162, 154, 161, 122, 188, 121, 10, 20, 91, 52, 111, 137, 57, 93, 178, 102, 138, 55, 47, 133, 42, 12, 196, 99, 177, 44, 169, 37, 193, 157, 1, 190, 0, 26, 141, 155, 173, 28, 27, 16, 32, 7, 195, 131, 197, 14, 156, 185, 36, 95, 71, 51, 160, 194, 117, 56, 68, 126, 41, 59, 135, 129, 4, 53, 90, 94, 179], 'val_indices': [58, 152, 153, 54, 171, 88, 170, 45, 21, 84, 181, 73, 150, 22, 29, 184, 25, 120, 159, 114, 116, 187, 6, 149, 83, 33, 50, 139, 104, 9, 48, 132, 112, 35, 76, 163, 8, 140, 192, 62], 'accuracy': 0.85, 'kappa': 0.7, 'auc': 0.9375}, {'fold_index': 3, 'train_indices': [66, 43, 45, 22, 69, 48, 44, 60, 123, 74, 179, 25, 150, 171, 132, 28, 165, 96, 73, 113, 127, 72, 135, 52, 38, 23, 122, 100, 177, 92, 137, 148, 12, 8, 91, 159, 172, 125, 187, 32, 29, 173, 40, 108, 4, 151, 37, 186, 34, 21, 1, 33, 190, 176, 35, 146, 143, 68, 160, 136, 107, 103, 53, 49, 141, 131, 15, 50, 54, 199, 126, 154, 7, 193, 0, 89, 55, 56, 10, 98, 134, 106, 161, 168, 138, 112, 63, 88, 83, 174, 121, 81, 65, 61, 109, 78, 26, 47, 104, 9, 153, 180, 31, 94, 71, 77, 18, 195, 167, 75, 164, 162, 86, 85, 157, 119, 3, 84, 149, 142, 82, 95, 175, 191, 139, 133, 117, 24, 76, 41, 62, 198, 6, 111, 183, 110, 30, 11, 99, 178, 93, 87, 13, 166, 189, 170, 185, 118, 130, 197, 120, 128, 158, 140, 16, 59, 145, 101, 17, 181], 'val_indices': [20, 14, 169, 144, 196, 105, 67, 182, 36, 39, 97, 57, 64, 58, 79, 90, 188, 194, 155, 129, 102, 192, 27, 5, 124, 116, 80, 184, 152, 163, 46, 156, 114, 147, 115, 70, 19, 2, 51, 42], 'accuracy': 0.925, 'kappa': 0.85, 'auc': 0.99}, {'fold_index': 4, 'train_indices': [52, 4, 194, 64, 46, 59, 38, 21, 193, 157, 28, 57, 17, 154, 184, 97, 139, 125, 102, 182, 30, 143, 180, 50, 126, 13, 161, 100, 15, 135, 45, 74, 153, 51, 115, 189, 181, 187, 37, 133, 118, 168, 16, 136, 66, 73, 19, 174, 22, 24, 71, 192, 63, 144, 122, 72, 54, 175, 147, 155, 85, 107, 149, 103, 69, 31, 27, 145, 7, 84, 77, 191, 88, 79, 114, 49, 90, 124, 5, 111, 36, 172, 131, 61, 32, 185, 173, 2, 166, 39, 148, 110, 34, 199, 65, 186, 23, 91, 159, 170, 93, 119, 195, 116, 129, 76, 53, 158, 101, 130, 178, 156, 6, 94, 138, 167, 96, 68, 132, 165, 92, 140, 12, 137, 44, 188, 160, 83, 47, 60, 98, 81, 105, 78, 58, 11, 25, 26, 82, 141, 171, 196, 62, 48, 1, 177, 70, 121, 8, 163, 109, 95, 104, 43, 117, 150, 14, 197, 127, 33], 'val_indices': [123, 35, 89, 183, 0, 80, 75, 134, 10, 87, 120, 40, 151, 67, 86, 99, 152, 42, 20, 176, 162, 169, 41, 190, 56, 9, 142, 146, 112, 108, 3, 128, 198, 106, 55, 29, 18, 164, 113, 179], 'accuracy': 1.0, 'kappa': 1.0, 'auc': 1.0}], 'std_acc': 0.051, 'std_kappa': 0.103, 'std_auc': 0.023}\n",
      "sbj =  14\n",
      "Total trials loaded: 200\n",
      "Shape of X: (200, 64, 3584), Shape of y: (200,)\n",
      "Resampling from 512 to 128.0 Hz.\n",
      "X_train shape: (200, 64, 320, 1), y_train shape: (200,)\n",
      "Running fold 0 with 160 training samples and 40 validation samples\n",
      "Fold 0: train indices: [  4 142 183  71  50], val indices: [ 25 107  31 188  83]\n",
      "Training data shape: (160, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 0 training loss: 0.014665630646049976\n",
      "y_true (val): [0 1 0 1 0]\n",
      "y_pred: [0 1 0 1 0]\n",
      "Appending results for fold 0: {'fold_index': 0, 'train_indices': [4, 142, 183, 71, 50, 179, 125, 131, 117, 60, 82, 55, 89, 21, 157, 47, 5, 42, 11, 19, 23, 172, 148, 99, 140, 34, 146, 115, 48, 147, 93, 2, 182, 138, 43, 57, 158, 187, 128, 18, 160, 33, 97, 14, 44, 177, 196, 61, 56, 174, 46, 67, 8, 101, 7, 41, 129, 184, 198, 98, 190, 74, 169, 24, 159, 173, 15, 70, 163, 58, 186, 72, 27, 87, 81, 26, 122, 96, 120, 65, 119, 102, 123, 167, 94, 130, 135, 77, 192, 175, 20, 37, 16, 0, 180, 144, 52, 145, 106, 139, 63, 9, 36, 153, 126, 17, 59, 29, 164, 30, 85, 156, 53, 79, 38, 118, 124, 193, 171, 35, 13, 151, 110, 95, 149, 136, 165, 168, 109, 88, 84, 92, 3, 121, 114, 143, 1, 10, 195, 28, 197, 103, 137, 152, 113, 112, 32, 189, 62, 199, 78, 68, 176, 161, 22, 155, 108, 80, 181, 166], 'val_indices': [25, 107, 31, 188, 83, 86, 111, 75, 191, 170, 76, 12, 100, 154, 73, 6, 66, 54, 104, 162, 91, 51, 132, 39, 105, 40, 134, 141, 45, 116, 185, 178, 127, 150, 194, 69, 133, 90, 64, 49], 'accuracy': 1.0, 'kappa': 1.0, 'auc': 1.0}\n",
      "New Max Found!\n",
      "Running fold 1 with 160 training samples and 40 validation samples\n",
      "Fold 1: train indices: [162  56 128 110  84], val indices: [175 156   7 191  76]\n",
      "Training data shape: (160, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 1 training loss: 0.022859815508127213\n",
      "y_true (val): [1 1 0 1 0]\n",
      "y_pred: [1 1 0 1 0]\n",
      "Appending results for fold 1: {'fold_index': 1, 'train_indices': [162, 56, 128, 110, 84, 70, 139, 147, 115, 155, 50, 165, 142, 109, 159, 194, 60, 15, 140, 195, 55, 86, 87, 130, 38, 79, 177, 92, 145, 47, 39, 135, 94, 197, 164, 104, 108, 88, 14, 21, 154, 17, 49, 11, 187, 114, 181, 158, 19, 77, 185, 123, 34, 25, 4, 12, 65, 30, 40, 129, 81, 189, 102, 141, 170, 68, 24, 71, 132, 107, 36, 27, 96, 66, 138, 63, 193, 113, 124, 99, 10, 150, 103, 5, 143, 146, 153, 122, 148, 9, 183, 105, 53, 166, 75, 52, 169, 43, 188, 59, 35, 186, 199, 93, 106, 3, 184, 33, 125, 74, 37, 1, 48, 180, 126, 121, 72, 62, 0, 173, 83, 119, 152, 23, 95, 73, 179, 44, 58, 120, 127, 157, 20, 163, 69, 190, 26, 112, 6, 134, 29, 64, 192, 172, 174, 28, 45, 168, 8, 46, 31, 116, 85, 131, 51, 32, 176, 198, 151, 42], 'val_indices': [175, 156, 7, 191, 76, 117, 54, 16, 2, 80, 41, 118, 78, 90, 100, 160, 149, 161, 171, 18, 82, 182, 101, 61, 91, 167, 144, 133, 196, 67, 22, 57, 137, 136, 98, 111, 89, 13, 178, 97], 'accuracy': 0.95, 'kappa': 0.9, 'auc': 1.0}\n",
      "Running fold 2 with 160 training samples and 40 validation samples\n",
      "Fold 2: train indices: [  3 109 165  70  15], val indices: [ 58 152 153  54 171]\n",
      "Training data shape: (160, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 2 training loss: 0.024607766419649124\n",
      "y_true (val): [0 1 1 0 1]\n",
      "y_pred: [0 1 1 0 1]\n",
      "Appending results for fold 2: {'fold_index': 2, 'train_indices': [3, 109, 165, 70, 15, 172, 19, 5, 38, 146, 77, 11, 147, 198, 92, 18, 174, 2, 176, 168, 118, 199, 63, 100, 158, 17, 134, 86, 105, 24, 34, 175, 61, 166, 125, 97, 39, 108, 78, 79, 80, 31, 46, 180, 60, 113, 127, 87, 186, 144, 124, 67, 13, 136, 74, 65, 115, 167, 123, 72, 191, 182, 82, 23, 110, 40, 119, 183, 148, 128, 143, 85, 142, 107, 189, 30, 130, 145, 103, 96, 164, 151, 98, 64, 101, 43, 81, 49, 75, 69, 89, 106, 66, 162, 154, 161, 122, 188, 121, 10, 20, 91, 52, 111, 137, 57, 93, 178, 102, 138, 55, 47, 133, 42, 12, 196, 99, 177, 44, 169, 37, 193, 157, 1, 190, 0, 26, 141, 155, 173, 28, 27, 16, 32, 7, 195, 131, 197, 14, 156, 185, 36, 95, 71, 51, 160, 194, 117, 56, 68, 126, 41, 59, 135, 129, 4, 53, 90, 94, 179], 'val_indices': [58, 152, 153, 54, 171, 88, 170, 45, 21, 84, 181, 73, 150, 22, 29, 184, 25, 120, 159, 114, 116, 187, 6, 149, 83, 33, 50, 139, 104, 9, 48, 132, 112, 35, 76, 163, 8, 140, 192, 62], 'accuracy': 1.0, 'kappa': 1.0, 'auc': 1.0}\n",
      "Running fold 3 with 160 training samples and 40 validation samples\n",
      "Fold 3: train indices: [66 43 45 22 69], val indices: [ 20  14 169 144 196]\n",
      "Training data shape: (160, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 3 training loss: 0.014219309203326702\n",
      "y_true (val): [0 0 1 1 1]\n",
      "y_pred: [0 0 1 1 0]\n",
      "Appending results for fold 3: {'fold_index': 3, 'train_indices': [66, 43, 45, 22, 69, 48, 44, 60, 123, 74, 179, 25, 150, 171, 132, 28, 165, 96, 73, 113, 127, 72, 135, 52, 38, 23, 122, 100, 177, 92, 137, 148, 12, 8, 91, 159, 172, 125, 187, 32, 29, 173, 40, 108, 4, 151, 37, 186, 34, 21, 1, 33, 190, 176, 35, 146, 143, 68, 160, 136, 107, 103, 53, 49, 141, 131, 15, 50, 54, 199, 126, 154, 7, 193, 0, 89, 55, 56, 10, 98, 134, 106, 161, 168, 138, 112, 63, 88, 83, 174, 121, 81, 65, 61, 109, 78, 26, 47, 104, 9, 153, 180, 31, 94, 71, 77, 18, 195, 167, 75, 164, 162, 86, 85, 157, 119, 3, 84, 149, 142, 82, 95, 175, 191, 139, 133, 117, 24, 76, 41, 62, 198, 6, 111, 183, 110, 30, 11, 99, 178, 93, 87, 13, 166, 189, 170, 185, 118, 130, 197, 120, 128, 158, 140, 16, 59, 145, 101, 17, 181], 'val_indices': [20, 14, 169, 144, 196, 105, 67, 182, 36, 39, 97, 57, 64, 58, 79, 90, 188, 194, 155, 129, 102, 192, 27, 5, 124, 116, 80, 184, 152, 163, 46, 156, 114, 147, 115, 70, 19, 2, 51, 42], 'accuracy': 0.95, 'kappa': 0.9, 'auc': 0.9974999999999999}\n",
      "Running fold 4 with 160 training samples and 40 validation samples\n",
      "Fold 4: train indices: [ 52   4 194  64  46], val indices: [123  35  89 183   0]\n",
      "Training data shape: (160, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 4 training loss: 0.02859795093536377\n",
      "y_true (val): [1 0 0 1 0]\n",
      "y_pred: [1 0 0 1 0]\n",
      "Appending results for fold 4: {'fold_index': 4, 'train_indices': [52, 4, 194, 64, 46, 59, 38, 21, 193, 157, 28, 57, 17, 154, 184, 97, 139, 125, 102, 182, 30, 143, 180, 50, 126, 13, 161, 100, 15, 135, 45, 74, 153, 51, 115, 189, 181, 187, 37, 133, 118, 168, 16, 136, 66, 73, 19, 174, 22, 24, 71, 192, 63, 144, 122, 72, 54, 175, 147, 155, 85, 107, 149, 103, 69, 31, 27, 145, 7, 84, 77, 191, 88, 79, 114, 49, 90, 124, 5, 111, 36, 172, 131, 61, 32, 185, 173, 2, 166, 39, 148, 110, 34, 199, 65, 186, 23, 91, 159, 170, 93, 119, 195, 116, 129, 76, 53, 158, 101, 130, 178, 156, 6, 94, 138, 167, 96, 68, 132, 165, 92, 140, 12, 137, 44, 188, 160, 83, 47, 60, 98, 81, 105, 78, 58, 11, 25, 26, 82, 141, 171, 196, 62, 48, 1, 177, 70, 121, 8, 163, 109, 95, 104, 43, 117, 150, 14, 197, 127, 33], 'val_indices': [123, 35, 89, 183, 0, 80, 75, 134, 10, 87, 120, 40, 151, 67, 86, 99, 152, 42, 20, 176, 162, 169, 41, 190, 56, 9, 142, 146, 112, 108, 3, 128, 198, 106, 55, 29, 18, 164, 113, 179], 'accuracy': 0.975, 'kappa': 0.95, 'auc': 1.0}\n",
      "Final cross-validation results: {'params': [], 'mean_acc': 0.975, 'mean_kappa': 0.95, 'mean_auc': 1.0, 'mean_f1_left': array([0., 0., 0., 0., 0.]), 'mean_f1_right': array([0., 0., 0., 0., 0.]), 'mean_recall_left': array([0., 0., 0., 0., 0.]), 'mean_recall_right': array([0., 0., 0., 0., 0.]), 'mean_precision_left': array([0., 0., 0., 0., 0.]), 'mean_precision_right': array([0., 0., 0., 0., 0.]), 'all_folds': [{'fold_index': 0, 'train_indices': [4, 142, 183, 71, 50, 179, 125, 131, 117, 60, 82, 55, 89, 21, 157, 47, 5, 42, 11, 19, 23, 172, 148, 99, 140, 34, 146, 115, 48, 147, 93, 2, 182, 138, 43, 57, 158, 187, 128, 18, 160, 33, 97, 14, 44, 177, 196, 61, 56, 174, 46, 67, 8, 101, 7, 41, 129, 184, 198, 98, 190, 74, 169, 24, 159, 173, 15, 70, 163, 58, 186, 72, 27, 87, 81, 26, 122, 96, 120, 65, 119, 102, 123, 167, 94, 130, 135, 77, 192, 175, 20, 37, 16, 0, 180, 144, 52, 145, 106, 139, 63, 9, 36, 153, 126, 17, 59, 29, 164, 30, 85, 156, 53, 79, 38, 118, 124, 193, 171, 35, 13, 151, 110, 95, 149, 136, 165, 168, 109, 88, 84, 92, 3, 121, 114, 143, 1, 10, 195, 28, 197, 103, 137, 152, 113, 112, 32, 189, 62, 199, 78, 68, 176, 161, 22, 155, 108, 80, 181, 166], 'val_indices': [25, 107, 31, 188, 83, 86, 111, 75, 191, 170, 76, 12, 100, 154, 73, 6, 66, 54, 104, 162, 91, 51, 132, 39, 105, 40, 134, 141, 45, 116, 185, 178, 127, 150, 194, 69, 133, 90, 64, 49], 'accuracy': 1.0, 'kappa': 1.0, 'auc': 1.0}, {'fold_index': 1, 'train_indices': [162, 56, 128, 110, 84, 70, 139, 147, 115, 155, 50, 165, 142, 109, 159, 194, 60, 15, 140, 195, 55, 86, 87, 130, 38, 79, 177, 92, 145, 47, 39, 135, 94, 197, 164, 104, 108, 88, 14, 21, 154, 17, 49, 11, 187, 114, 181, 158, 19, 77, 185, 123, 34, 25, 4, 12, 65, 30, 40, 129, 81, 189, 102, 141, 170, 68, 24, 71, 132, 107, 36, 27, 96, 66, 138, 63, 193, 113, 124, 99, 10, 150, 103, 5, 143, 146, 153, 122, 148, 9, 183, 105, 53, 166, 75, 52, 169, 43, 188, 59, 35, 186, 199, 93, 106, 3, 184, 33, 125, 74, 37, 1, 48, 180, 126, 121, 72, 62, 0, 173, 83, 119, 152, 23, 95, 73, 179, 44, 58, 120, 127, 157, 20, 163, 69, 190, 26, 112, 6, 134, 29, 64, 192, 172, 174, 28, 45, 168, 8, 46, 31, 116, 85, 131, 51, 32, 176, 198, 151, 42], 'val_indices': [175, 156, 7, 191, 76, 117, 54, 16, 2, 80, 41, 118, 78, 90, 100, 160, 149, 161, 171, 18, 82, 182, 101, 61, 91, 167, 144, 133, 196, 67, 22, 57, 137, 136, 98, 111, 89, 13, 178, 97], 'accuracy': 0.95, 'kappa': 0.9, 'auc': 1.0}, {'fold_index': 2, 'train_indices': [3, 109, 165, 70, 15, 172, 19, 5, 38, 146, 77, 11, 147, 198, 92, 18, 174, 2, 176, 168, 118, 199, 63, 100, 158, 17, 134, 86, 105, 24, 34, 175, 61, 166, 125, 97, 39, 108, 78, 79, 80, 31, 46, 180, 60, 113, 127, 87, 186, 144, 124, 67, 13, 136, 74, 65, 115, 167, 123, 72, 191, 182, 82, 23, 110, 40, 119, 183, 148, 128, 143, 85, 142, 107, 189, 30, 130, 145, 103, 96, 164, 151, 98, 64, 101, 43, 81, 49, 75, 69, 89, 106, 66, 162, 154, 161, 122, 188, 121, 10, 20, 91, 52, 111, 137, 57, 93, 178, 102, 138, 55, 47, 133, 42, 12, 196, 99, 177, 44, 169, 37, 193, 157, 1, 190, 0, 26, 141, 155, 173, 28, 27, 16, 32, 7, 195, 131, 197, 14, 156, 185, 36, 95, 71, 51, 160, 194, 117, 56, 68, 126, 41, 59, 135, 129, 4, 53, 90, 94, 179], 'val_indices': [58, 152, 153, 54, 171, 88, 170, 45, 21, 84, 181, 73, 150, 22, 29, 184, 25, 120, 159, 114, 116, 187, 6, 149, 83, 33, 50, 139, 104, 9, 48, 132, 112, 35, 76, 163, 8, 140, 192, 62], 'accuracy': 1.0, 'kappa': 1.0, 'auc': 1.0}, {'fold_index': 3, 'train_indices': [66, 43, 45, 22, 69, 48, 44, 60, 123, 74, 179, 25, 150, 171, 132, 28, 165, 96, 73, 113, 127, 72, 135, 52, 38, 23, 122, 100, 177, 92, 137, 148, 12, 8, 91, 159, 172, 125, 187, 32, 29, 173, 40, 108, 4, 151, 37, 186, 34, 21, 1, 33, 190, 176, 35, 146, 143, 68, 160, 136, 107, 103, 53, 49, 141, 131, 15, 50, 54, 199, 126, 154, 7, 193, 0, 89, 55, 56, 10, 98, 134, 106, 161, 168, 138, 112, 63, 88, 83, 174, 121, 81, 65, 61, 109, 78, 26, 47, 104, 9, 153, 180, 31, 94, 71, 77, 18, 195, 167, 75, 164, 162, 86, 85, 157, 119, 3, 84, 149, 142, 82, 95, 175, 191, 139, 133, 117, 24, 76, 41, 62, 198, 6, 111, 183, 110, 30, 11, 99, 178, 93, 87, 13, 166, 189, 170, 185, 118, 130, 197, 120, 128, 158, 140, 16, 59, 145, 101, 17, 181], 'val_indices': [20, 14, 169, 144, 196, 105, 67, 182, 36, 39, 97, 57, 64, 58, 79, 90, 188, 194, 155, 129, 102, 192, 27, 5, 124, 116, 80, 184, 152, 163, 46, 156, 114, 147, 115, 70, 19, 2, 51, 42], 'accuracy': 0.95, 'kappa': 0.9, 'auc': 0.9974999999999999}, {'fold_index': 4, 'train_indices': [52, 4, 194, 64, 46, 59, 38, 21, 193, 157, 28, 57, 17, 154, 184, 97, 139, 125, 102, 182, 30, 143, 180, 50, 126, 13, 161, 100, 15, 135, 45, 74, 153, 51, 115, 189, 181, 187, 37, 133, 118, 168, 16, 136, 66, 73, 19, 174, 22, 24, 71, 192, 63, 144, 122, 72, 54, 175, 147, 155, 85, 107, 149, 103, 69, 31, 27, 145, 7, 84, 77, 191, 88, 79, 114, 49, 90, 124, 5, 111, 36, 172, 131, 61, 32, 185, 173, 2, 166, 39, 148, 110, 34, 199, 65, 186, 23, 91, 159, 170, 93, 119, 195, 116, 129, 76, 53, 158, 101, 130, 178, 156, 6, 94, 138, 167, 96, 68, 132, 165, 92, 140, 12, 137, 44, 188, 160, 83, 47, 60, 98, 81, 105, 78, 58, 11, 25, 26, 82, 141, 171, 196, 62, 48, 1, 177, 70, 121, 8, 163, 109, 95, 104, 43, 117, 150, 14, 197, 127, 33], 'val_indices': [123, 35, 89, 183, 0, 80, 75, 134, 10, 87, 120, 40, 151, 67, 86, 99, 152, 42, 20, 176, 162, 169, 41, 190, 56, 9, 142, 146, 112, 108, 3, 128, 198, 106, 55, 29, 18, 164, 113, 179], 'accuracy': 0.975, 'kappa': 0.95, 'auc': 1.0}], 'std_acc': 0.022, 'std_kappa': 0.045, 'std_auc': 0.001}\n"
     ]
    }
   ],
   "source": [
    "from pickle import dump\n",
    "\n",
    "subjects = [8, 9, 10, 11, 12, 13, 14]\n",
    "\n",
    "for sbj in subjects[:]:\n",
    "  print('sbj = ', sbj)\n",
    "  load_args['sbj'] = sbj\n",
    "  results = train(db_name, load_args, cv_args, model_args, compile_args, fit_args, seed)\n",
    "  with open('sbj' + str(load_args['sbj']) + '.txt', 'wb') as f:\n",
    "    dump(results, f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "044585c0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-20T10:31:00.158886Z",
     "iopub.status.busy": "2025-01-20T10:31:00.158598Z",
     "iopub.status.idle": "2025-01-20T10:31:02.246432Z",
     "shell.execute_reply": "2025-01-20T10:31:02.245161Z"
    },
    "id": "V7-P0xjwzXVX",
    "outputId": "270dceef-351d-48d1-f71e-2c3367c7fdac",
    "papermill": {
     "duration": 2.106201,
     "end_time": "2025-01-20T10:31:02.248607",
     "exception": false,
     "start_time": "2025-01-20T10:31:00.142406",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/pty.py:89: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n",
      "  pid, fd = os.forkpty()\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  adding: sbj10.h5 (deflated 75%)\r\n",
      "  adding: sbj11.h5 (deflated 75%)\r\n",
      "  adding: sbj12.h5 (deflated 75%)\r\n",
      "  adding: sbj13.h5 (deflated 75%)\r\n",
      "  adding: sbj14.h5 (deflated 75%)\r\n",
      "  adding: sbj8.h5 (deflated 75%)\r\n",
      "  adding: sbj9.h5 (deflated 75%)\r\n",
      "  adding: sbj10.txt (deflated 41%)\r\n",
      "  adding: sbj11.txt (deflated 41%)\r\n",
      "  adding: sbj12.txt (deflated 42%)\r\n",
      "  adding: sbj13.txt (deflated 42%)\r\n",
      "  adding: sbj14.txt (deflated 43%)\r\n",
      "  adding: sbj8.txt (deflated 42%)\r\n",
      "  adding: sbj9.txt (deflated 40%)\r\n"
     ]
    }
   ],
   "source": [
    "!zip Models_64ch_EEGNet.zip ./*.h5 \n",
    "!zip Results_64ch_EEGNet.zip ./*.txt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "29166854",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-20T10:31:02.281180Z",
     "iopub.status.busy": "2025-01-20T10:31:02.280869Z",
     "iopub.status.idle": "2025-01-20T10:31:02.285164Z",
     "shell.execute_reply": "2025-01-20T10:31:02.284316Z"
    },
    "papermill": {
     "duration": 0.022389,
     "end_time": "2025-01-20T10:31:02.286761",
     "exception": false,
     "start_time": "2025-01-20T10:31:02.264372",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#import pickle as pkl\n",
    "\n",
    "#with open(file= '/kaggle/working/sbj14.txt', mode = 'rb' ) as f:\n",
    "#    results_64ch_ShallowConvNet = pkl.load(f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e3af12b8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-20T10:31:02.318124Z",
     "iopub.status.busy": "2025-01-20T10:31:02.317853Z",
     "iopub.status.idle": "2025-01-20T10:31:02.321520Z",
     "shell.execute_reply": "2025-01-20T10:31:02.320870Z"
    },
    "papermill": {
     "duration": 0.020993,
     "end_time": "2025-01-20T10:31:02.323056",
     "exception": false,
     "start_time": "2025-01-20T10:31:02.302063",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#results_64ch_ShallowConvNet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1c54f5fa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-20T10:31:02.354675Z",
     "iopub.status.busy": "2025-01-20T10:31:02.354085Z",
     "iopub.status.idle": "2025-01-20T10:31:02.357481Z",
     "shell.execute_reply": "2025-01-20T10:31:02.356836Z"
    },
    "papermill": {
     "duration": 0.020893,
     "end_time": "2025-01-20T10:31:02.359051",
     "exception": false,
     "start_time": "2025-01-20T10:31:02.338158",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#with open(file= '/kaggle/working/sbj2.txt', mode = 'rb' ) as f:\n",
    " #   results_64ch_ShallowConvNet = pkl.load(f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ed002ea5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-20T10:31:02.390416Z",
     "iopub.status.busy": "2025-01-20T10:31:02.390193Z",
     "iopub.status.idle": "2025-01-20T10:31:02.393553Z",
     "shell.execute_reply": "2025-01-20T10:31:02.392865Z"
    },
    "papermill": {
     "duration": 0.020911,
     "end_time": "2025-01-20T10:31:02.395232",
     "exception": false,
     "start_time": "2025-01-20T10:31:02.374321",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#results_64ch_ShallowConvNet"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 1645904,
     "sourceId": 2702213,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 1269900,
     "sourceId": 2702226,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 2984453,
     "sourceId": 5137200,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 3008205,
     "sourceId": 5175158,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30786,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 23722.79806,
   "end_time": "2025-01-20T10:31:05.246602",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-01-20T03:55:42.448542",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
