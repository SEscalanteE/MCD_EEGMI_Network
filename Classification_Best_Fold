{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "fb68bc5c",
   "metadata": {
    "id": "x9LNzEYERaH2",
    "papermill": {
     "duration": 0.004685,
     "end_time": "2025-01-20T03:57:00.883299",
     "exception": false,
     "start_time": "2025-01-20T03:57:00.878614",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Download Packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "dd4a5873",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-20T03:57:00.895134Z",
     "iopub.status.busy": "2025-01-20T03:57:00.894641Z",
     "iopub.status.idle": "2025-01-20T03:57:02.094325Z",
     "shell.execute_reply": "2025-01-20T03:57:02.092586Z"
    },
    "papermill": {
     "duration": 1.208677,
     "end_time": "2025-01-20T03:57:02.097430",
     "exception": false,
     "start_time": "2025-01-20T03:57:00.888753",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/bin/bash: nvidia-smi: command not found\r\n"
     ]
    }
   ],
   "source": [
    "!nvidia-smi -L"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "936e0be1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-20T03:57:02.110999Z",
     "iopub.status.busy": "2025-01-20T03:57:02.110529Z",
     "iopub.status.idle": "2025-01-20T03:58:29.703621Z",
     "shell.execute_reply": "2025-01-20T03:58:29.701831Z"
    },
    "id": "K0oS6IH7VTZX",
    "papermill": {
     "duration": 87.60259,
     "end_time": "2025-01-20T03:58:29.706672",
     "exception": false,
     "start_time": "2025-01-20T03:57:02.104082",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "!pip install -U git+https://github.com/UN-GCPDS/python-gcpds.databases #Package for database reading.\n",
    "!pip install mne #The MNE Package is installed\n",
    "FILEID = \"1lo0MjWLvsyne2CgTA6VZ2HGY9SKxiwZ7\"\n",
    "!wget --load-cookies /tmp/cookies.txt \"https://docs.google.com/uc?export=download&confirm=$(wget --quiet --save-cookies /tmp/cookies.txt --keep-session-cookies --no-check-certificate 'https://docs.google.com/uc?export=download&id='$FILEID -O- | sed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\\1\\n/p')&id=\"$FILEID -O MI_EEG_ClassMeth.zip && rm -rf /tmp/cookies.txt\n",
    "!unzip MI_EEG_ClassMeth.zip #Package with useful functions for motor imagery classification based in EEG.\n",
    "!pip install -U git+https://github.com/UN-GCPDS/python-gcpds.EEG_Tensorflow_models.git\n",
    "!dir"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f43e89cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-20T03:58:29.717742Z",
     "iopub.status.busy": "2025-01-20T03:58:29.717229Z",
     "iopub.status.idle": "2025-01-20T04:00:04.617706Z",
     "shell.execute_reply": "2025-01-20T04:00:04.614689Z"
    },
    "papermill": {
     "duration": 94.909802,
     "end_time": "2025-01-20T04:00:04.621041",
     "exception": false,
     "start_time": "2025-01-20T03:58:29.711239",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r\n",
      "\r\n",
      "\r\n",
      "E: Unable to locate package libcudnn8\r\n",
      "Collecting tensorflow==2.8.2\r\n",
      "  Downloading tensorflow-2.8.2-cp310-cp310-manylinux2010_x86_64.whl.metadata (2.9 kB)\r\n",
      "Requirement already satisfied: absl-py>=0.4.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (1.4.0)\r\n",
      "Requirement already satisfied: astunparse>=1.6.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (1.6.3)\r\n",
      "Requirement already satisfied: flatbuffers>=1.12 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (24.3.25)\r\n",
      "Requirement already satisfied: gast>=0.2.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (0.5.4)\r\n",
      "Requirement already satisfied: google-pasta>=0.1.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (0.2.0)\r\n",
      "Requirement already satisfied: h5py>=2.9.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (3.11.0)\r\n",
      "Collecting keras-preprocessing>=1.1.1 (from tensorflow==2.8.2)\r\n",
      "  Downloading Keras_Preprocessing-1.1.2-py2.py3-none-any.whl.metadata (1.9 kB)\r\n",
      "Requirement already satisfied: libclang>=9.0.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (18.1.1)\r\n",
      "Requirement already satisfied: numpy>=1.20 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (1.26.4)\r\n",
      "Requirement already satisfied: opt-einsum>=2.3.2 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (3.3.0)\r\n",
      "Collecting protobuf<3.20,>=3.9.2 (from tensorflow==2.8.2)\r\n",
      "  Downloading protobuf-3.19.6-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (787 bytes)\r\n",
      "Requirement already satisfied: setuptools in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (70.0.0)\r\n",
      "Requirement already satisfied: six>=1.12.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (1.16.0)\r\n",
      "Requirement already satisfied: termcolor>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (2.4.0)\r\n",
      "Requirement already satisfied: typing-extensions>=3.6.6 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (4.12.2)\r\n",
      "Requirement already satisfied: wrapt>=1.11.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (1.16.0)\r\n",
      "Collecting tensorboard<2.9,>=2.8 (from tensorflow==2.8.2)\r\n",
      "  Downloading tensorboard-2.8.0-py3-none-any.whl.metadata (1.9 kB)\r\n",
      "Collecting tensorflow-estimator<2.9,>=2.8 (from tensorflow==2.8.2)\r\n",
      "  Downloading tensorflow_estimator-2.8.0-py2.py3-none-any.whl.metadata (1.3 kB)\r\n",
      "Collecting keras<2.9,>=2.8.0rc0 (from tensorflow==2.8.2)\r\n",
      "  Downloading keras-2.8.0-py2.py3-none-any.whl.metadata (1.3 kB)\r\n",
      "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (0.37.0)\r\n",
      "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (1.64.1)\r\n",
      "Requirement already satisfied: wheel<1.0,>=0.23.0 in /opt/conda/lib/python3.10/site-packages (from astunparse>=1.6.0->tensorflow==2.8.2) (0.43.0)\r\n",
      "Requirement already satisfied: google-auth<3,>=1.6.3 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.9,>=2.8->tensorflow==2.8.2) (2.30.0)\r\n",
      "Collecting google-auth-oauthlib<0.5,>=0.4.1 (from tensorboard<2.9,>=2.8->tensorflow==2.8.2)\r\n",
      "  Downloading google_auth_oauthlib-0.4.6-py2.py3-none-any.whl.metadata (2.7 kB)\r\n",
      "Requirement already satisfied: markdown>=2.6.8 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.9,>=2.8->tensorflow==2.8.2) (3.6)\r\n",
      "Requirement already satisfied: requests<3,>=2.21.0 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.9,>=2.8->tensorflow==2.8.2) (2.32.3)\r\n",
      "Collecting tensorboard-data-server<0.7.0,>=0.6.0 (from tensorboard<2.9,>=2.8->tensorflow==2.8.2)\r\n",
      "  Downloading tensorboard_data_server-0.6.1-py3-none-manylinux2010_x86_64.whl.metadata (1.1 kB)\r\n",
      "Collecting tensorboard-plugin-wit>=1.6.0 (from tensorboard<2.9,>=2.8->tensorflow==2.8.2)\r\n",
      "  Downloading tensorboard_plugin_wit-1.8.1-py3-none-any.whl.metadata (873 bytes)\r\n",
      "Requirement already satisfied: werkzeug>=0.11.15 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.9,>=2.8->tensorflow==2.8.2) (3.0.4)\r\n",
      "Requirement already satisfied: cachetools<6.0,>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow==2.8.2) (4.2.4)\r\n",
      "Requirement already satisfied: pyasn1-modules>=0.2.1 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow==2.8.2) (0.4.0)\r\n",
      "Requirement already satisfied: rsa<5,>=3.1.4 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow==2.8.2) (4.9)\r\n",
      "Requirement already satisfied: requests-oauthlib>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.9,>=2.8->tensorflow==2.8.2) (2.0.0)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow==2.8.2) (3.3.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow==2.8.2) (3.7)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow==2.8.2) (1.26.18)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow==2.8.2) (2024.8.30)\r\n",
      "Requirement already satisfied: MarkupSafe>=2.1.1 in /opt/conda/lib/python3.10/site-packages (from werkzeug>=0.11.15->tensorboard<2.9,>=2.8->tensorflow==2.8.2) (2.1.5)\r\n",
      "Requirement already satisfied: pyasn1<0.7.0,>=0.4.6 in /opt/conda/lib/python3.10/site-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow==2.8.2) (0.6.0)\r\n",
      "Requirement already satisfied: oauthlib>=3.0.0 in /opt/conda/lib/python3.10/site-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.9,>=2.8->tensorflow==2.8.2) (3.2.2)\r\n",
      "Downloading tensorflow-2.8.2-cp310-cp310-manylinux2010_x86_64.whl (498.0 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m498.0/498.0 MB\u001b[0m \u001b[31m2.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading keras-2.8.0-py2.py3-none-any.whl (1.4 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.4/1.4 MB\u001b[0m \u001b[31m26.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading Keras_Preprocessing-1.1.2-py2.py3-none-any.whl (42 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m42.6/42.6 kB\u001b[0m \u001b[31m2.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading protobuf-3.19.6-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.1 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.1/1.1 MB\u001b[0m \u001b[31m28.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading tensorboard-2.8.0-py3-none-any.whl (5.8 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m5.8/5.8 MB\u001b[0m \u001b[31m72.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading tensorflow_estimator-2.8.0-py2.py3-none-any.whl (462 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m462.3/462.3 kB\u001b[0m \u001b[31m19.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading google_auth_oauthlib-0.4.6-py2.py3-none-any.whl (18 kB)\r\n",
      "Downloading tensorboard_data_server-0.6.1-py3-none-manylinux2010_x86_64.whl (4.9 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.9/4.9 MB\u001b[0m \u001b[31m52.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading tensorboard_plugin_wit-1.8.1-py3-none-any.whl (781 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m781.3/781.3 kB\u001b[0m \u001b[31m28.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hInstalling collected packages: tensorflow-estimator, tensorboard-plugin-wit, keras, tensorboard-data-server, protobuf, keras-preprocessing, google-auth-oauthlib, tensorboard, tensorflow\r\n",
      "  Attempting uninstall: tensorflow-estimator\r\n",
      "    Found existing installation: tensorflow-estimator 2.15.0\r\n",
      "    Uninstalling tensorflow-estimator-2.15.0:\r\n",
      "      Successfully uninstalled tensorflow-estimator-2.15.0\r\n",
      "  Attempting uninstall: keras\r\n",
      "    Found existing installation: keras 3.3.3\r\n",
      "    Uninstalling keras-3.3.3:\r\n",
      "      Successfully uninstalled keras-3.3.3\r\n",
      "  Attempting uninstall: tensorboard-data-server\r\n",
      "    Found existing installation: tensorboard-data-server 0.7.2\r\n",
      "    Uninstalling tensorboard-data-server-0.7.2:\r\n",
      "      Successfully uninstalled tensorboard-data-server-0.7.2\r\n",
      "  Attempting uninstall: protobuf\r\n",
      "    Found existing installation: protobuf 3.20.3\r\n",
      "    Uninstalling protobuf-3.20.3:\r\n",
      "      Successfully uninstalled protobuf-3.20.3\r\n",
      "  Attempting uninstall: google-auth-oauthlib\r\n",
      "    Found existing installation: google-auth-oauthlib 1.2.0\r\n",
      "    Uninstalling google-auth-oauthlib-1.2.0:\r\n",
      "      Successfully uninstalled google-auth-oauthlib-1.2.0\r\n",
      "  Attempting uninstall: tensorboard\r\n",
      "    Found existing installation: tensorboard 2.16.2\r\n",
      "    Uninstalling tensorboard-2.16.2:\r\n",
      "      Successfully uninstalled tensorboard-2.16.2\r\n",
      "  Attempting uninstall: tensorflow\r\n",
      "    Found existing installation: tensorflow 2.16.1\r\n",
      "    Uninstalling tensorflow-2.16.1:\r\n",
      "      Successfully uninstalled tensorflow-2.16.1\r\n",
      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "apache-beam 2.46.0 requires cloudpickle~=2.2.1, but you have cloudpickle 3.0.0 which is incompatible.\r\n",
      "apache-beam 2.46.0 requires dill<0.3.2,>=0.3.1.1, but you have dill 0.3.8 which is incompatible.\r\n",
      "apache-beam 2.46.0 requires numpy<1.25.0,>=1.14.3, but you have numpy 1.26.4 which is incompatible.\r\n",
      "apache-beam 2.46.0 requires pyarrow<10.0.0,>=3.0.0, but you have pyarrow 17.0.0 which is incompatible.\r\n",
      "google-ai-generativelanguage 0.6.10 requires protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.2, but you have protobuf 3.19.6 which is incompatible.\r\n",
      "google-cloud-aiplatform 0.6.0a1 requires google-api-core[grpc]<2.0.0dev,>=1.22.2, but you have google-api-core 2.11.1 which is incompatible.\r\n",
      "google-cloud-automl 1.0.1 requires google-api-core[grpc]<2.0.0dev,>=1.14.0, but you have google-api-core 2.11.1 which is incompatible.\r\n",
      "google-cloud-language 2.14.0 requires protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.2, but you have protobuf 3.19.6 which is incompatible.\r\n",
      "google-cloud-spanner 3.47.0 requires protobuf!=3.20.0,!=3.20.1,!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.2, but you have protobuf 3.19.6 which is incompatible.\r\n",
      "google-cloud-videointelligence 2.13.5 requires protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.2, but you have protobuf 3.19.6 which is incompatible.\r\n",
      "kfp 2.5.0 requires google-cloud-storage<3,>=2.2.1, but you have google-cloud-storage 1.44.0 which is incompatible.\r\n",
      "onnx 1.17.0 requires protobuf>=3.20.2, but you have protobuf 3.19.6 which is incompatible.\r\n",
      "tensorboardx 2.6.2.2 requires protobuf>=3.20, but you have protobuf 3.19.6 which is incompatible.\r\n",
      "tensorflow-datasets 4.9.6 requires protobuf>=3.20, but you have protobuf 3.19.6 which is incompatible.\r\n",
      "tensorflow-decision-forests 1.9.1 requires tensorflow~=2.16.1, but you have tensorflow 2.8.2 which is incompatible.\r\n",
      "tensorflow-serving-api 2.16.1 requires protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3, but you have protobuf 3.19.6 which is incompatible.\r\n",
      "tensorflow-serving-api 2.16.1 requires tensorflow<3,>=2.16.1, but you have tensorflow 2.8.2 which is incompatible.\r\n",
      "tensorflow-text 2.16.1 requires tensorflow<2.17,>=2.16.1; platform_machine != \"arm64\" or platform_system != \"Darwin\", but you have tensorflow 2.8.2 which is incompatible.\r\n",
      "tf-keras 2.16.0 requires tensorflow<2.17,>=2.16, but you have tensorflow 2.8.2 which is incompatible.\u001b[0m\u001b[31m\r\n",
      "\u001b[0mSuccessfully installed google-auth-oauthlib-0.4.6 keras-2.8.0 keras-preprocessing-1.1.2 protobuf-3.19.6 tensorboard-2.8.0 tensorboard-data-server-0.6.1 tensorboard-plugin-wit-1.8.1 tensorflow-2.8.2 tensorflow-estimator-2.8.0\r\n"
     ]
    }
   ],
   "source": [
    "!apt-get install --allow-change-held-packages libcudnn8=8.1.0.77-1+cuda11.2 -y\n",
    "!pip install tensorflow==2.8.2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "41271762",
   "metadata": {
    "papermill": {
     "duration": 0.016572,
     "end_time": "2025-01-20T04:00:04.657584",
     "exception": false,
     "start_time": "2025-01-20T04:00:04.641012",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "96923d93",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-20T04:00:04.698046Z",
     "iopub.status.busy": "2025-01-20T04:00:04.697253Z",
     "iopub.status.idle": "2025-01-20T04:00:16.547836Z",
     "shell.execute_reply": "2025-01-20T04:00:16.546520Z"
    },
    "id": "yE1sbHYQVbBq",
    "papermill": {
     "duration": 11.876258,
     "end_time": "2025-01-20T04:00:16.550329",
     "exception": false,
     "start_time": "2025-01-20T04:00:04.674071",
     "status": "completed"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [],
   "source": [
    "from gcpds.databases.BCI_Competition_IV import Dataset_2a\n",
    "from typing import Sequence, Tuple\n",
    "from MI_EEG_ClassMeth.FeatExtraction import TimeFrequencyRpr\n",
    "import numpy as np\n",
    "from scipy.signal import resample\n",
    "\n",
    "def load_BCICIV2a(db: Dataset_2a,\n",
    "               sbj: int,\n",
    "               mode: str,\n",
    "               fs: float, \n",
    "               f_bank: np.ndarray, \n",
    "               vwt: np.ndarray, \n",
    "               new_fs: float) -> np.ndarray:\n",
    "\n",
    "  tf_repr = TimeFrequencyRpr(sfreq = fs, f_bank = f_bank, vwt = vwt)\n",
    "\n",
    "  db.load_subject(sbj, mode = mode)\n",
    "    \n",
    "  X, y = db.get_data() #Load all classes, all channels {EEG, EOG}, reject bad trials\n",
    "\n",
    "  X = X[:,:-3,:] # pick EEG channels\n",
    "  X = X*1e6 #uV\n",
    "  X = np.squeeze(tf_repr.transform(X))\n",
    "  #Resampling\n",
    "  if new_fs == fs:\n",
    "    print('No resampling, since new sampling rate same.')\n",
    "  else:\n",
    "    print(\"Resampling from {:f} to {:f} Hz.\".format(fs, new_fs))\n",
    "    X = resample(X, int((X.shape[-1]/fs)*new_fs), axis = -1)\n",
    "    \n",
    "  return X, y\n",
    "\n",
    "\n",
    "from gcpds.databases import GIGA_MI_ME\n",
    "\n",
    "def load_GIGA_MI_ME(db: GIGA_MI_ME,\n",
    "              sbj: int,\n",
    "              eeg_ch_names: Sequence[str],\n",
    "              fs: float, \n",
    "              f_bank: np.ndarray, \n",
    "              vwt: np.ndarray, \n",
    "              new_fs: float) -> Tuple[np.ndarray, np.ndarray]:\n",
    "\n",
    "    index_eeg_chs = db.format_channels_selectors(channels=eeg_ch_names) - 1\n",
    "\n",
    "    tf_repr = TimeFrequencyRpr(sfreq=fs, f_bank=f_bank, vwt=vwt)\n",
    "\n",
    "    # Load subject data\n",
    "    db.load_subject(sbj)\n",
    "    X, y = db.get_data(classes=['left hand mi', 'right hand mi'])\n",
    "    \n",
    "    # Debugging total trials\n",
    "    print(f\"Total trials loaded: {X.shape[0]}\")\n",
    "    print(f\"Shape of X: {X.shape}, Shape of y: {y.shape}\")\n",
    "\n",
    "    # Spatial rearrangement\n",
    "    X = X[:, index_eeg_chs, :]  \n",
    "    X = np.squeeze(tf_repr.transform(X))\n",
    "\n",
    "    # Resampling\n",
    "    if new_fs == fs:\n",
    "        print('No resampling, since new sampling rate is the same.')\n",
    "    else:\n",
    "        print(f\"Resampling from {fs} to {new_fs} Hz.\")\n",
    "        X = resample(X, int((X.shape[-1] / fs) * new_fs), axis=-1)\n",
    "    \n",
    "    return X, y\n",
    "\n",
    "\n",
    "\n",
    "def load_DB(db_name, **load_args):\n",
    "  if db_name == 'BCICIV2a':\n",
    "    X_train, y_train = load_BCICIV2a(**load_args, mode = 'training')\n",
    "    X_test, y_test = load_BCICIV2a(**load_args, mode = 'evaluation')\n",
    "\n",
    "    X_train = np.concatenate([X_train, X_test], axis = 0)\n",
    "    y_train = np.concatenate([y_train, y_test], axis = 0)\n",
    "\n",
    "  elif db_name == 'GIGA_MI_ME':\n",
    "    X_train, y_train = load_GIGA_MI_ME(**load_args)\n",
    "    \n",
    "  else:\n",
    "    raise ValueError('No valid database name')\n",
    "\n",
    "  return X_train, y_train\n",
    "\n",
    "\n",
    "from EEG_Tensorflow_models.Models import DeepConvNet, ShallowConvNet, EEGNet, DMTL_BCI, TCNet_fusion, PST_attention\n",
    "\n",
    "\n",
    "def get_model(model_name, nb_classes):\n",
    "  if model_name == 'DeepConvNet':\n",
    "    model = DeepConvNet\n",
    "    model_params = dict(nb_classes = nb_classes,\n",
    "                      dropoutRate = 0.5, version='2018')\n",
    "    \n",
    "  elif model_name == 'ShallowConvNet':\n",
    "    model = ShallowConvNet\n",
    "    model_params = dict(nb_classes = nb_classes,\n",
    "                      dropoutRate = 0.5,\n",
    "                      version = '2018')\n",
    "    \n",
    "  elif model_name == 'EEGNet':\n",
    "    model = EEGNet\n",
    "    model_params = dict(nb_classes = nb_classes,\n",
    "                      dropoutRate = 0.5,\n",
    "                      kernLength = 32,\n",
    "                      F1 = 8,\n",
    "                      D = 2,\n",
    "                      F2 = 16,\n",
    "                      norm_rate = 0.25, \n",
    "                      dropoutType = 'Dropout')\n",
    "    \n",
    "  elif model_name == 'DMTL_BCI':\n",
    "    model = DMTL_BCI\n",
    "    model_params = dict(nb_classes = nb_classes,\n",
    "                      dropoutRate = 0.5,\n",
    "                      l1 = 0,\n",
    "                      l2 = 0)\n",
    "    \n",
    "  elif model_name == 'TCNet_fusion':\n",
    "    model = TCNet_fusion\n",
    "    model_params = dict(nb_classes = nb_classes,\n",
    "                      layers = 2,\n",
    "                      kernel_s = 4,\n",
    "                      filt = 12,\n",
    "                      dropout = 0.3,\n",
    "                      activation = 'relu',\n",
    "                      F1 = 24,\n",
    "                      D = 2,\n",
    "                      kernLength = 32,\n",
    "                      N_residuals = 2)\n",
    "    \n",
    "  elif model_name == 'PST_attention':\n",
    "    model = PST_attention\n",
    "    model_params = dict(nb_classes = nb_classes,\n",
    "                      dropoutRate = 0.5,\n",
    "                      last_layer = 'Dense')\n",
    "    \n",
    "  else:\n",
    "    raise ValueError('No valid model name')\n",
    "    \n",
    "  return model, model_params\n",
    "\n",
    "from tensorflow.random import set_seed\n",
    "from tensorflow.keras.backend import clear_session\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "from sklearn.metrics import accuracy_score, cohen_kappa_score, roc_auc_score,\\\n",
    "                            f1_score, recall_score, precision_score\n",
    "\n",
    "def train(db_name, load_args, cv_args, model_args, compile_args, fit_args, seed):\n",
    "    X_train, y_train = load_DB(db_name, **load_args)\n",
    "    X_train = X_train[..., np.newaxis]  # Add channel dimension\n",
    "    print(f\"X_train shape: {X_train.shape}, y_train shape: {y_train.shape}\")\n",
    "    \n",
    "    cv_results = {'params': [],\n",
    "                  'mean_acc': np.zeros(cv_args['cv'].get_n_splits()),\n",
    "                  'mean_kappa': np.zeros(cv_args['cv'].get_n_splits()),\n",
    "                  'mean_auc': np.zeros(cv_args['cv'].get_n_splits()),\n",
    "                  'mean_f1_left': np.zeros(cv_args['cv'].get_n_splits()),\n",
    "                  'mean_f1_right': np.zeros(cv_args['cv'].get_n_splits()),\n",
    "                  'mean_recall_left': np.zeros(cv_args['cv'].get_n_splits()),\n",
    "                  'mean_recall_right': np.zeros(cv_args['cv'].get_n_splits()),\n",
    "                  'mean_precision_left': np.zeros(cv_args['cv'].get_n_splits()),\n",
    "                  'mean_precision_right': np.zeros(cv_args['cv'].get_n_splits()),\n",
    "                  'all_folds': []}\n",
    "    \n",
    "    k = 0\n",
    "    max_acc = -np.inf\n",
    "\n",
    "    # Loop through folds\n",
    "    for train_index, val_index in cv_args['cv'].split(X_train, y_train):\n",
    "        print(f\"Running fold {k} with {len(train_index)} training samples and {len(val_index)} validation samples\")\n",
    "        print(f\"Fold {k}: train indices: {train_index[:5]}, val indices: {val_index[:5]}\")  # Print first indices\n",
    "        \n",
    "        X, X_val = X_train[train_index], X_train[val_index]\n",
    "        y, y_val = y_train[train_index], y_train[val_index]\n",
    "        \n",
    "        if model_args['autoencoder']:\n",
    "            y = [X, y]\n",
    "        \n",
    "        print(f\"Training data shape: {X.shape}, Validation data shape: {X_val.shape}\")\n",
    "        \n",
    "        batch_size, C, T = X.shape[:-1]\n",
    "        clear_session()\n",
    "        set_seed(seed)\n",
    "\n",
    "        model_cll, model_params = get_model(model_args['model_name'], model_args['nb_classes'])\n",
    "        model = model_cll(**model_params, Chans=64, Samples=T)\n",
    "        model.compile(loss=compile_args['loss'], optimizer=Adam(compile_args['init_lr']))\n",
    "\n",
    "        history = model.fit(X, y, batch_size=batch_size, **fit_args)\n",
    "        print(f\"Fold {k} training loss: {history.history['loss'][-1]}\")  # Print final loss\n",
    "\n",
    "        if model_args['autoencoder']:\n",
    "            y_prob = model.predict(X_val)[-1]\n",
    "        else:\n",
    "            y_prob = model.predict(X_val)\n",
    "        y_pred = np.argmax(y_prob, axis=1)\n",
    "\n",
    "        print(f\"y_true (val): {y_val[:5]}\")\n",
    "        print(f\"y_pred: {y_pred[:5]}\")\n",
    "        \n",
    "        # Calculate metrics\n",
    "        acc = accuracy_score(y_val, y_pred)\n",
    "        kappa = cohen_kappa_score(y_val, y_pred)\n",
    "        auc = roc_auc_score(y_val, y_prob[:, 1], average='macro') if model_args['nb_classes'] == 2 else None\n",
    "        \n",
    "        # Save metrics for this fold\n",
    "        fold_result = {\n",
    "            'fold_index': k,\n",
    "            'train_indices': train_index.tolist(),\n",
    "            'val_indices': val_index.tolist(),\n",
    "            'accuracy': acc,\n",
    "            'kappa': kappa,\n",
    "            'auc': auc\n",
    "        }\n",
    "        print(f\"Appending results for fold {k}: {fold_result}\")\n",
    "        cv_results['all_folds'].append(fold_result)\n",
    "\n",
    "        # Update overall fold metrics\n",
    "        cv_results['mean_acc'][k] = acc\n",
    "        cv_results['mean_kappa'][k] = kappa\n",
    "        if auc is not None:\n",
    "            cv_results['mean_auc'][k] = auc\n",
    "        \n",
    "        # Save the best model weights\n",
    "        if acc > max_acc:\n",
    "            print('New Max Found!')\n",
    "            max_acc = acc\n",
    "            model.save_weights(f'sbj{load_args[\"sbj\"]}.h5')\n",
    "\n",
    "        k += 1\n",
    "    \n",
    "    # Calculate mean and std metrics\n",
    "    cv_results['std_acc'] = round(cv_results['mean_acc'].std(), 3)\n",
    "    cv_results['mean_acc'] = round(cv_results['mean_acc'].mean(), 3)\n",
    "    cv_results['std_kappa'] = round(cv_results['mean_kappa'].std(), 3)\n",
    "    cv_results['mean_kappa'] = round(cv_results['mean_kappa'].mean(), 3)\n",
    "    cv_results['std_auc'] = round(cv_results['mean_auc'].std(), 3)\n",
    "    cv_results['mean_auc'] = round(cv_results['mean_auc'].mean(), 3)\n",
    "    \n",
    "    print(f\"Final cross-validation results: {cv_results}\")\n",
    "    return cv_results\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "703ceac1",
   "metadata": {
    "id": "uBAeW6J5S68g",
    "papermill": {
     "duration": 0.016886,
     "end_time": "2025-01-20T04:00:16.583522",
     "exception": false,
     "start_time": "2025-01-20T04:00:16.566636",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Config"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3821b6ba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-20T04:00:16.618302Z",
     "iopub.status.busy": "2025-01-20T04:00:16.617467Z",
     "iopub.status.idle": "2025-01-20T04:00:16.623449Z",
     "shell.execute_reply": "2025-01-20T04:00:16.622473Z"
    },
    "id": "2I3IQnNSS9-a",
    "papermill": {
     "duration": 0.02598,
     "end_time": "2025-01-20T04:00:16.625656",
     "exception": false,
     "start_time": "2025-01-20T04:00:16.599676",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Marcos, use these two variables to run the state of the art. First, for BCICIV2a run all the models.\n",
    "# Remeber that this network DMTL_BCI is an autoencoder. Set the nb_classses parameter depending of the database.\n",
    "# set autoencoder based on the model\n",
    "# We need to run all these tests again. Do not forget to add the recall, preci, and f1 for each class (bci 4, giga 2)\n",
    "db_name = 'GIGA_MI_ME'\n",
    "model_args = dict(model_name = 'EEGNet',\n",
    "                  nb_classes = 2,\n",
    "                  autoencoder = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a6c1811a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-20T04:00:16.660335Z",
     "iopub.status.busy": "2025-01-20T04:00:16.659866Z",
     "iopub.status.idle": "2025-01-20T04:00:16.676682Z",
     "shell.execute_reply": "2025-01-20T04:00:16.675501Z"
    },
    "id": "tqMhUFoBIc3B",
    "outputId": "1405fd59-1374-4d5d-8e3a-5e7a45c79bba",
    "papermill": {
     "duration": 0.037318,
     "end_time": "2025-01-20T04:00:16.679161",
     "exception": false,
     "start_time": "2025-01-20T04:00:16.641843",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from tensorflow.keras.callbacks import ReduceLROnPlateau, TerminateOnNaN\n",
    "import numpy as np\n",
    "from tensorflow.keras.losses import SparseCategoricalCrossentropy, MeanSquaredError\n",
    "from sklearn.model_selection import StratifiedShuffleSplit\n",
    "\n",
    "if db_name == 'BCICIV2a':\n",
    "  db = Dataset_2a('/kaggle/input/dataset-2a')\n",
    "  fs = db.metadata['sampling_rate']\n",
    "  load_args = dict(db = db,\n",
    "                 fs = fs,\n",
    "                 f_bank = np.asarray([[4., 40.]]),\n",
    "                 vwt = np.asarray([[2.5, 6]]),\n",
    "                 new_fs = 128.)\n",
    "  subjects = np.arange(db.metadata['subjects']) + 1\n",
    "  \n",
    "elif db_name == 'GIGA_MI_ME':\n",
    "  db = GIGA_MI_ME('/kaggle/input/giga-science-gcpds/GIGA_MI_ME')\n",
    "  fs = db.metadata['sampling_rate']\n",
    "\n",
    "  eeg_ch_names = ['Fp1','Fpz','Fp2',\n",
    "                     'AF7','AF3','AFz','AF4','AF8',\n",
    "                    'F7','F5','F3','F1','Fz','F2','F4','F6','F8',\n",
    "                   'FT7','FC5','FC3','FC1','FCz','FC2','FC4','FC6','FT8',\n",
    "                    'T7','C5','C3','C1','Cz','C2','C4','C6','T8',\n",
    "                   'TP7','CP5','CP3','CP1','CPz','CP2','CP4','CP6','TP8',\n",
    "                    'P9','P7','P5','P3','P1','Pz','P2','P4','P6','P8','P10',\n",
    "                    'PO7','PO3','POz','PO4','PO8',\n",
    "                    'O1','Oz','O2',\n",
    "                    'Iz']\n",
    "\n",
    "  # eeg_ch_names = ['Fp1','Fp2',\n",
    "  #                  'AF3','AF4',\n",
    "  #                  'F7','F3','Fz','F4','F8',\n",
    "  #                  'FC5','FC1','FC2','FC6',\n",
    "  #                  'T7','C3','Cz','C4','T8',\n",
    "  #                  'CP5','CP1','CP2','CP6',\n",
    "  #                  'P7','P3','Pz','P4','P8',\n",
    "  #                  'PO3','PO4',\n",
    "  #                  'O1','Oz','O2']\n",
    "\n",
    "  # eeg_ch_names = ['Fp1','Fp2',\n",
    "  #                 'F7','F3','F4','F8',\n",
    "  #                 'T7','C3','C4','T8',\n",
    "  #                 'P7','P3','P4','P8',\n",
    "  #                 'O1','O2']\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "  # eeg_ch_names = ['Fp1','Fp2',\n",
    "  #              'T7','C3','C4','T8',\n",
    "  #              'O1','O2']\n",
    "    \n",
    "\n",
    "\n",
    "  load_args = dict(db = db,\n",
    "                  eeg_ch_names = eeg_ch_names,\n",
    "                  fs = fs,\n",
    "                  f_bank = np.asarray([[4., 40.]]),\n",
    "                  vwt = np.asarray([[2.5, 5]]),\n",
    "                  new_fs = 128.)\n",
    "  subjects = np.arange(db.metadata['subjects']) + 1\n",
    "  subjects = np.delete(subjects, [28,33])\n",
    "  \n",
    "else:\n",
    "  raise ValueError('No valid database name')\n",
    "\n",
    "verbose = 0\n",
    "reduce_lr_on_plateau = ReduceLROnPlateau(monitor = 'loss', factor = 0.1, patience = 30, verbose = verbose, mode = 'min', min_delta = 0.01, min_lr = 0)\n",
    "terminate_on_nan = TerminateOnNaN()\n",
    "callbacks = [reduce_lr_on_plateau, terminate_on_nan]\n",
    "seed = 23\n",
    "\n",
    "cv_args = dict(cv = StratifiedShuffleSplit(n_splits = 5, test_size = 0.2, random_state = seed))\n",
    "\n",
    "compile_args = dict(loss = SparseCategoricalCrossentropy(), #['mse' , SparseCategoricalCrossentropy()]\n",
    "                    init_lr = 1e-2)\n",
    "                      \n",
    "fit_args = dict(epochs = 500,\n",
    "                verbose = verbose,\n",
    "                callbacks = callbacks)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fbb04afa",
   "metadata": {
    "id": "ukhXifxzTaj9",
    "papermill": {
     "duration": 0.01583,
     "end_time": "2025-01-20T04:00:16.711243",
     "exception": false,
     "start_time": "2025-01-20T04:00:16.695413",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Main"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f8ebdd9d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-20T04:00:16.747080Z",
     "iopub.status.busy": "2025-01-20T04:00:16.746626Z",
     "iopub.status.idle": "2025-01-20T11:41:04.736461Z",
     "shell.execute_reply": "2025-01-20T11:41:04.733347Z"
    },
    "id": "Ymqd_W21y3NK",
    "outputId": "5ca97a2f-f57c-46ee-8f53-f00181ccea90",
    "papermill": {
     "duration": 27648.033473,
     "end_time": "2025-01-20T11:41:04.760903",
     "exception": false,
     "start_time": "2025-01-20T04:00:16.727430",
     "status": "completed"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sbj =  30\n",
      "Total trials loaded: 122\n",
      "Shape of X: (122, 64, 3584), Shape of y: (122,)\n",
      "Resampling from 512 to 128.0 Hz.\n",
      "X_train shape: (122, 64, 320, 1), y_train shape: (122,)\n",
      "Running fold 0 with 97 training samples and 25 validation samples\n",
      "Fold 0: train indices: [46 53 65 91 13], val indices: [ 38  45 117  40 104]\n",
      "Training data shape: (97, 64, 320, 1), Validation data shape: (25, 64, 320, 1)\n",
      "Fold 0 training loss: 0.010518839582800865\n",
      "y_true (val): [0 0 1 0 1]\n",
      "y_pred: [1 0 1 1 1]\n",
      "Appending results for fold 0: {'fold_index': 0, 'train_indices': [46, 53, 65, 91, 13, 50, 11, 85, 67, 18, 95, 93, 106, 88, 103, 107, 92, 29, 24, 36, 110, 116, 62, 48, 16, 7, 109, 97, 96, 15, 112, 0, 102, 89, 80, 47, 63, 118, 100, 98, 44, 57, 28, 82, 90, 61, 52, 14, 17, 1, 41, 49, 87, 114, 120, 51, 43, 101, 33, 34, 22, 55, 21, 23, 37, 71, 3, 30, 77, 74, 8, 75, 115, 64, 10, 2, 119, 79, 70, 113, 111, 108, 58, 76, 5, 56, 60, 94, 78, 73, 6, 35, 42, 4, 32, 20, 86], 'val_indices': [38, 45, 117, 40, 104, 19, 68, 39, 83, 26, 12, 72, 25, 54, 84, 69, 66, 105, 81, 59, 31, 27, 99, 121, 9], 'accuracy': 0.64, 'kappa': 0.28115015974440893, 'auc': 0.6538461538461539}\n",
      "New Max Found!\n",
      "Running fold 1 with 97 training samples and 25 validation samples\n",
      "Fold 1: train indices: [89 87 10 61 28], val indices: [  5  88 104  99  73]\n",
      "Training data shape: (97, 64, 320, 1), Validation data shape: (25, 64, 320, 1)\n",
      "Fold 1 training loss: 0.008815006352961063\n",
      "y_true (val): [0 1 1 1 1]\n",
      "y_pred: [0 0 1 1 1]\n",
      "Appending results for fold 1: {'fold_index': 1, 'train_indices': [89, 87, 10, 61, 28, 59, 69, 27, 68, 95, 81, 75, 108, 11, 76, 24, 93, 41, 1, 114, 32, 100, 60, 0, 21, 86, 65, 40, 23, 37, 29, 72, 39, 19, 98, 52, 12, 44, 121, 18, 71, 97, 42, 111, 38, 62, 115, 46, 36, 7, 74, 109, 66, 92, 6, 101, 83, 54, 77, 2, 13, 56, 120, 110, 25, 117, 63, 78, 91, 64, 14, 4, 30, 35, 43, 34, 22, 80, 55, 50, 118, 105, 102, 17, 113, 70, 45, 112, 107, 49, 33, 90, 58, 85, 96, 103, 53], 'val_indices': [5, 88, 104, 99, 73, 119, 106, 47, 67, 51, 9, 3, 84, 57, 31, 8, 15, 82, 79, 20, 116, 48, 16, 26, 94], 'accuracy': 0.64, 'kappa': 0.2902208201892744, 'auc': 0.717948717948718}\n",
      "Running fold 2 with 97 training samples and 25 validation samples\n",
      "Fold 2: train indices: [12 19 80 97  0], val indices: [37 48 11 77 59]\n",
      "Training data shape: (97, 64, 320, 1), Validation data shape: (25, 64, 320, 1)\n",
      "Fold 2 training loss: 0.020032959058880806\n",
      "y_true (val): [0 0 0 1 0]\n",
      "y_pred: [1 1 0 0 1]\n",
      "Appending results for fold 2: {'fold_index': 2, 'train_indices': [12, 19, 80, 97, 0, 93, 121, 100, 2, 7, 15, 65, 111, 115, 1, 56, 23, 119, 42, 8, 24, 10, 106, 34, 29, 17, 75, 94, 50, 73, 108, 28, 3, 116, 112, 47, 98, 85, 60, 76, 61, 63, 38, 109, 82, 69, 13, 41, 27, 62, 84, 5, 4, 79, 99, 86, 43, 35, 46, 114, 66, 26, 107, 57, 118, 32, 81, 120, 95, 58, 96, 110, 25, 54, 45, 103, 6, 30, 53, 92, 91, 74, 22, 83, 20, 21, 70, 16, 88, 49, 68, 36, 104, 102, 64, 14, 31], 'val_indices': [37, 48, 11, 77, 59, 44, 39, 90, 55, 9, 40, 87, 78, 105, 101, 113, 117, 67, 52, 51, 71, 72, 89, 18, 33], 'accuracy': 0.4, 'kappa': -0.18296529968454256, 'auc': 0.3974358974358974}\n",
      "Running fold 3 with 97 training samples and 25 validation samples\n",
      "Fold 3: train indices: [57 10  6 94 25], val indices: [66 36 58 43 52]\n",
      "Training data shape: (97, 64, 320, 1), Validation data shape: (25, 64, 320, 1)\n",
      "Fold 3 training loss: 0.04723377898335457\n",
      "y_true (val): [1 0 0 0 0]\n",
      "y_pred: [0 0 0 0 1]\n",
      "Appending results for fold 3: {'fold_index': 3, 'train_indices': [57, 10, 6, 94, 25, 50, 96, 111, 17, 70, 73, 101, 46, 92, 79, 78, 38, 19, 121, 11, 100, 118, 116, 103, 29, 71, 97, 119, 98, 54, 102, 82, 63, 120, 35, 105, 80, 114, 8, 76, 2, 33, 18, 3, 7, 74, 106, 95, 37, 108, 24, 22, 39, 86, 99, 110, 60, 113, 45, 4, 93, 117, 64, 47, 75, 55, 40, 115, 16, 28, 34, 5, 49, 0, 69, 51, 90, 14, 112, 61, 13, 20, 89, 32, 109, 62, 44, 87, 59, 21, 9, 81, 12, 30, 104, 53, 27], 'val_indices': [66, 36, 58, 43, 52, 65, 68, 77, 56, 72, 1, 67, 26, 88, 41, 23, 85, 84, 15, 31, 83, 107, 91, 42, 48], 'accuracy': 0.52, 'kappa': 0.032258064516129115, 'auc': 0.46794871794871795}\n",
      "Running fold 4 with 97 training samples and 25 validation samples\n",
      "Fold 4: train indices: [32 46  3 90 76], val indices: [  8  30 118  41  78]\n",
      "Training data shape: (97, 64, 320, 1), Validation data shape: (25, 64, 320, 1)\n",
      "Fold 4 training loss: 0.025792498141527176\n",
      "y_true (val): [0 0 1 0 1]\n",
      "y_pred: [0 1 0 1 1]\n",
      "Appending results for fold 4: {'fold_index': 4, 'train_indices': [32, 46, 3, 90, 76, 45, 94, 107, 10, 77, 86, 106, 96, 0, 21, 53, 109, 75, 36, 91, 61, 81, 9, 102, 110, 55, 50, 24, 54, 100, 5, 63, 95, 34, 121, 1, 64, 97, 82, 119, 35, 67, 11, 71, 111, 20, 38, 99, 16, 18, 85, 25, 40, 66, 4, 103, 98, 48, 70, 12, 83, 6, 29, 22, 113, 112, 101, 84, 60, 44, 116, 88, 93, 42, 13, 26, 27, 79, 57, 23, 7, 52, 92, 80, 104, 105, 59, 73, 115, 39, 47, 68, 31, 117, 14, 17, 51], 'val_indices': [8, 30, 118, 41, 78, 43, 19, 62, 58, 28, 49, 33, 65, 37, 87, 74, 120, 89, 56, 2, 108, 72, 15, 114, 69], 'accuracy': 0.44, 'kappa': -0.1146496815286624, 'auc': 0.37179487179487175}\n",
      "Final cross-validation results: {'params': [], 'mean_acc': 0.528, 'mean_kappa': 0.061, 'mean_auc': 0.522, 'mean_f1_left': array([0., 0., 0., 0., 0.]), 'mean_f1_right': array([0., 0., 0., 0., 0.]), 'mean_recall_left': array([0., 0., 0., 0., 0.]), 'mean_recall_right': array([0., 0., 0., 0., 0.]), 'mean_precision_left': array([0., 0., 0., 0., 0.]), 'mean_precision_right': array([0., 0., 0., 0., 0.]), 'all_folds': [{'fold_index': 0, 'train_indices': [46, 53, 65, 91, 13, 50, 11, 85, 67, 18, 95, 93, 106, 88, 103, 107, 92, 29, 24, 36, 110, 116, 62, 48, 16, 7, 109, 97, 96, 15, 112, 0, 102, 89, 80, 47, 63, 118, 100, 98, 44, 57, 28, 82, 90, 61, 52, 14, 17, 1, 41, 49, 87, 114, 120, 51, 43, 101, 33, 34, 22, 55, 21, 23, 37, 71, 3, 30, 77, 74, 8, 75, 115, 64, 10, 2, 119, 79, 70, 113, 111, 108, 58, 76, 5, 56, 60, 94, 78, 73, 6, 35, 42, 4, 32, 20, 86], 'val_indices': [38, 45, 117, 40, 104, 19, 68, 39, 83, 26, 12, 72, 25, 54, 84, 69, 66, 105, 81, 59, 31, 27, 99, 121, 9], 'accuracy': 0.64, 'kappa': 0.28115015974440893, 'auc': 0.6538461538461539}, {'fold_index': 1, 'train_indices': [89, 87, 10, 61, 28, 59, 69, 27, 68, 95, 81, 75, 108, 11, 76, 24, 93, 41, 1, 114, 32, 100, 60, 0, 21, 86, 65, 40, 23, 37, 29, 72, 39, 19, 98, 52, 12, 44, 121, 18, 71, 97, 42, 111, 38, 62, 115, 46, 36, 7, 74, 109, 66, 92, 6, 101, 83, 54, 77, 2, 13, 56, 120, 110, 25, 117, 63, 78, 91, 64, 14, 4, 30, 35, 43, 34, 22, 80, 55, 50, 118, 105, 102, 17, 113, 70, 45, 112, 107, 49, 33, 90, 58, 85, 96, 103, 53], 'val_indices': [5, 88, 104, 99, 73, 119, 106, 47, 67, 51, 9, 3, 84, 57, 31, 8, 15, 82, 79, 20, 116, 48, 16, 26, 94], 'accuracy': 0.64, 'kappa': 0.2902208201892744, 'auc': 0.717948717948718}, {'fold_index': 2, 'train_indices': [12, 19, 80, 97, 0, 93, 121, 100, 2, 7, 15, 65, 111, 115, 1, 56, 23, 119, 42, 8, 24, 10, 106, 34, 29, 17, 75, 94, 50, 73, 108, 28, 3, 116, 112, 47, 98, 85, 60, 76, 61, 63, 38, 109, 82, 69, 13, 41, 27, 62, 84, 5, 4, 79, 99, 86, 43, 35, 46, 114, 66, 26, 107, 57, 118, 32, 81, 120, 95, 58, 96, 110, 25, 54, 45, 103, 6, 30, 53, 92, 91, 74, 22, 83, 20, 21, 70, 16, 88, 49, 68, 36, 104, 102, 64, 14, 31], 'val_indices': [37, 48, 11, 77, 59, 44, 39, 90, 55, 9, 40, 87, 78, 105, 101, 113, 117, 67, 52, 51, 71, 72, 89, 18, 33], 'accuracy': 0.4, 'kappa': -0.18296529968454256, 'auc': 0.3974358974358974}, {'fold_index': 3, 'train_indices': [57, 10, 6, 94, 25, 50, 96, 111, 17, 70, 73, 101, 46, 92, 79, 78, 38, 19, 121, 11, 100, 118, 116, 103, 29, 71, 97, 119, 98, 54, 102, 82, 63, 120, 35, 105, 80, 114, 8, 76, 2, 33, 18, 3, 7, 74, 106, 95, 37, 108, 24, 22, 39, 86, 99, 110, 60, 113, 45, 4, 93, 117, 64, 47, 75, 55, 40, 115, 16, 28, 34, 5, 49, 0, 69, 51, 90, 14, 112, 61, 13, 20, 89, 32, 109, 62, 44, 87, 59, 21, 9, 81, 12, 30, 104, 53, 27], 'val_indices': [66, 36, 58, 43, 52, 65, 68, 77, 56, 72, 1, 67, 26, 88, 41, 23, 85, 84, 15, 31, 83, 107, 91, 42, 48], 'accuracy': 0.52, 'kappa': 0.032258064516129115, 'auc': 0.46794871794871795}, {'fold_index': 4, 'train_indices': [32, 46, 3, 90, 76, 45, 94, 107, 10, 77, 86, 106, 96, 0, 21, 53, 109, 75, 36, 91, 61, 81, 9, 102, 110, 55, 50, 24, 54, 100, 5, 63, 95, 34, 121, 1, 64, 97, 82, 119, 35, 67, 11, 71, 111, 20, 38, 99, 16, 18, 85, 25, 40, 66, 4, 103, 98, 48, 70, 12, 83, 6, 29, 22, 113, 112, 101, 84, 60, 44, 116, 88, 93, 42, 13, 26, 27, 79, 57, 23, 7, 52, 92, 80, 104, 105, 59, 73, 115, 39, 47, 68, 31, 117, 14, 17, 51], 'val_indices': [8, 30, 118, 41, 78, 43, 19, 62, 58, 28, 49, 33, 65, 37, 87, 74, 120, 89, 56, 2, 108, 72, 15, 114, 69], 'accuracy': 0.44, 'kappa': -0.1146496815286624, 'auc': 0.37179487179487175}], 'std_acc': 0.099, 'std_kappa': 0.196, 'std_auc': 0.139}\n",
      "sbj =  31\n",
      "Total trials loaded: 199\n",
      "Shape of X: (199, 64, 3584), Shape of y: (199,)\n",
      "Resampling from 512 to 128.0 Hz.\n",
      "X_train shape: (199, 64, 320, 1), y_train shape: (199,)\n",
      "Running fold 0 with 159 training samples and 40 validation samples\n",
      "Fold 0: train indices: [168 178  79  37 170], val indices: [ 31 161 177 133  76]\n",
      "Training data shape: (159, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 0 training loss: 0.05798913910984993\n",
      "y_true (val): [0 1 1 1 0]\n",
      "y_pred: [1 1 1 0 0]\n",
      "Appending results for fold 0: {'fold_index': 0, 'train_indices': [168, 178, 79, 37, 170, 84, 72, 20, 14, 4, 1, 130, 135, 109, 102, 182, 55, 166, 71, 108, 92, 47, 77, 179, 127, 114, 56, 58, 87, 115, 125, 21, 19, 185, 193, 0, 61, 104, 180, 23, 63, 2, 57, 96, 82, 171, 175, 78, 70, 28, 136, 18, 174, 159, 142, 162, 27, 181, 42, 197, 97, 62, 26, 117, 48, 43, 112, 81, 113, 98, 67, 86, 74, 24, 144, 22, 165, 36, 194, 139, 119, 145, 93, 191, 176, 106, 101, 123, 17, 50, 46, 38, 196, 190, 52, 156, 167, 157, 7, 8, 15, 100, 163, 9, 33, 29, 129, 13, 5, 183, 11, 94, 35, 187, 150, 160, 111, 95, 10, 107, 143, 32, 146, 116, 121, 105, 30, 34, 59, 80, 148, 124, 169, 65, 60, 186, 68, 138, 120, 118, 195, 189, 158, 89, 147, 41, 16, 3, 172, 188, 44, 173, 154, 53, 151, 192, 88, 164, 155], 'val_indices': [31, 161, 177, 133, 76, 75, 103, 12, 83, 110, 6, 66, 99, 85, 73, 54, 152, 149, 122, 39, 40, 184, 45, 140, 141, 137, 25, 51, 132, 128, 134, 153, 198, 131, 90, 64, 49, 126, 91, 69], 'accuracy': 0.7, 'kappa': 0.4, 'auc': 0.8049999999999999}\n",
      "New Max Found!\n",
      "Running fold 1 with 159 training samples and 40 validation samples\n",
      "Fold 1: train indices: [ 17 127  87 123 111], val indices: [ 99  95  57  92 135]\n",
      "Training data shape: (159, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 1 training loss: 0.03214958682656288\n",
      "y_true (val): [1 0 0 0 1]\n",
      "y_pred: [0 0 0 0 0]\n",
      "Appending results for fold 1: {'fold_index': 1, 'train_indices': [17, 127, 87, 123, 111, 73, 1, 126, 151, 164, 59, 68, 139, 20, 129, 81, 58, 193, 3, 69, 147, 51, 44, 165, 46, 172, 37, 169, 144, 119, 48, 65, 195, 171, 185, 24, 6, 30, 96, 180, 53, 89, 161, 101, 156, 187, 153, 150, 128, 192, 122, 10, 109, 74, 97, 154, 39, 27, 63, 84, 173, 186, 115, 168, 34, 71, 85, 176, 134, 45, 5, 35, 12, 182, 41, 191, 108, 145, 33, 64, 149, 102, 88, 142, 130, 107, 133, 175, 40, 121, 104, 47, 118, 36, 70, 167, 8, 131, 0, 4, 184, 188, 28, 146, 29, 178, 76, 105, 15, 26, 77, 11, 106, 197, 120, 66, 25, 23, 157, 75, 158, 190, 60, 50, 79, 140, 55, 43, 113, 114, 138, 82, 100, 93, 183, 9, 163, 83, 152, 56, 62, 196, 141, 125, 94, 98, 103, 49, 14, 19, 179, 72, 112, 52, 42, 137, 162, 124, 31], 'val_indices': [99, 95, 57, 92, 135, 90, 136, 18, 7, 148, 155, 116, 132, 91, 189, 174, 159, 78, 143, 110, 54, 117, 170, 166, 80, 2, 67, 177, 86, 16, 61, 194, 13, 181, 22, 32, 198, 160, 38, 21], 'accuracy': 0.7, 'kappa': 0.4, 'auc': 0.7175}\n",
      "Running fold 2 with 159 training samples and 40 validation samples\n",
      "Fold 2: train indices: [ 94  85  87 178 144], val indices: [ 33 151 152  83 170]\n",
      "Training data shape: (159, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 2 training loss: 0.03332589566707611\n",
      "y_true (val): [0 1 1 0 1]\n",
      "y_pred: [0 1 1 0 0]\n",
      "Appending results for fold 2: {'fold_index': 2, 'train_indices': [94, 85, 87, 178, 144, 163, 24, 135, 187, 36, 89, 190, 32, 157, 177, 174, 173, 181, 117, 58, 120, 26, 105, 184, 91, 98, 69, 65, 1, 3, 68, 84, 107, 124, 38, 77, 81, 164, 44, 42, 93, 179, 70, 43, 142, 39, 101, 153, 171, 75, 197, 114, 145, 140, 112, 166, 122, 66, 34, 110, 51, 60, 121, 74, 56, 185, 116, 143, 118, 82, 99, 165, 167, 90, 182, 106, 154, 46, 141, 175, 97, 72, 49, 52, 78, 22, 17, 80, 137, 0, 161, 189, 160, 156, 172, 108, 95, 71, 67, 96, 127, 136, 79, 53, 129, 146, 40, 4, 123, 20, 30, 102, 55, 176, 64, 159, 35, 192, 125, 31, 104, 86, 92, 126, 195, 133, 193, 16, 128, 73, 14, 19, 2, 7, 194, 168, 196, 23, 155, 198, 15, 28, 37, 13, 188, 109, 150, 25, 10, 147, 130, 63, 100, 134, 11, 59, 41, 27, 132], 'val_indices': [33, 151, 152, 83, 170, 5, 169, 21, 12, 29, 180, 6, 149, 9, 48, 183, 54, 119, 158, 113, 115, 186, 8, 148, 61, 50, 88, 138, 103, 45, 47, 131, 111, 76, 62, 162, 18, 139, 191, 57], 'accuracy': 0.75, 'kappa': 0.5, 'auc': 0.7949999999999999}\n",
      "New Max Found!\n",
      "Running fold 3 with 159 training samples and 40 validation samples\n",
      "Fold 3: train indices: [ 63  71  75 107  94], val indices: [123 181  96  27 133]\n",
      "Training data shape: (159, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 3 training loss: 0.049695324152708054\n",
      "y_true (val): [1 1 0 0 1]\n",
      "y_pred: [1 0 1 0 0]\n",
      "Appending results for fold 3: {'fold_index': 3, 'train_indices': [63, 71, 75, 107, 94, 22, 73, 138, 100, 117, 15, 112, 196, 119, 59, 190, 45, 31, 61, 146, 30, 38, 99, 188, 160, 105, 54, 103, 8, 92, 47, 137, 52, 89, 171, 186, 65, 87, 29, 62, 40, 116, 16, 134, 26, 118, 102, 173, 1, 145, 97, 142, 35, 132, 184, 4, 198, 172, 82, 106, 9, 17, 135, 72, 110, 66, 12, 34, 149, 189, 150, 21, 129, 53, 48, 50, 83, 81, 74, 120, 157, 152, 156, 131, 130, 86, 85, 60, 178, 109, 77, 44, 18, 158, 0, 25, 41, 174, 37, 127, 147, 98, 93, 13, 56, 55, 148, 170, 91, 164, 180, 3, 24, 161, 153, 11, 6, 192, 108, 49, 88, 144, 122, 195, 141, 169, 84, 76, 95, 32, 197, 78, 194, 139, 176, 175, 23, 33, 167, 7, 69, 28, 163, 111, 124, 182, 159, 121, 125, 179, 177, 166, 126, 43, 10, 140, 185, 68, 165], 'val_indices': [123, 181, 96, 27, 133, 151, 193, 14, 154, 155, 36, 143, 114, 79, 39, 183, 5, 80, 115, 191, 46, 187, 57, 58, 136, 90, 104, 64, 70, 19, 20, 2, 51, 42, 168, 67, 101, 128, 113, 162], 'accuracy': 0.5, 'kappa': 0.0, 'auc': 0.5175}\n",
      "Running fold 4 with 159 training samples and 40 validation samples\n",
      "Fold 4: train indices: [144  37 124 181  93], val indices: [ 56 163   5  40 133]\n",
      "Training data shape: (159, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 4 training loss: 0.05334541201591492\n",
      "y_true (val): [0 1 0 0 1]\n",
      "y_pred: [0 1 0 0 1]\n",
      "Appending results for fold 4: {'fold_index': 4, 'train_indices': [144, 37, 124, 181, 93, 137, 103, 61, 59, 105, 196, 39, 95, 23, 170, 64, 164, 160, 121, 143, 10, 184, 35, 14, 82, 116, 69, 97, 157, 175, 107, 52, 177, 149, 114, 85, 109, 67, 167, 189, 47, 76, 173, 113, 38, 15, 48, 6, 30, 117, 150, 178, 108, 80, 155, 147, 190, 195, 16, 132, 161, 98, 21, 34, 51, 55, 77, 58, 192, 94, 191, 74, 88, 130, 89, 148, 153, 176, 36, 128, 60, 118, 87, 102, 28, 120, 27, 182, 194, 8, 162, 125, 115, 53, 96, 129, 166, 135, 197, 75, 7, 101, 0, 136, 169, 140, 44, 104, 86, 100, 25, 188, 12, 13, 68, 54, 154, 174, 46, 24, 111, 83, 63, 57, 31, 180, 11, 72, 4, 49, 3, 84, 186, 142, 134, 20, 9, 73, 156, 18, 185, 50, 198, 183, 70, 22, 106, 146, 66, 187, 126, 90, 26, 110, 172, 45, 158, 71, 99], 'val_indices': [56, 163, 5, 40, 133, 145, 17, 1, 19, 42, 65, 131, 32, 159, 41, 171, 79, 141, 112, 62, 152, 92, 91, 179, 165, 168, 33, 151, 193, 127, 78, 29, 43, 139, 122, 138, 119, 2, 81, 123], 'accuracy': 0.7, 'kappa': 0.4, 'auc': 0.795}\n",
      "Final cross-validation results: {'params': [], 'mean_acc': 0.67, 'mean_kappa': 0.34, 'mean_auc': 0.726, 'mean_f1_left': array([0., 0., 0., 0., 0.]), 'mean_f1_right': array([0., 0., 0., 0., 0.]), 'mean_recall_left': array([0., 0., 0., 0., 0.]), 'mean_recall_right': array([0., 0., 0., 0., 0.]), 'mean_precision_left': array([0., 0., 0., 0., 0.]), 'mean_precision_right': array([0., 0., 0., 0., 0.]), 'all_folds': [{'fold_index': 0, 'train_indices': [168, 178, 79, 37, 170, 84, 72, 20, 14, 4, 1, 130, 135, 109, 102, 182, 55, 166, 71, 108, 92, 47, 77, 179, 127, 114, 56, 58, 87, 115, 125, 21, 19, 185, 193, 0, 61, 104, 180, 23, 63, 2, 57, 96, 82, 171, 175, 78, 70, 28, 136, 18, 174, 159, 142, 162, 27, 181, 42, 197, 97, 62, 26, 117, 48, 43, 112, 81, 113, 98, 67, 86, 74, 24, 144, 22, 165, 36, 194, 139, 119, 145, 93, 191, 176, 106, 101, 123, 17, 50, 46, 38, 196, 190, 52, 156, 167, 157, 7, 8, 15, 100, 163, 9, 33, 29, 129, 13, 5, 183, 11, 94, 35, 187, 150, 160, 111, 95, 10, 107, 143, 32, 146, 116, 121, 105, 30, 34, 59, 80, 148, 124, 169, 65, 60, 186, 68, 138, 120, 118, 195, 189, 158, 89, 147, 41, 16, 3, 172, 188, 44, 173, 154, 53, 151, 192, 88, 164, 155], 'val_indices': [31, 161, 177, 133, 76, 75, 103, 12, 83, 110, 6, 66, 99, 85, 73, 54, 152, 149, 122, 39, 40, 184, 45, 140, 141, 137, 25, 51, 132, 128, 134, 153, 198, 131, 90, 64, 49, 126, 91, 69], 'accuracy': 0.7, 'kappa': 0.4, 'auc': 0.8049999999999999}, {'fold_index': 1, 'train_indices': [17, 127, 87, 123, 111, 73, 1, 126, 151, 164, 59, 68, 139, 20, 129, 81, 58, 193, 3, 69, 147, 51, 44, 165, 46, 172, 37, 169, 144, 119, 48, 65, 195, 171, 185, 24, 6, 30, 96, 180, 53, 89, 161, 101, 156, 187, 153, 150, 128, 192, 122, 10, 109, 74, 97, 154, 39, 27, 63, 84, 173, 186, 115, 168, 34, 71, 85, 176, 134, 45, 5, 35, 12, 182, 41, 191, 108, 145, 33, 64, 149, 102, 88, 142, 130, 107, 133, 175, 40, 121, 104, 47, 118, 36, 70, 167, 8, 131, 0, 4, 184, 188, 28, 146, 29, 178, 76, 105, 15, 26, 77, 11, 106, 197, 120, 66, 25, 23, 157, 75, 158, 190, 60, 50, 79, 140, 55, 43, 113, 114, 138, 82, 100, 93, 183, 9, 163, 83, 152, 56, 62, 196, 141, 125, 94, 98, 103, 49, 14, 19, 179, 72, 112, 52, 42, 137, 162, 124, 31], 'val_indices': [99, 95, 57, 92, 135, 90, 136, 18, 7, 148, 155, 116, 132, 91, 189, 174, 159, 78, 143, 110, 54, 117, 170, 166, 80, 2, 67, 177, 86, 16, 61, 194, 13, 181, 22, 32, 198, 160, 38, 21], 'accuracy': 0.7, 'kappa': 0.4, 'auc': 0.7175}, {'fold_index': 2, 'train_indices': [94, 85, 87, 178, 144, 163, 24, 135, 187, 36, 89, 190, 32, 157, 177, 174, 173, 181, 117, 58, 120, 26, 105, 184, 91, 98, 69, 65, 1, 3, 68, 84, 107, 124, 38, 77, 81, 164, 44, 42, 93, 179, 70, 43, 142, 39, 101, 153, 171, 75, 197, 114, 145, 140, 112, 166, 122, 66, 34, 110, 51, 60, 121, 74, 56, 185, 116, 143, 118, 82, 99, 165, 167, 90, 182, 106, 154, 46, 141, 175, 97, 72, 49, 52, 78, 22, 17, 80, 137, 0, 161, 189, 160, 156, 172, 108, 95, 71, 67, 96, 127, 136, 79, 53, 129, 146, 40, 4, 123, 20, 30, 102, 55, 176, 64, 159, 35, 192, 125, 31, 104, 86, 92, 126, 195, 133, 193, 16, 128, 73, 14, 19, 2, 7, 194, 168, 196, 23, 155, 198, 15, 28, 37, 13, 188, 109, 150, 25, 10, 147, 130, 63, 100, 134, 11, 59, 41, 27, 132], 'val_indices': [33, 151, 152, 83, 170, 5, 169, 21, 12, 29, 180, 6, 149, 9, 48, 183, 54, 119, 158, 113, 115, 186, 8, 148, 61, 50, 88, 138, 103, 45, 47, 131, 111, 76, 62, 162, 18, 139, 191, 57], 'accuracy': 0.75, 'kappa': 0.5, 'auc': 0.7949999999999999}, {'fold_index': 3, 'train_indices': [63, 71, 75, 107, 94, 22, 73, 138, 100, 117, 15, 112, 196, 119, 59, 190, 45, 31, 61, 146, 30, 38, 99, 188, 160, 105, 54, 103, 8, 92, 47, 137, 52, 89, 171, 186, 65, 87, 29, 62, 40, 116, 16, 134, 26, 118, 102, 173, 1, 145, 97, 142, 35, 132, 184, 4, 198, 172, 82, 106, 9, 17, 135, 72, 110, 66, 12, 34, 149, 189, 150, 21, 129, 53, 48, 50, 83, 81, 74, 120, 157, 152, 156, 131, 130, 86, 85, 60, 178, 109, 77, 44, 18, 158, 0, 25, 41, 174, 37, 127, 147, 98, 93, 13, 56, 55, 148, 170, 91, 164, 180, 3, 24, 161, 153, 11, 6, 192, 108, 49, 88, 144, 122, 195, 141, 169, 84, 76, 95, 32, 197, 78, 194, 139, 176, 175, 23, 33, 167, 7, 69, 28, 163, 111, 124, 182, 159, 121, 125, 179, 177, 166, 126, 43, 10, 140, 185, 68, 165], 'val_indices': [123, 181, 96, 27, 133, 151, 193, 14, 154, 155, 36, 143, 114, 79, 39, 183, 5, 80, 115, 191, 46, 187, 57, 58, 136, 90, 104, 64, 70, 19, 20, 2, 51, 42, 168, 67, 101, 128, 113, 162], 'accuracy': 0.5, 'kappa': 0.0, 'auc': 0.5175}, {'fold_index': 4, 'train_indices': [144, 37, 124, 181, 93, 137, 103, 61, 59, 105, 196, 39, 95, 23, 170, 64, 164, 160, 121, 143, 10, 184, 35, 14, 82, 116, 69, 97, 157, 175, 107, 52, 177, 149, 114, 85, 109, 67, 167, 189, 47, 76, 173, 113, 38, 15, 48, 6, 30, 117, 150, 178, 108, 80, 155, 147, 190, 195, 16, 132, 161, 98, 21, 34, 51, 55, 77, 58, 192, 94, 191, 74, 88, 130, 89, 148, 153, 176, 36, 128, 60, 118, 87, 102, 28, 120, 27, 182, 194, 8, 162, 125, 115, 53, 96, 129, 166, 135, 197, 75, 7, 101, 0, 136, 169, 140, 44, 104, 86, 100, 25, 188, 12, 13, 68, 54, 154, 174, 46, 24, 111, 83, 63, 57, 31, 180, 11, 72, 4, 49, 3, 84, 186, 142, 134, 20, 9, 73, 156, 18, 185, 50, 198, 183, 70, 22, 106, 146, 66, 187, 126, 90, 26, 110, 172, 45, 158, 71, 99], 'val_indices': [56, 163, 5, 40, 133, 145, 17, 1, 19, 42, 65, 131, 32, 159, 41, 171, 79, 141, 112, 62, 152, 92, 91, 179, 165, 168, 33, 151, 193, 127, 78, 29, 43, 139, 122, 138, 119, 2, 81, 123], 'accuracy': 0.7, 'kappa': 0.4, 'auc': 0.795}], 'std_acc': 0.087, 'std_kappa': 0.174, 'std_auc': 0.109}\n",
      "sbj =  33\n",
      "Total trials loaded: 199\n",
      "Shape of X: (199, 64, 3584), Shape of y: (199,)\n",
      "Resampling from 512 to 128.0 Hz.\n",
      "X_train shape: (199, 64, 320, 1), y_train shape: (199,)\n",
      "Running fold 0 with 159 training samples and 40 validation samples\n",
      "Fold 0: train indices: [  4 142 183  71  50], val indices: [ 25 104  31 154  83]\n",
      "Training data shape: (159, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 0 training loss: 0.03617601841688156\n",
      "y_true (val): [0 1 0 1 0]\n",
      "y_pred: [1 1 0 0 0]\n",
      "Appending results for fold 0: {'fold_index': 0, 'train_indices': [4, 142, 183, 71, 50, 179, 125, 102, 117, 60, 82, 55, 89, 21, 157, 47, 5, 42, 11, 19, 23, 172, 143, 99, 140, 34, 146, 198, 48, 147, 93, 2, 182, 138, 43, 57, 158, 187, 128, 18, 160, 33, 97, 14, 44, 177, 195, 61, 56, 174, 46, 67, 8, 101, 7, 41, 129, 131, 197, 98, 190, 74, 169, 24, 159, 173, 15, 70, 163, 58, 186, 72, 27, 87, 81, 26, 122, 96, 120, 65, 119, 193, 123, 167, 94, 130, 135, 77, 115, 175, 20, 37, 16, 0, 180, 144, 52, 145, 106, 139, 63, 9, 36, 153, 126, 17, 59, 29, 164, 30, 85, 148, 53, 79, 38, 118, 124, 192, 171, 35, 13, 151, 110, 95, 149, 136, 165, 168, 156, 88, 84, 92, 3, 121, 114, 189, 1, 10, 194, 28, 196, 103, 137, 152, 113, 112, 32, 184, 62, 78, 68, 176, 161, 22, 155, 108, 80, 181, 166], 'val_indices': [25, 104, 31, 154, 83, 86, 162, 75, 191, 105, 76, 12, 100, 178, 73, 6, 66, 54, 116, 188, 91, 51, 132, 39, 107, 40, 134, 170, 45, 109, 185, 141, 127, 150, 111, 69, 133, 90, 64, 49], 'accuracy': 0.6, 'kappa': 0.19999999999999996, 'auc': 0.6299999999999999}\n",
      "New Max Found!\n",
      "Running fold 1 with 159 training samples and 40 validation samples\n",
      "Fold 1: train indices: [ 84 185  70 103 140], val indices: [160  16  76   2 101]\n",
      "Training data shape: (159, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 1 training loss: 0.07120677828788757\n",
      "y_true (val): [1 0 0 0 1]\n",
      "y_pred: [1 1 1 1 0]\n",
      "Appending results for fold 1: {'fold_index': 1, 'train_indices': [84, 185, 70, 103, 140, 79, 4, 150, 142, 172, 11, 15, 135, 87, 154, 55, 94, 114, 86, 47, 124, 21, 56, 176, 92, 109, 39, 158, 113, 129, 19, 50, 110, 108, 184, 25, 88, 14, 60, 130, 17, 49, 153, 186, 192, 159, 107, 105, 138, 121, 194, 34, 104, 65, 12, 128, 30, 40, 38, 77, 125, 102, 141, 132, 68, 24, 71, 180, 168, 36, 27, 96, 66, 169, 81, 143, 139, 63, 99, 10, 174, 145, 5, 115, 146, 196, 122, 148, 9, 166, 155, 53, 181, 75, 52, 123, 43, 170, 59, 35, 164, 198, 93, 106, 3, 183, 33, 165, 74, 37, 1, 48, 179, 147, 126, 72, 62, 0, 162, 83, 119, 152, 23, 95, 73, 191, 44, 58, 120, 127, 157, 20, 163, 69, 189, 26, 112, 6, 134, 29, 64, 177, 187, 173, 28, 45, 193, 8, 46, 31, 116, 85, 131, 51, 32, 188, 197, 151, 42], 'val_indices': [160, 16, 76, 2, 101, 7, 182, 41, 54, 156, 117, 190, 144, 78, 167, 171, 175, 82, 118, 161, 91, 137, 149, 195, 67, 22, 57, 100, 90, 18, 80, 136, 98, 111, 89, 13, 178, 133, 97, 61], 'accuracy': 0.475, 'kappa': -0.050000000000000044, 'auc': 0.42000000000000004}\n",
      "Running fold 2 with 159 training samples and 40 validation samples\n",
      "Fold 2: train indices: [ 90  13  93 178 100], val indices: [ 33 152 153  83 171]\n",
      "Training data shape: (159, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 2 training loss: 0.013647946529090405\n",
      "y_true (val): [0 1 1 0 1]\n",
      "y_pred: [0 0 1 0 0]\n",
      "Appending results for fold 2: {'fold_index': 2, 'train_indices': [90, 13, 93, 178, 100, 119, 79, 138, 187, 72, 3, 148, 32, 174, 196, 127, 172, 192, 147, 22, 102, 16, 130, 134, 81, 92, 84, 70, 26, 89, 99, 85, 181, 125, 86, 98, 82, 165, 40, 53, 46, 179, 69, 59, 176, 63, 109, 105, 106, 78, 197, 177, 185, 143, 113, 164, 123, 67, 74, 144, 52, 96, 122, 75, 37, 108, 167, 115, 142, 1, 107, 166, 175, 49, 118, 188, 169, 30, 145, 155, 39, 77, 94, 87, 38, 41, 80, 17, 182, 0, 162, 146, 161, 190, 173, 103, 66, 95, 55, 68, 111, 137, 15, 44, 136, 198, 64, 4, 124, 20, 43, 195, 42, 160, 51, 168, 73, 157, 151, 31, 189, 36, 19, 141, 154, 121, 193, 24, 135, 58, 14, 34, 2, 7, 194, 131, 129, 23, 156, 184, 71, 65, 28, 91, 158, 110, 117, 35, 10, 126, 25, 97, 101, 128, 11, 60, 56, 27, 133], 'val_indices': [33, 152, 153, 83, 171, 5, 170, 21, 12, 29, 180, 6, 150, 9, 48, 183, 54, 120, 159, 114, 116, 186, 8, 149, 61, 50, 88, 139, 104, 45, 47, 132, 112, 76, 62, 163, 18, 140, 191, 57], 'accuracy': 0.4, 'kappa': -0.19999999999999996, 'auc': 0.395}\n",
      "Running fold 3 with 159 training samples and 40 validation samples\n",
      "Fold 3: train indices: [ 40  48  69 131   8], val indices: [182 152  97  27 114]\n",
      "Training data shape: (159, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 3 training loss: 0.026207398623228073\n",
      "y_true (val): [1 1 0 0 1]\n",
      "y_pred: [0 0 0 0 1]\n",
      "Appending results for fold 3: {'fold_index': 3, 'train_indices': [40, 48, 69, 131, 8, 44, 60, 103, 127, 125, 74, 148, 123, 165, 29, 135, 34, 38, 22, 132, 72, 45, 128, 140, 185, 149, 66, 172, 28, 73, 92, 154, 96, 23, 157, 171, 91, 32, 33, 43, 25, 175, 4, 167, 37, 145, 113, 168, 1, 180, 21, 111, 52, 178, 198, 68, 153, 136, 12, 139, 53, 49, 141, 35, 142, 15, 50, 54, 160, 159, 101, 7, 197, 0, 89, 55, 56, 10, 98, 122, 106, 191, 158, 138, 176, 63, 88, 83, 117, 130, 81, 65, 61, 108, 78, 26, 47, 104, 9, 196, 170, 31, 94, 71, 77, 18, 187, 166, 75, 162, 150, 86, 85, 183, 173, 3, 84, 181, 190, 82, 95, 174, 100, 107, 133, 179, 24, 76, 41, 62, 134, 6, 143, 112, 121, 30, 11, 99, 177, 93, 87, 13, 120, 109, 189, 186, 118, 110, 161, 164, 137, 194, 126, 16, 59, 119, 151, 17, 146], 'val_indices': [182, 152, 97, 27, 114, 155, 124, 14, 169, 195, 36, 102, 129, 79, 39, 105, 5, 80, 193, 144, 46, 192, 57, 58, 184, 90, 116, 64, 70, 19, 20, 2, 51, 42, 115, 67, 156, 147, 163, 188], 'accuracy': 0.625, 'kappa': 0.25, 'auc': 0.64}\n",
      "New Max Found!\n",
      "Running fold 4 with 159 training samples and 40 validation samples\n",
      "Fold 4: train indices: [178  87 170 167  99], val indices: [ 56 132   5  40 169]\n",
      "Training data shape: (159, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 4 training loss: 0.10739772766828537\n",
      "y_true (val): [0 1 0 0 1]\n",
      "y_pred: [0 0 0 0 0]\n",
      "Appending results for fold 4: {'fold_index': 4, 'train_indices': [178, 87, 170, 167, 99, 118, 115, 44, 26, 151, 190, 28, 64, 30, 135, 54, 176, 157, 155, 165, 67, 174, 55, 73, 77, 143, 36, 85, 100, 131, 195, 82, 145, 122, 198, 13, 149, 83, 126, 153, 71, 6, 161, 189, 12, 4, 39, 95, 80, 105, 112, 116, 163, 57, 187, 137, 171, 140, 47, 107, 111, 14, 91, 45, 98, 10, 60, 50, 181, 25, 101, 76, 58, 173, 53, 130, 127, 183, 89, 103, 22, 110, 34, 119, 70, 186, 37, 75, 184, 27, 102, 177, 129, 90, 74, 154, 104, 117, 156, 20, 86, 144, 9, 191, 136, 158, 66, 175, 49, 114, 48, 162, 96, 8, 69, 63, 125, 188, 52, 31, 168, 11, 46, 61, 38, 196, 84, 59, 15, 88, 18, 68, 141, 159, 150, 0, 3, 35, 133, 97, 147, 21, 185, 109, 23, 51, 192, 121, 72, 160, 148, 16, 94, 193, 179, 7, 138, 24, 182], 'val_indices': [56, 132, 5, 40, 169, 142, 17, 1, 19, 42, 65, 180, 32, 139, 41, 128, 79, 106, 134, 62, 166, 93, 92, 120, 194, 108, 33, 146, 124, 123, 78, 29, 43, 197, 152, 164, 113, 2, 81, 172], 'accuracy': 0.45, 'kappa': -0.10000000000000009, 'auc': 0.41500000000000004}\n",
      "Final cross-validation results: {'params': [], 'mean_acc': 0.51, 'mean_kappa': 0.02, 'mean_auc': 0.5, 'mean_f1_left': array([0., 0., 0., 0., 0.]), 'mean_f1_right': array([0., 0., 0., 0., 0.]), 'mean_recall_left': array([0., 0., 0., 0., 0.]), 'mean_recall_right': array([0., 0., 0., 0., 0.]), 'mean_precision_left': array([0., 0., 0., 0., 0.]), 'mean_precision_right': array([0., 0., 0., 0., 0.]), 'all_folds': [{'fold_index': 0, 'train_indices': [4, 142, 183, 71, 50, 179, 125, 102, 117, 60, 82, 55, 89, 21, 157, 47, 5, 42, 11, 19, 23, 172, 143, 99, 140, 34, 146, 198, 48, 147, 93, 2, 182, 138, 43, 57, 158, 187, 128, 18, 160, 33, 97, 14, 44, 177, 195, 61, 56, 174, 46, 67, 8, 101, 7, 41, 129, 131, 197, 98, 190, 74, 169, 24, 159, 173, 15, 70, 163, 58, 186, 72, 27, 87, 81, 26, 122, 96, 120, 65, 119, 193, 123, 167, 94, 130, 135, 77, 115, 175, 20, 37, 16, 0, 180, 144, 52, 145, 106, 139, 63, 9, 36, 153, 126, 17, 59, 29, 164, 30, 85, 148, 53, 79, 38, 118, 124, 192, 171, 35, 13, 151, 110, 95, 149, 136, 165, 168, 156, 88, 84, 92, 3, 121, 114, 189, 1, 10, 194, 28, 196, 103, 137, 152, 113, 112, 32, 184, 62, 78, 68, 176, 161, 22, 155, 108, 80, 181, 166], 'val_indices': [25, 104, 31, 154, 83, 86, 162, 75, 191, 105, 76, 12, 100, 178, 73, 6, 66, 54, 116, 188, 91, 51, 132, 39, 107, 40, 134, 170, 45, 109, 185, 141, 127, 150, 111, 69, 133, 90, 64, 49], 'accuracy': 0.6, 'kappa': 0.19999999999999996, 'auc': 0.6299999999999999}, {'fold_index': 1, 'train_indices': [84, 185, 70, 103, 140, 79, 4, 150, 142, 172, 11, 15, 135, 87, 154, 55, 94, 114, 86, 47, 124, 21, 56, 176, 92, 109, 39, 158, 113, 129, 19, 50, 110, 108, 184, 25, 88, 14, 60, 130, 17, 49, 153, 186, 192, 159, 107, 105, 138, 121, 194, 34, 104, 65, 12, 128, 30, 40, 38, 77, 125, 102, 141, 132, 68, 24, 71, 180, 168, 36, 27, 96, 66, 169, 81, 143, 139, 63, 99, 10, 174, 145, 5, 115, 146, 196, 122, 148, 9, 166, 155, 53, 181, 75, 52, 123, 43, 170, 59, 35, 164, 198, 93, 106, 3, 183, 33, 165, 74, 37, 1, 48, 179, 147, 126, 72, 62, 0, 162, 83, 119, 152, 23, 95, 73, 191, 44, 58, 120, 127, 157, 20, 163, 69, 189, 26, 112, 6, 134, 29, 64, 177, 187, 173, 28, 45, 193, 8, 46, 31, 116, 85, 131, 51, 32, 188, 197, 151, 42], 'val_indices': [160, 16, 76, 2, 101, 7, 182, 41, 54, 156, 117, 190, 144, 78, 167, 171, 175, 82, 118, 161, 91, 137, 149, 195, 67, 22, 57, 100, 90, 18, 80, 136, 98, 111, 89, 13, 178, 133, 97, 61], 'accuracy': 0.475, 'kappa': -0.050000000000000044, 'auc': 0.42000000000000004}, {'fold_index': 2, 'train_indices': [90, 13, 93, 178, 100, 119, 79, 138, 187, 72, 3, 148, 32, 174, 196, 127, 172, 192, 147, 22, 102, 16, 130, 134, 81, 92, 84, 70, 26, 89, 99, 85, 181, 125, 86, 98, 82, 165, 40, 53, 46, 179, 69, 59, 176, 63, 109, 105, 106, 78, 197, 177, 185, 143, 113, 164, 123, 67, 74, 144, 52, 96, 122, 75, 37, 108, 167, 115, 142, 1, 107, 166, 175, 49, 118, 188, 169, 30, 145, 155, 39, 77, 94, 87, 38, 41, 80, 17, 182, 0, 162, 146, 161, 190, 173, 103, 66, 95, 55, 68, 111, 137, 15, 44, 136, 198, 64, 4, 124, 20, 43, 195, 42, 160, 51, 168, 73, 157, 151, 31, 189, 36, 19, 141, 154, 121, 193, 24, 135, 58, 14, 34, 2, 7, 194, 131, 129, 23, 156, 184, 71, 65, 28, 91, 158, 110, 117, 35, 10, 126, 25, 97, 101, 128, 11, 60, 56, 27, 133], 'val_indices': [33, 152, 153, 83, 171, 5, 170, 21, 12, 29, 180, 6, 150, 9, 48, 183, 54, 120, 159, 114, 116, 186, 8, 149, 61, 50, 88, 139, 104, 45, 47, 132, 112, 76, 62, 163, 18, 140, 191, 57], 'accuracy': 0.4, 'kappa': -0.19999999999999996, 'auc': 0.395}, {'fold_index': 3, 'train_indices': [40, 48, 69, 131, 8, 44, 60, 103, 127, 125, 74, 148, 123, 165, 29, 135, 34, 38, 22, 132, 72, 45, 128, 140, 185, 149, 66, 172, 28, 73, 92, 154, 96, 23, 157, 171, 91, 32, 33, 43, 25, 175, 4, 167, 37, 145, 113, 168, 1, 180, 21, 111, 52, 178, 198, 68, 153, 136, 12, 139, 53, 49, 141, 35, 142, 15, 50, 54, 160, 159, 101, 7, 197, 0, 89, 55, 56, 10, 98, 122, 106, 191, 158, 138, 176, 63, 88, 83, 117, 130, 81, 65, 61, 108, 78, 26, 47, 104, 9, 196, 170, 31, 94, 71, 77, 18, 187, 166, 75, 162, 150, 86, 85, 183, 173, 3, 84, 181, 190, 82, 95, 174, 100, 107, 133, 179, 24, 76, 41, 62, 134, 6, 143, 112, 121, 30, 11, 99, 177, 93, 87, 13, 120, 109, 189, 186, 118, 110, 161, 164, 137, 194, 126, 16, 59, 119, 151, 17, 146], 'val_indices': [182, 152, 97, 27, 114, 155, 124, 14, 169, 195, 36, 102, 129, 79, 39, 105, 5, 80, 193, 144, 46, 192, 57, 58, 184, 90, 116, 64, 70, 19, 20, 2, 51, 42, 115, 67, 156, 147, 163, 188], 'accuracy': 0.625, 'kappa': 0.25, 'auc': 0.64}, {'fold_index': 4, 'train_indices': [178, 87, 170, 167, 99, 118, 115, 44, 26, 151, 190, 28, 64, 30, 135, 54, 176, 157, 155, 165, 67, 174, 55, 73, 77, 143, 36, 85, 100, 131, 195, 82, 145, 122, 198, 13, 149, 83, 126, 153, 71, 6, 161, 189, 12, 4, 39, 95, 80, 105, 112, 116, 163, 57, 187, 137, 171, 140, 47, 107, 111, 14, 91, 45, 98, 10, 60, 50, 181, 25, 101, 76, 58, 173, 53, 130, 127, 183, 89, 103, 22, 110, 34, 119, 70, 186, 37, 75, 184, 27, 102, 177, 129, 90, 74, 154, 104, 117, 156, 20, 86, 144, 9, 191, 136, 158, 66, 175, 49, 114, 48, 162, 96, 8, 69, 63, 125, 188, 52, 31, 168, 11, 46, 61, 38, 196, 84, 59, 15, 88, 18, 68, 141, 159, 150, 0, 3, 35, 133, 97, 147, 21, 185, 109, 23, 51, 192, 121, 72, 160, 148, 16, 94, 193, 179, 7, 138, 24, 182], 'val_indices': [56, 132, 5, 40, 169, 142, 17, 1, 19, 42, 65, 180, 32, 139, 41, 128, 79, 106, 134, 62, 166, 93, 92, 120, 194, 108, 33, 146, 124, 123, 78, 29, 43, 197, 152, 164, 113, 2, 81, 172], 'accuracy': 0.45, 'kappa': -0.10000000000000009, 'auc': 0.41500000000000004}], 'std_acc': 0.087, 'std_kappa': 0.175, 'std_auc': 0.111}\n",
      "sbj =  35\n",
      "Total trials loaded: 200\n",
      "Shape of X: (200, 64, 3584), Shape of y: (200,)\n",
      "Resampling from 512 to 128.0 Hz.\n",
      "X_train shape: (200, 64, 320, 1), y_train shape: (200,)\n",
      "Running fold 0 with 160 training samples and 40 validation samples\n",
      "Fold 0: train indices: [  4 142 183  71  50], val indices: [ 25 107  31 188  83]\n",
      "Training data shape: (160, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 0 training loss: 0.013698846101760864\n",
      "y_true (val): [0 1 0 1 0]\n",
      "y_pred: [0 1 0 1 0]\n",
      "Appending results for fold 0: {'fold_index': 0, 'train_indices': [4, 142, 183, 71, 50, 179, 125, 131, 117, 60, 82, 55, 89, 21, 157, 47, 5, 42, 11, 19, 23, 172, 148, 99, 140, 34, 146, 115, 48, 147, 93, 2, 182, 138, 43, 57, 158, 187, 128, 18, 160, 33, 97, 14, 44, 177, 196, 61, 56, 174, 46, 67, 8, 101, 7, 41, 129, 184, 198, 98, 190, 74, 169, 24, 159, 173, 15, 70, 163, 58, 186, 72, 27, 87, 81, 26, 122, 96, 120, 65, 119, 102, 123, 167, 94, 130, 135, 77, 192, 175, 20, 37, 16, 0, 180, 144, 52, 145, 106, 139, 63, 9, 36, 153, 126, 17, 59, 29, 164, 30, 85, 156, 53, 79, 38, 118, 124, 193, 171, 35, 13, 151, 110, 95, 149, 136, 165, 168, 109, 88, 84, 92, 3, 121, 114, 143, 1, 10, 195, 28, 197, 103, 137, 152, 113, 112, 32, 189, 62, 199, 78, 68, 176, 161, 22, 155, 108, 80, 181, 166], 'val_indices': [25, 107, 31, 188, 83, 86, 111, 75, 191, 170, 76, 12, 100, 154, 73, 6, 66, 54, 104, 162, 91, 51, 132, 39, 105, 40, 134, 141, 45, 116, 185, 178, 127, 150, 194, 69, 133, 90, 64, 49], 'accuracy': 0.925, 'kappa': 0.85, 'auc': 0.9725}\n",
      "New Max Found!\n",
      "Running fold 1 with 160 training samples and 40 validation samples\n",
      "Fold 1: train indices: [162  56 128 110  84], val indices: [175 156   7 191  76]\n",
      "Training data shape: (160, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 1 training loss: 0.025859152898192406\n",
      "y_true (val): [1 1 0 1 0]\n",
      "y_pred: [1 1 0 1 0]\n",
      "Appending results for fold 1: {'fold_index': 1, 'train_indices': [162, 56, 128, 110, 84, 70, 139, 147, 115, 155, 50, 165, 142, 109, 159, 194, 60, 15, 140, 195, 55, 86, 87, 130, 38, 79, 177, 92, 145, 47, 39, 135, 94, 197, 164, 104, 108, 88, 14, 21, 154, 17, 49, 11, 187, 114, 181, 158, 19, 77, 185, 123, 34, 25, 4, 12, 65, 30, 40, 129, 81, 189, 102, 141, 170, 68, 24, 71, 132, 107, 36, 27, 96, 66, 138, 63, 193, 113, 124, 99, 10, 150, 103, 5, 143, 146, 153, 122, 148, 9, 183, 105, 53, 166, 75, 52, 169, 43, 188, 59, 35, 186, 199, 93, 106, 3, 184, 33, 125, 74, 37, 1, 48, 180, 126, 121, 72, 62, 0, 173, 83, 119, 152, 23, 95, 73, 179, 44, 58, 120, 127, 157, 20, 163, 69, 190, 26, 112, 6, 134, 29, 64, 192, 172, 174, 28, 45, 168, 8, 46, 31, 116, 85, 131, 51, 32, 176, 198, 151, 42], 'val_indices': [175, 156, 7, 191, 76, 117, 54, 16, 2, 80, 41, 118, 78, 90, 100, 160, 149, 161, 171, 18, 82, 182, 101, 61, 91, 167, 144, 133, 196, 67, 22, 57, 137, 136, 98, 111, 89, 13, 178, 97], 'accuracy': 0.875, 'kappa': 0.75, 'auc': 0.9424999999999999}\n",
      "Running fold 2 with 160 training samples and 40 validation samples\n",
      "Fold 2: train indices: [  3 109 165  70  15], val indices: [ 58 152 153  54 171]\n",
      "Training data shape: (160, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 2 training loss: 0.016671884804964066\n",
      "y_true (val): [0 1 1 0 1]\n",
      "y_pred: [0 1 1 1 1]\n",
      "Appending results for fold 2: {'fold_index': 2, 'train_indices': [3, 109, 165, 70, 15, 172, 19, 5, 38, 146, 77, 11, 147, 198, 92, 18, 174, 2, 176, 168, 118, 199, 63, 100, 158, 17, 134, 86, 105, 24, 34, 175, 61, 166, 125, 97, 39, 108, 78, 79, 80, 31, 46, 180, 60, 113, 127, 87, 186, 144, 124, 67, 13, 136, 74, 65, 115, 167, 123, 72, 191, 182, 82, 23, 110, 40, 119, 183, 148, 128, 143, 85, 142, 107, 189, 30, 130, 145, 103, 96, 164, 151, 98, 64, 101, 43, 81, 49, 75, 69, 89, 106, 66, 162, 154, 161, 122, 188, 121, 10, 20, 91, 52, 111, 137, 57, 93, 178, 102, 138, 55, 47, 133, 42, 12, 196, 99, 177, 44, 169, 37, 193, 157, 1, 190, 0, 26, 141, 155, 173, 28, 27, 16, 32, 7, 195, 131, 197, 14, 156, 185, 36, 95, 71, 51, 160, 194, 117, 56, 68, 126, 41, 59, 135, 129, 4, 53, 90, 94, 179], 'val_indices': [58, 152, 153, 54, 171, 88, 170, 45, 21, 84, 181, 73, 150, 22, 29, 184, 25, 120, 159, 114, 116, 187, 6, 149, 83, 33, 50, 139, 104, 9, 48, 132, 112, 35, 76, 163, 8, 140, 192, 62], 'accuracy': 0.85, 'kappa': 0.7, 'auc': 0.94}\n",
      "Running fold 3 with 160 training samples and 40 validation samples\n",
      "Fold 3: train indices: [66 43 45 22 69], val indices: [ 20  14 169 144 196]\n",
      "Training data shape: (160, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 3 training loss: 0.020414946600794792\n",
      "y_true (val): [0 0 1 1 1]\n",
      "y_pred: [1 1 1 1 1]\n",
      "Appending results for fold 3: {'fold_index': 3, 'train_indices': [66, 43, 45, 22, 69, 48, 44, 60, 123, 74, 179, 25, 150, 171, 132, 28, 165, 96, 73, 113, 127, 72, 135, 52, 38, 23, 122, 100, 177, 92, 137, 148, 12, 8, 91, 159, 172, 125, 187, 32, 29, 173, 40, 108, 4, 151, 37, 186, 34, 21, 1, 33, 190, 176, 35, 146, 143, 68, 160, 136, 107, 103, 53, 49, 141, 131, 15, 50, 54, 199, 126, 154, 7, 193, 0, 89, 55, 56, 10, 98, 134, 106, 161, 168, 138, 112, 63, 88, 83, 174, 121, 81, 65, 61, 109, 78, 26, 47, 104, 9, 153, 180, 31, 94, 71, 77, 18, 195, 167, 75, 164, 162, 86, 85, 157, 119, 3, 84, 149, 142, 82, 95, 175, 191, 139, 133, 117, 24, 76, 41, 62, 198, 6, 111, 183, 110, 30, 11, 99, 178, 93, 87, 13, 166, 189, 170, 185, 118, 130, 197, 120, 128, 158, 140, 16, 59, 145, 101, 17, 181], 'val_indices': [20, 14, 169, 144, 196, 105, 67, 182, 36, 39, 97, 57, 64, 58, 79, 90, 188, 194, 155, 129, 102, 192, 27, 5, 124, 116, 80, 184, 152, 163, 46, 156, 114, 147, 115, 70, 19, 2, 51, 42], 'accuracy': 0.875, 'kappa': 0.75, 'auc': 0.97}\n",
      "Running fold 4 with 160 training samples and 40 validation samples\n",
      "Fold 4: train indices: [ 52   4 194  64  46], val indices: [123  35  89 183   0]\n",
      "Training data shape: (160, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 4 training loss: 0.03147134929895401\n",
      "y_true (val): [1 0 0 1 0]\n",
      "y_pred: [1 0 0 1 1]\n",
      "Appending results for fold 4: {'fold_index': 4, 'train_indices': [52, 4, 194, 64, 46, 59, 38, 21, 193, 157, 28, 57, 17, 154, 184, 97, 139, 125, 102, 182, 30, 143, 180, 50, 126, 13, 161, 100, 15, 135, 45, 74, 153, 51, 115, 189, 181, 187, 37, 133, 118, 168, 16, 136, 66, 73, 19, 174, 22, 24, 71, 192, 63, 144, 122, 72, 54, 175, 147, 155, 85, 107, 149, 103, 69, 31, 27, 145, 7, 84, 77, 191, 88, 79, 114, 49, 90, 124, 5, 111, 36, 172, 131, 61, 32, 185, 173, 2, 166, 39, 148, 110, 34, 199, 65, 186, 23, 91, 159, 170, 93, 119, 195, 116, 129, 76, 53, 158, 101, 130, 178, 156, 6, 94, 138, 167, 96, 68, 132, 165, 92, 140, 12, 137, 44, 188, 160, 83, 47, 60, 98, 81, 105, 78, 58, 11, 25, 26, 82, 141, 171, 196, 62, 48, 1, 177, 70, 121, 8, 163, 109, 95, 104, 43, 117, 150, 14, 197, 127, 33], 'val_indices': [123, 35, 89, 183, 0, 80, 75, 134, 10, 87, 120, 40, 151, 67, 86, 99, 152, 42, 20, 176, 162, 169, 41, 190, 56, 9, 142, 146, 112, 108, 3, 128, 198, 106, 55, 29, 18, 164, 113, 179], 'accuracy': 0.8, 'kappa': 0.6, 'auc': 0.9225}\n",
      "Final cross-validation results: {'params': [], 'mean_acc': 0.865, 'mean_kappa': 0.73, 'mean_auc': 0.95, 'mean_f1_left': array([0., 0., 0., 0., 0.]), 'mean_f1_right': array([0., 0., 0., 0., 0.]), 'mean_recall_left': array([0., 0., 0., 0., 0.]), 'mean_recall_right': array([0., 0., 0., 0., 0.]), 'mean_precision_left': array([0., 0., 0., 0., 0.]), 'mean_precision_right': array([0., 0., 0., 0., 0.]), 'all_folds': [{'fold_index': 0, 'train_indices': [4, 142, 183, 71, 50, 179, 125, 131, 117, 60, 82, 55, 89, 21, 157, 47, 5, 42, 11, 19, 23, 172, 148, 99, 140, 34, 146, 115, 48, 147, 93, 2, 182, 138, 43, 57, 158, 187, 128, 18, 160, 33, 97, 14, 44, 177, 196, 61, 56, 174, 46, 67, 8, 101, 7, 41, 129, 184, 198, 98, 190, 74, 169, 24, 159, 173, 15, 70, 163, 58, 186, 72, 27, 87, 81, 26, 122, 96, 120, 65, 119, 102, 123, 167, 94, 130, 135, 77, 192, 175, 20, 37, 16, 0, 180, 144, 52, 145, 106, 139, 63, 9, 36, 153, 126, 17, 59, 29, 164, 30, 85, 156, 53, 79, 38, 118, 124, 193, 171, 35, 13, 151, 110, 95, 149, 136, 165, 168, 109, 88, 84, 92, 3, 121, 114, 143, 1, 10, 195, 28, 197, 103, 137, 152, 113, 112, 32, 189, 62, 199, 78, 68, 176, 161, 22, 155, 108, 80, 181, 166], 'val_indices': [25, 107, 31, 188, 83, 86, 111, 75, 191, 170, 76, 12, 100, 154, 73, 6, 66, 54, 104, 162, 91, 51, 132, 39, 105, 40, 134, 141, 45, 116, 185, 178, 127, 150, 194, 69, 133, 90, 64, 49], 'accuracy': 0.925, 'kappa': 0.85, 'auc': 0.9725}, {'fold_index': 1, 'train_indices': [162, 56, 128, 110, 84, 70, 139, 147, 115, 155, 50, 165, 142, 109, 159, 194, 60, 15, 140, 195, 55, 86, 87, 130, 38, 79, 177, 92, 145, 47, 39, 135, 94, 197, 164, 104, 108, 88, 14, 21, 154, 17, 49, 11, 187, 114, 181, 158, 19, 77, 185, 123, 34, 25, 4, 12, 65, 30, 40, 129, 81, 189, 102, 141, 170, 68, 24, 71, 132, 107, 36, 27, 96, 66, 138, 63, 193, 113, 124, 99, 10, 150, 103, 5, 143, 146, 153, 122, 148, 9, 183, 105, 53, 166, 75, 52, 169, 43, 188, 59, 35, 186, 199, 93, 106, 3, 184, 33, 125, 74, 37, 1, 48, 180, 126, 121, 72, 62, 0, 173, 83, 119, 152, 23, 95, 73, 179, 44, 58, 120, 127, 157, 20, 163, 69, 190, 26, 112, 6, 134, 29, 64, 192, 172, 174, 28, 45, 168, 8, 46, 31, 116, 85, 131, 51, 32, 176, 198, 151, 42], 'val_indices': [175, 156, 7, 191, 76, 117, 54, 16, 2, 80, 41, 118, 78, 90, 100, 160, 149, 161, 171, 18, 82, 182, 101, 61, 91, 167, 144, 133, 196, 67, 22, 57, 137, 136, 98, 111, 89, 13, 178, 97], 'accuracy': 0.875, 'kappa': 0.75, 'auc': 0.9424999999999999}, {'fold_index': 2, 'train_indices': [3, 109, 165, 70, 15, 172, 19, 5, 38, 146, 77, 11, 147, 198, 92, 18, 174, 2, 176, 168, 118, 199, 63, 100, 158, 17, 134, 86, 105, 24, 34, 175, 61, 166, 125, 97, 39, 108, 78, 79, 80, 31, 46, 180, 60, 113, 127, 87, 186, 144, 124, 67, 13, 136, 74, 65, 115, 167, 123, 72, 191, 182, 82, 23, 110, 40, 119, 183, 148, 128, 143, 85, 142, 107, 189, 30, 130, 145, 103, 96, 164, 151, 98, 64, 101, 43, 81, 49, 75, 69, 89, 106, 66, 162, 154, 161, 122, 188, 121, 10, 20, 91, 52, 111, 137, 57, 93, 178, 102, 138, 55, 47, 133, 42, 12, 196, 99, 177, 44, 169, 37, 193, 157, 1, 190, 0, 26, 141, 155, 173, 28, 27, 16, 32, 7, 195, 131, 197, 14, 156, 185, 36, 95, 71, 51, 160, 194, 117, 56, 68, 126, 41, 59, 135, 129, 4, 53, 90, 94, 179], 'val_indices': [58, 152, 153, 54, 171, 88, 170, 45, 21, 84, 181, 73, 150, 22, 29, 184, 25, 120, 159, 114, 116, 187, 6, 149, 83, 33, 50, 139, 104, 9, 48, 132, 112, 35, 76, 163, 8, 140, 192, 62], 'accuracy': 0.85, 'kappa': 0.7, 'auc': 0.94}, {'fold_index': 3, 'train_indices': [66, 43, 45, 22, 69, 48, 44, 60, 123, 74, 179, 25, 150, 171, 132, 28, 165, 96, 73, 113, 127, 72, 135, 52, 38, 23, 122, 100, 177, 92, 137, 148, 12, 8, 91, 159, 172, 125, 187, 32, 29, 173, 40, 108, 4, 151, 37, 186, 34, 21, 1, 33, 190, 176, 35, 146, 143, 68, 160, 136, 107, 103, 53, 49, 141, 131, 15, 50, 54, 199, 126, 154, 7, 193, 0, 89, 55, 56, 10, 98, 134, 106, 161, 168, 138, 112, 63, 88, 83, 174, 121, 81, 65, 61, 109, 78, 26, 47, 104, 9, 153, 180, 31, 94, 71, 77, 18, 195, 167, 75, 164, 162, 86, 85, 157, 119, 3, 84, 149, 142, 82, 95, 175, 191, 139, 133, 117, 24, 76, 41, 62, 198, 6, 111, 183, 110, 30, 11, 99, 178, 93, 87, 13, 166, 189, 170, 185, 118, 130, 197, 120, 128, 158, 140, 16, 59, 145, 101, 17, 181], 'val_indices': [20, 14, 169, 144, 196, 105, 67, 182, 36, 39, 97, 57, 64, 58, 79, 90, 188, 194, 155, 129, 102, 192, 27, 5, 124, 116, 80, 184, 152, 163, 46, 156, 114, 147, 115, 70, 19, 2, 51, 42], 'accuracy': 0.875, 'kappa': 0.75, 'auc': 0.97}, {'fold_index': 4, 'train_indices': [52, 4, 194, 64, 46, 59, 38, 21, 193, 157, 28, 57, 17, 154, 184, 97, 139, 125, 102, 182, 30, 143, 180, 50, 126, 13, 161, 100, 15, 135, 45, 74, 153, 51, 115, 189, 181, 187, 37, 133, 118, 168, 16, 136, 66, 73, 19, 174, 22, 24, 71, 192, 63, 144, 122, 72, 54, 175, 147, 155, 85, 107, 149, 103, 69, 31, 27, 145, 7, 84, 77, 191, 88, 79, 114, 49, 90, 124, 5, 111, 36, 172, 131, 61, 32, 185, 173, 2, 166, 39, 148, 110, 34, 199, 65, 186, 23, 91, 159, 170, 93, 119, 195, 116, 129, 76, 53, 158, 101, 130, 178, 156, 6, 94, 138, 167, 96, 68, 132, 165, 92, 140, 12, 137, 44, 188, 160, 83, 47, 60, 98, 81, 105, 78, 58, 11, 25, 26, 82, 141, 171, 196, 62, 48, 1, 177, 70, 121, 8, 163, 109, 95, 104, 43, 117, 150, 14, 197, 127, 33], 'val_indices': [123, 35, 89, 183, 0, 80, 75, 134, 10, 87, 120, 40, 151, 67, 86, 99, 152, 42, 20, 176, 162, 169, 41, 190, 56, 9, 142, 146, 112, 108, 3, 128, 198, 106, 55, 29, 18, 164, 113, 179], 'accuracy': 0.8, 'kappa': 0.6, 'auc': 0.9225}], 'std_acc': 0.041, 'std_kappa': 0.081, 'std_auc': 0.019}\n",
      "sbj =  36\n",
      "Total trials loaded: 195\n",
      "Shape of X: (195, 64, 3584), Shape of y: (195,)\n",
      "Resampling from 512 to 128.0 Hz.\n",
      "X_train shape: (195, 64, 320, 1), y_train shape: (195,)\n",
      "Running fold 0 with 156 training samples and 39 validation samples\n",
      "Fold 0: train indices: [112 133  84 162  63], val indices: [138  40 151  49  31]\n",
      "Training data shape: (156, 64, 320, 1), Validation data shape: (39, 64, 320, 1)\n",
      "Fold 0 training loss: 0.1021750420331955\n",
      "y_true (val): [1 0 1 0 0]\n",
      "y_pred: [1 0 0 1 1]\n",
      "Appending results for fold 0: {'fold_index': 0, 'train_indices': [112, 133, 84, 162, 63, 55, 94, 37, 20, 0, 79, 156, 1, 4, 47, 87, 19, 58, 56, 137, 61, 71, 77, 110, 102, 184, 165, 114, 144, 62, 72, 48, 43, 172, 14, 78, 57, 23, 146, 170, 90, 82, 161, 177, 2, 28, 113, 18, 140, 121, 183, 27, 42, 128, 95, 174, 181, 155, 81, 106, 26, 173, 119, 157, 127, 96, 67, 103, 74, 24, 100, 22, 148, 36, 105, 125, 185, 109, 91, 122, 104, 99, 169, 17, 50, 46, 38, 179, 52, 186, 118, 7, 8, 15, 167, 191, 33, 29, 136, 13, 5, 117, 11, 92, 35, 190, 142, 176, 93, 10, 116, 171, 32, 158, 193, 192, 30, 34, 59, 70, 134, 80, 180, 163, 189, 86, 9, 168, 98, 153, 65, 60, 154, 68, 166, 141, 107, 188, 149, 143, 89, 145, 41, 16, 3, 123, 178, 44, 164, 115, 53, 152, 111, 88, 160, 187], 'val_indices': [138, 40, 151, 49, 31, 194, 108, 126, 131, 45, 75, 97, 21, 73, 54, 120, 130, 139, 39, 83, 124, 12, 175, 129, 147, 51, 6, 135, 159, 132, 69, 25, 85, 66, 182, 150, 64, 76, 101], 'accuracy': 0.717948717948718, 'kappa': 0.4317880794701986, 'auc': 0.7736842105263158}\n",
      "New Max Found!\n",
      "Running fold 1 with 156 training samples and 39 validation samples\n",
      "Fold 1: train indices: [147 166  51 107 187], val indices: [158 168  54 175 185]\n",
      "Training data shape: (156, 64, 320, 1), Validation data shape: (39, 64, 320, 1)\n",
      "Fold 1 training loss: 0.03553207591176033\n",
      "y_true (val): [1 1 0 1 1]\n",
      "y_pred: [1 0 0 0 1]\n",
      "Appending results for fold 1: {'fold_index': 1, 'train_indices': [147, 166, 51, 107, 187, 184, 102, 79, 104, 116, 111, 20, 17, 150, 46, 50, 72, 37, 110, 44, 140, 62, 132, 56, 171, 176, 131, 98, 84, 123, 69, 25, 6, 170, 137, 52, 60, 188, 155, 113, 143, 94, 178, 182, 1, 10, 121, 4, 95, 65, 39, 27, 92, 105, 118, 181, 173, 136, 34, 165, 48, 161, 30, 76, 119, 142, 45, 5, 85, 12, 101, 169, 57, 82, 75, 74, 145, 100, 96, 122, 177, 112, 129, 40, 109, 58, 174, 36, 68, 189, 8, 0, 28, 163, 144, 73, 159, 29, 148, 41, 124, 15, 26, 63, 11, 126, 180, 106, 24, 77, 23, 128, 88, 154, 139, 59, 35, 66, 149, 87, 160, 120, 152, 156, 103, 64, 192, 167, 70, 193, 9, 125, 81, 135, 55, 53, 186, 99, 162, 33, 83, 191, 49, 14, 19, 138, 71, 127, 47, 42, 117, 183, 151, 31, 43, 3], 'val_indices': [158, 168, 54, 175, 185, 194, 134, 38, 130, 97, 114, 61, 21, 67, 133, 108, 91, 115, 2, 78, 13, 164, 90, 153, 179, 86, 22, 141, 7, 32, 89, 190, 18, 93, 16, 157, 172, 146, 80], 'accuracy': 0.7435897435897436, 'kappa': 0.4881889763779528, 'auc': 0.8210526315789474}\n",
      "New Max Found!\n",
      "Running fold 2 with 156 training samples and 39 validation samples\n",
      "Fold 2: train indices: [  6 142  23 173  20], val indices: [ 29 189   3  91 117]\n",
      "Training data shape: (156, 64, 320, 1), Validation data shape: (39, 64, 320, 1)\n",
      "Fold 2 training loss: 0.13638649880886078\n",
      "y_true (val): [0 1 0 0 1]\n",
      "y_pred: [0 1 0 1 0]\n",
      "Appending results for fold 2: {'fold_index': 2, 'train_indices': [6, 142, 23, 173, 20, 49, 162, 100, 165, 25, 86, 60, 132, 75, 17, 13, 181, 96, 143, 71, 70, 110, 97, 37, 169, 46, 107, 98, 177, 151, 95, 190, 116, 43, 56, 120, 114, 32, 72, 102, 4, 27, 161, 88, 68, 178, 140, 124, 33, 123, 41, 127, 153, 121, 22, 145, 125, 1, 16, 52, 148, 103, 63, 78, 112, 179, 115, 108, 30, 11, 24, 10, 34, 90, 39, 193, 44, 187, 164, 166, 131, 105, 135, 67, 59, 69, 55, 185, 84, 65, 186, 188, 2, 87, 134, 53, 79, 15, 122, 73, 141, 54, 144, 138, 31, 99, 36, 172, 182, 191, 139, 192, 7, 154, 119, 81, 77, 66, 83, 171, 118, 133, 19, 64, 76, 126, 163, 0, 51, 176, 128, 94, 58, 35, 26, 157, 174, 183, 159, 80, 155, 170, 93, 130, 42, 14, 9, 82, 158, 28, 104, 106, 152, 89, 38, 180], 'val_indices': [29, 189, 3, 91, 117, 137, 136, 74, 156, 61, 175, 101, 146, 109, 40, 18, 50, 184, 113, 167, 92, 149, 85, 8, 160, 194, 45, 150, 57, 111, 168, 12, 21, 129, 5, 48, 62, 147, 47], 'accuracy': 0.7692307692307693, 'kappa': 0.5363276089828268, 'auc': 0.7710526315789473}\n",
      "New Max Found!\n",
      "Running fold 3 with 156 training samples and 39 validation samples\n",
      "Fold 3: train indices: [115 168  26  83  95], val indices: [ 36 146 148  44 154]\n",
      "Training data shape: (156, 64, 320, 1), Validation data shape: (39, 64, 320, 1)\n",
      "Fold 3 training loss: 0.05640581250190735\n",
      "y_true (val): [0 1 1 0 1]\n",
      "y_pred: [0 1 1 0 0]\n",
      "Appending results for fold 3: {'fold_index': 3, 'train_indices': [115, 168, 26, 83, 95, 71, 84, 180, 8, 109, 31, 150, 61, 149, 60, 62, 24, 12, 37, 173, 27, 89, 46, 119, 57, 183, 93, 122, 20, 79, 45, 140, 130, 145, 48, 101, 35, 103, 21, 126, 91, 132, 64, 165, 169, 181, 15, 50, 28, 49, 94, 3, 112, 179, 76, 116, 23, 85, 178, 177, 127, 66, 56, 67, 144, 5, 38, 68, 147, 29, 81, 125, 158, 129, 86, 55, 40, 30, 139, 190, 58, 163, 9, 32, 175, 152, 160, 188, 87, 96, 167, 1, 47, 51, 43, 99, 113, 191, 153, 6, 193, 194, 164, 42, 88, 41, 33, 138, 14, 34, 2, 155, 174, 159, 18, 110, 141, 185, 108, 136, 135, 75, 143, 74, 187, 133, 161, 182, 123, 128, 114, 65, 10, 100, 102, 104, 156, 124, 137, 98, 192, 4, 157, 176, 25, 63, 73, 186, 162, 92, 52, 19, 170, 117, 17, 82], 'val_indices': [36, 146, 148, 44, 154, 16, 70, 107, 39, 120, 131, 0, 54, 53, 142, 22, 172, 72, 7, 111, 78, 90, 171, 77, 118, 184, 11, 166, 134, 13, 189, 80, 121, 151, 69, 106, 105, 97, 59], 'accuracy': 0.7435897435897436, 'kappa': 0.4881889763779528, 'auc': 0.8578947368421053}\n",
      "Running fold 4 with 156 training samples and 39 validation samples\n",
      "Fold 4: train indices: [ 89 172  92  58 139], val indices: [171  82 150 104 117]\n",
      "Training data shape: (156, 64, 320, 1), Validation data shape: (39, 64, 320, 1)\n",
      "Fold 4 training loss: 0.08752436190843582\n",
      "y_true (val): [1 0 1 1 1]\n",
      "y_pred: [1 1 1 1 0]\n",
      "Appending results for fold 4: {'fold_index': 4, 'train_indices': [89, 172, 92, 58, 139, 90, 75, 182, 26, 169, 143, 193, 161, 173, 113, 10, 51, 160, 101, 188, 47, 19, 164, 146, 105, 31, 102, 40, 7, 115, 177, 52, 153, 183, 91, 180, 41, 74, 170, 18, 134, 16, 141, 128, 118, 39, 54, 49, 99, 110, 57, 95, 69, 103, 192, 61, 42, 63, 145, 0, 17, 155, 45, 174, 36, 159, 70, 127, 140, 86, 175, 181, 176, 112, 88, 79, 73, 76, 11, 59, 107, 116, 121, 13, 123, 80, 135, 136, 8, 166, 50, 23, 12, 93, 48, 85, 55, 190, 147, 77, 96, 151, 100, 111, 132, 194, 114, 5, 1, 142, 2, 71, 33, 179, 97, 184, 37, 14, 44, 158, 106, 34, 133, 120, 156, 67, 72, 178, 186, 38, 126, 64, 154, 125, 138, 129, 15, 30, 24, 35, 122, 3, 162, 87, 165, 167, 9, 4, 60, 83, 148, 53, 124, 119, 68, 25], 'val_indices': [171, 82, 150, 104, 117, 78, 187, 130, 81, 21, 152, 32, 94, 6, 20, 157, 189, 65, 108, 137, 131, 149, 56, 62, 109, 163, 185, 98, 191, 84, 46, 66, 29, 22, 27, 144, 28, 43, 168], 'accuracy': 0.6923076923076923, 'kappa': 0.38421052631578945, 'auc': 0.8421052631578947}\n",
      "Final cross-validation results: {'params': [], 'mean_acc': 0.733, 'mean_kappa': 0.466, 'mean_auc': 0.813, 'mean_f1_left': array([0., 0., 0., 0., 0.]), 'mean_f1_right': array([0., 0., 0., 0., 0.]), 'mean_recall_left': array([0., 0., 0., 0., 0.]), 'mean_recall_right': array([0., 0., 0., 0., 0.]), 'mean_precision_left': array([0., 0., 0., 0., 0.]), 'mean_precision_right': array([0., 0., 0., 0., 0.]), 'all_folds': [{'fold_index': 0, 'train_indices': [112, 133, 84, 162, 63, 55, 94, 37, 20, 0, 79, 156, 1, 4, 47, 87, 19, 58, 56, 137, 61, 71, 77, 110, 102, 184, 165, 114, 144, 62, 72, 48, 43, 172, 14, 78, 57, 23, 146, 170, 90, 82, 161, 177, 2, 28, 113, 18, 140, 121, 183, 27, 42, 128, 95, 174, 181, 155, 81, 106, 26, 173, 119, 157, 127, 96, 67, 103, 74, 24, 100, 22, 148, 36, 105, 125, 185, 109, 91, 122, 104, 99, 169, 17, 50, 46, 38, 179, 52, 186, 118, 7, 8, 15, 167, 191, 33, 29, 136, 13, 5, 117, 11, 92, 35, 190, 142, 176, 93, 10, 116, 171, 32, 158, 193, 192, 30, 34, 59, 70, 134, 80, 180, 163, 189, 86, 9, 168, 98, 153, 65, 60, 154, 68, 166, 141, 107, 188, 149, 143, 89, 145, 41, 16, 3, 123, 178, 44, 164, 115, 53, 152, 111, 88, 160, 187], 'val_indices': [138, 40, 151, 49, 31, 194, 108, 126, 131, 45, 75, 97, 21, 73, 54, 120, 130, 139, 39, 83, 124, 12, 175, 129, 147, 51, 6, 135, 159, 132, 69, 25, 85, 66, 182, 150, 64, 76, 101], 'accuracy': 0.717948717948718, 'kappa': 0.4317880794701986, 'auc': 0.7736842105263158}, {'fold_index': 1, 'train_indices': [147, 166, 51, 107, 187, 184, 102, 79, 104, 116, 111, 20, 17, 150, 46, 50, 72, 37, 110, 44, 140, 62, 132, 56, 171, 176, 131, 98, 84, 123, 69, 25, 6, 170, 137, 52, 60, 188, 155, 113, 143, 94, 178, 182, 1, 10, 121, 4, 95, 65, 39, 27, 92, 105, 118, 181, 173, 136, 34, 165, 48, 161, 30, 76, 119, 142, 45, 5, 85, 12, 101, 169, 57, 82, 75, 74, 145, 100, 96, 122, 177, 112, 129, 40, 109, 58, 174, 36, 68, 189, 8, 0, 28, 163, 144, 73, 159, 29, 148, 41, 124, 15, 26, 63, 11, 126, 180, 106, 24, 77, 23, 128, 88, 154, 139, 59, 35, 66, 149, 87, 160, 120, 152, 156, 103, 64, 192, 167, 70, 193, 9, 125, 81, 135, 55, 53, 186, 99, 162, 33, 83, 191, 49, 14, 19, 138, 71, 127, 47, 42, 117, 183, 151, 31, 43, 3], 'val_indices': [158, 168, 54, 175, 185, 194, 134, 38, 130, 97, 114, 61, 21, 67, 133, 108, 91, 115, 2, 78, 13, 164, 90, 153, 179, 86, 22, 141, 7, 32, 89, 190, 18, 93, 16, 157, 172, 146, 80], 'accuracy': 0.7435897435897436, 'kappa': 0.4881889763779528, 'auc': 0.8210526315789474}, {'fold_index': 2, 'train_indices': [6, 142, 23, 173, 20, 49, 162, 100, 165, 25, 86, 60, 132, 75, 17, 13, 181, 96, 143, 71, 70, 110, 97, 37, 169, 46, 107, 98, 177, 151, 95, 190, 116, 43, 56, 120, 114, 32, 72, 102, 4, 27, 161, 88, 68, 178, 140, 124, 33, 123, 41, 127, 153, 121, 22, 145, 125, 1, 16, 52, 148, 103, 63, 78, 112, 179, 115, 108, 30, 11, 24, 10, 34, 90, 39, 193, 44, 187, 164, 166, 131, 105, 135, 67, 59, 69, 55, 185, 84, 65, 186, 188, 2, 87, 134, 53, 79, 15, 122, 73, 141, 54, 144, 138, 31, 99, 36, 172, 182, 191, 139, 192, 7, 154, 119, 81, 77, 66, 83, 171, 118, 133, 19, 64, 76, 126, 163, 0, 51, 176, 128, 94, 58, 35, 26, 157, 174, 183, 159, 80, 155, 170, 93, 130, 42, 14, 9, 82, 158, 28, 104, 106, 152, 89, 38, 180], 'val_indices': [29, 189, 3, 91, 117, 137, 136, 74, 156, 61, 175, 101, 146, 109, 40, 18, 50, 184, 113, 167, 92, 149, 85, 8, 160, 194, 45, 150, 57, 111, 168, 12, 21, 129, 5, 48, 62, 147, 47], 'accuracy': 0.7692307692307693, 'kappa': 0.5363276089828268, 'auc': 0.7710526315789473}, {'fold_index': 3, 'train_indices': [115, 168, 26, 83, 95, 71, 84, 180, 8, 109, 31, 150, 61, 149, 60, 62, 24, 12, 37, 173, 27, 89, 46, 119, 57, 183, 93, 122, 20, 79, 45, 140, 130, 145, 48, 101, 35, 103, 21, 126, 91, 132, 64, 165, 169, 181, 15, 50, 28, 49, 94, 3, 112, 179, 76, 116, 23, 85, 178, 177, 127, 66, 56, 67, 144, 5, 38, 68, 147, 29, 81, 125, 158, 129, 86, 55, 40, 30, 139, 190, 58, 163, 9, 32, 175, 152, 160, 188, 87, 96, 167, 1, 47, 51, 43, 99, 113, 191, 153, 6, 193, 194, 164, 42, 88, 41, 33, 138, 14, 34, 2, 155, 174, 159, 18, 110, 141, 185, 108, 136, 135, 75, 143, 74, 187, 133, 161, 182, 123, 128, 114, 65, 10, 100, 102, 104, 156, 124, 137, 98, 192, 4, 157, 176, 25, 63, 73, 186, 162, 92, 52, 19, 170, 117, 17, 82], 'val_indices': [36, 146, 148, 44, 154, 16, 70, 107, 39, 120, 131, 0, 54, 53, 142, 22, 172, 72, 7, 111, 78, 90, 171, 77, 118, 184, 11, 166, 134, 13, 189, 80, 121, 151, 69, 106, 105, 97, 59], 'accuracy': 0.7435897435897436, 'kappa': 0.4881889763779528, 'auc': 0.8578947368421053}, {'fold_index': 4, 'train_indices': [89, 172, 92, 58, 139, 90, 75, 182, 26, 169, 143, 193, 161, 173, 113, 10, 51, 160, 101, 188, 47, 19, 164, 146, 105, 31, 102, 40, 7, 115, 177, 52, 153, 183, 91, 180, 41, 74, 170, 18, 134, 16, 141, 128, 118, 39, 54, 49, 99, 110, 57, 95, 69, 103, 192, 61, 42, 63, 145, 0, 17, 155, 45, 174, 36, 159, 70, 127, 140, 86, 175, 181, 176, 112, 88, 79, 73, 76, 11, 59, 107, 116, 121, 13, 123, 80, 135, 136, 8, 166, 50, 23, 12, 93, 48, 85, 55, 190, 147, 77, 96, 151, 100, 111, 132, 194, 114, 5, 1, 142, 2, 71, 33, 179, 97, 184, 37, 14, 44, 158, 106, 34, 133, 120, 156, 67, 72, 178, 186, 38, 126, 64, 154, 125, 138, 129, 15, 30, 24, 35, 122, 3, 162, 87, 165, 167, 9, 4, 60, 83, 148, 53, 124, 119, 68, 25], 'val_indices': [171, 82, 150, 104, 117, 78, 187, 130, 81, 21, 152, 32, 94, 6, 20, 157, 189, 65, 108, 137, 131, 149, 56, 62, 109, 163, 185, 98, 191, 84, 46, 66, 29, 22, 27, 144, 28, 43, 168], 'accuracy': 0.6923076923076923, 'kappa': 0.38421052631578945, 'auc': 0.8421052631578947}], 'std_acc': 0.026, 'std_kappa': 0.053, 'std_auc': 0.035}\n",
      "sbj =  37\n",
      "Total trials loaded: 200\n",
      "Shape of X: (200, 64, 3584), Shape of y: (200,)\n",
      "Resampling from 512 to 128.0 Hz.\n",
      "X_train shape: (200, 64, 320, 1), y_train shape: (200,)\n",
      "Running fold 0 with 160 training samples and 40 validation samples\n",
      "Fold 0: train indices: [  4 142 183  71  50], val indices: [ 25 107  31 188  83]\n",
      "Training data shape: (160, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 0 training loss: 0.009923913516104221\n",
      "y_true (val): [0 1 0 1 0]\n",
      "y_pred: [0 1 1 1 0]\n",
      "Appending results for fold 0: {'fold_index': 0, 'train_indices': [4, 142, 183, 71, 50, 179, 125, 131, 117, 60, 82, 55, 89, 21, 157, 47, 5, 42, 11, 19, 23, 172, 148, 99, 140, 34, 146, 115, 48, 147, 93, 2, 182, 138, 43, 57, 158, 187, 128, 18, 160, 33, 97, 14, 44, 177, 196, 61, 56, 174, 46, 67, 8, 101, 7, 41, 129, 184, 198, 98, 190, 74, 169, 24, 159, 173, 15, 70, 163, 58, 186, 72, 27, 87, 81, 26, 122, 96, 120, 65, 119, 102, 123, 167, 94, 130, 135, 77, 192, 175, 20, 37, 16, 0, 180, 144, 52, 145, 106, 139, 63, 9, 36, 153, 126, 17, 59, 29, 164, 30, 85, 156, 53, 79, 38, 118, 124, 193, 171, 35, 13, 151, 110, 95, 149, 136, 165, 168, 109, 88, 84, 92, 3, 121, 114, 143, 1, 10, 195, 28, 197, 103, 137, 152, 113, 112, 32, 189, 62, 199, 78, 68, 176, 161, 22, 155, 108, 80, 181, 166], 'val_indices': [25, 107, 31, 188, 83, 86, 111, 75, 191, 170, 76, 12, 100, 154, 73, 6, 66, 54, 104, 162, 91, 51, 132, 39, 105, 40, 134, 141, 45, 116, 185, 178, 127, 150, 194, 69, 133, 90, 64, 49], 'accuracy': 0.725, 'kappa': 0.44999999999999996, 'auc': 0.8225}\n",
      "New Max Found!\n",
      "Running fold 1 with 160 training samples and 40 validation samples\n",
      "Fold 1: train indices: [162  56 128 110  84], val indices: [175 156   7 191  76]\n",
      "Training data shape: (160, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 1 training loss: 0.046548835933208466\n",
      "y_true (val): [1 1 0 1 0]\n",
      "y_pred: [1 1 0 1 1]\n",
      "Appending results for fold 1: {'fold_index': 1, 'train_indices': [162, 56, 128, 110, 84, 70, 139, 147, 115, 155, 50, 165, 142, 109, 159, 194, 60, 15, 140, 195, 55, 86, 87, 130, 38, 79, 177, 92, 145, 47, 39, 135, 94, 197, 164, 104, 108, 88, 14, 21, 154, 17, 49, 11, 187, 114, 181, 158, 19, 77, 185, 123, 34, 25, 4, 12, 65, 30, 40, 129, 81, 189, 102, 141, 170, 68, 24, 71, 132, 107, 36, 27, 96, 66, 138, 63, 193, 113, 124, 99, 10, 150, 103, 5, 143, 146, 153, 122, 148, 9, 183, 105, 53, 166, 75, 52, 169, 43, 188, 59, 35, 186, 199, 93, 106, 3, 184, 33, 125, 74, 37, 1, 48, 180, 126, 121, 72, 62, 0, 173, 83, 119, 152, 23, 95, 73, 179, 44, 58, 120, 127, 157, 20, 163, 69, 190, 26, 112, 6, 134, 29, 64, 192, 172, 174, 28, 45, 168, 8, 46, 31, 116, 85, 131, 51, 32, 176, 198, 151, 42], 'val_indices': [175, 156, 7, 191, 76, 117, 54, 16, 2, 80, 41, 118, 78, 90, 100, 160, 149, 161, 171, 18, 82, 182, 101, 61, 91, 167, 144, 133, 196, 67, 22, 57, 137, 136, 98, 111, 89, 13, 178, 97], 'accuracy': 0.8, 'kappa': 0.6, 'auc': 0.915}\n",
      "New Max Found!\n",
      "Running fold 2 with 160 training samples and 40 validation samples\n",
      "Fold 2: train indices: [  3 109 165  70  15], val indices: [ 58 152 153  54 171]\n",
      "Training data shape: (160, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 2 training loss: 0.01972281001508236\n",
      "y_true (val): [0 1 1 0 1]\n",
      "y_pred: [0 1 1 0 1]\n",
      "Appending results for fold 2: {'fold_index': 2, 'train_indices': [3, 109, 165, 70, 15, 172, 19, 5, 38, 146, 77, 11, 147, 198, 92, 18, 174, 2, 176, 168, 118, 199, 63, 100, 158, 17, 134, 86, 105, 24, 34, 175, 61, 166, 125, 97, 39, 108, 78, 79, 80, 31, 46, 180, 60, 113, 127, 87, 186, 144, 124, 67, 13, 136, 74, 65, 115, 167, 123, 72, 191, 182, 82, 23, 110, 40, 119, 183, 148, 128, 143, 85, 142, 107, 189, 30, 130, 145, 103, 96, 164, 151, 98, 64, 101, 43, 81, 49, 75, 69, 89, 106, 66, 162, 154, 161, 122, 188, 121, 10, 20, 91, 52, 111, 137, 57, 93, 178, 102, 138, 55, 47, 133, 42, 12, 196, 99, 177, 44, 169, 37, 193, 157, 1, 190, 0, 26, 141, 155, 173, 28, 27, 16, 32, 7, 195, 131, 197, 14, 156, 185, 36, 95, 71, 51, 160, 194, 117, 56, 68, 126, 41, 59, 135, 129, 4, 53, 90, 94, 179], 'val_indices': [58, 152, 153, 54, 171, 88, 170, 45, 21, 84, 181, 73, 150, 22, 29, 184, 25, 120, 159, 114, 116, 187, 6, 149, 83, 33, 50, 139, 104, 9, 48, 132, 112, 35, 76, 163, 8, 140, 192, 62], 'accuracy': 0.85, 'kappa': 0.7, 'auc': 0.9400000000000001}\n",
      "New Max Found!\n",
      "Running fold 3 with 160 training samples and 40 validation samples\n",
      "Fold 3: train indices: [66 43 45 22 69], val indices: [ 20  14 169 144 196]\n",
      "Training data shape: (160, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 3 training loss: 0.03486380726099014\n",
      "y_true (val): [0 0 1 1 1]\n",
      "y_pred: [0 0 1 1 1]\n",
      "Appending results for fold 3: {'fold_index': 3, 'train_indices': [66, 43, 45, 22, 69, 48, 44, 60, 123, 74, 179, 25, 150, 171, 132, 28, 165, 96, 73, 113, 127, 72, 135, 52, 38, 23, 122, 100, 177, 92, 137, 148, 12, 8, 91, 159, 172, 125, 187, 32, 29, 173, 40, 108, 4, 151, 37, 186, 34, 21, 1, 33, 190, 176, 35, 146, 143, 68, 160, 136, 107, 103, 53, 49, 141, 131, 15, 50, 54, 199, 126, 154, 7, 193, 0, 89, 55, 56, 10, 98, 134, 106, 161, 168, 138, 112, 63, 88, 83, 174, 121, 81, 65, 61, 109, 78, 26, 47, 104, 9, 153, 180, 31, 94, 71, 77, 18, 195, 167, 75, 164, 162, 86, 85, 157, 119, 3, 84, 149, 142, 82, 95, 175, 191, 139, 133, 117, 24, 76, 41, 62, 198, 6, 111, 183, 110, 30, 11, 99, 178, 93, 87, 13, 166, 189, 170, 185, 118, 130, 197, 120, 128, 158, 140, 16, 59, 145, 101, 17, 181], 'val_indices': [20, 14, 169, 144, 196, 105, 67, 182, 36, 39, 97, 57, 64, 58, 79, 90, 188, 194, 155, 129, 102, 192, 27, 5, 124, 116, 80, 184, 152, 163, 46, 156, 114, 147, 115, 70, 19, 2, 51, 42], 'accuracy': 0.975, 'kappa': 0.95, 'auc': 0.99}\n",
      "New Max Found!\n",
      "Running fold 4 with 160 training samples and 40 validation samples\n",
      "Fold 4: train indices: [ 52   4 194  64  46], val indices: [123  35  89 183   0]\n",
      "Training data shape: (160, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 4 training loss: 0.0443897619843483\n",
      "y_true (val): [1 0 0 1 0]\n",
      "y_pred: [1 0 0 1 1]\n",
      "Appending results for fold 4: {'fold_index': 4, 'train_indices': [52, 4, 194, 64, 46, 59, 38, 21, 193, 157, 28, 57, 17, 154, 184, 97, 139, 125, 102, 182, 30, 143, 180, 50, 126, 13, 161, 100, 15, 135, 45, 74, 153, 51, 115, 189, 181, 187, 37, 133, 118, 168, 16, 136, 66, 73, 19, 174, 22, 24, 71, 192, 63, 144, 122, 72, 54, 175, 147, 155, 85, 107, 149, 103, 69, 31, 27, 145, 7, 84, 77, 191, 88, 79, 114, 49, 90, 124, 5, 111, 36, 172, 131, 61, 32, 185, 173, 2, 166, 39, 148, 110, 34, 199, 65, 186, 23, 91, 159, 170, 93, 119, 195, 116, 129, 76, 53, 158, 101, 130, 178, 156, 6, 94, 138, 167, 96, 68, 132, 165, 92, 140, 12, 137, 44, 188, 160, 83, 47, 60, 98, 81, 105, 78, 58, 11, 25, 26, 82, 141, 171, 196, 62, 48, 1, 177, 70, 121, 8, 163, 109, 95, 104, 43, 117, 150, 14, 197, 127, 33], 'val_indices': [123, 35, 89, 183, 0, 80, 75, 134, 10, 87, 120, 40, 151, 67, 86, 99, 152, 42, 20, 176, 162, 169, 41, 190, 56, 9, 142, 146, 112, 108, 3, 128, 198, 106, 55, 29, 18, 164, 113, 179], 'accuracy': 0.85, 'kappa': 0.7, 'auc': 0.9525}\n",
      "Final cross-validation results: {'params': [], 'mean_acc': 0.84, 'mean_kappa': 0.68, 'mean_auc': 0.924, 'mean_f1_left': array([0., 0., 0., 0., 0.]), 'mean_f1_right': array([0., 0., 0., 0., 0.]), 'mean_recall_left': array([0., 0., 0., 0., 0.]), 'mean_recall_right': array([0., 0., 0., 0., 0.]), 'mean_precision_left': array([0., 0., 0., 0., 0.]), 'mean_precision_right': array([0., 0., 0., 0., 0.]), 'all_folds': [{'fold_index': 0, 'train_indices': [4, 142, 183, 71, 50, 179, 125, 131, 117, 60, 82, 55, 89, 21, 157, 47, 5, 42, 11, 19, 23, 172, 148, 99, 140, 34, 146, 115, 48, 147, 93, 2, 182, 138, 43, 57, 158, 187, 128, 18, 160, 33, 97, 14, 44, 177, 196, 61, 56, 174, 46, 67, 8, 101, 7, 41, 129, 184, 198, 98, 190, 74, 169, 24, 159, 173, 15, 70, 163, 58, 186, 72, 27, 87, 81, 26, 122, 96, 120, 65, 119, 102, 123, 167, 94, 130, 135, 77, 192, 175, 20, 37, 16, 0, 180, 144, 52, 145, 106, 139, 63, 9, 36, 153, 126, 17, 59, 29, 164, 30, 85, 156, 53, 79, 38, 118, 124, 193, 171, 35, 13, 151, 110, 95, 149, 136, 165, 168, 109, 88, 84, 92, 3, 121, 114, 143, 1, 10, 195, 28, 197, 103, 137, 152, 113, 112, 32, 189, 62, 199, 78, 68, 176, 161, 22, 155, 108, 80, 181, 166], 'val_indices': [25, 107, 31, 188, 83, 86, 111, 75, 191, 170, 76, 12, 100, 154, 73, 6, 66, 54, 104, 162, 91, 51, 132, 39, 105, 40, 134, 141, 45, 116, 185, 178, 127, 150, 194, 69, 133, 90, 64, 49], 'accuracy': 0.725, 'kappa': 0.44999999999999996, 'auc': 0.8225}, {'fold_index': 1, 'train_indices': [162, 56, 128, 110, 84, 70, 139, 147, 115, 155, 50, 165, 142, 109, 159, 194, 60, 15, 140, 195, 55, 86, 87, 130, 38, 79, 177, 92, 145, 47, 39, 135, 94, 197, 164, 104, 108, 88, 14, 21, 154, 17, 49, 11, 187, 114, 181, 158, 19, 77, 185, 123, 34, 25, 4, 12, 65, 30, 40, 129, 81, 189, 102, 141, 170, 68, 24, 71, 132, 107, 36, 27, 96, 66, 138, 63, 193, 113, 124, 99, 10, 150, 103, 5, 143, 146, 153, 122, 148, 9, 183, 105, 53, 166, 75, 52, 169, 43, 188, 59, 35, 186, 199, 93, 106, 3, 184, 33, 125, 74, 37, 1, 48, 180, 126, 121, 72, 62, 0, 173, 83, 119, 152, 23, 95, 73, 179, 44, 58, 120, 127, 157, 20, 163, 69, 190, 26, 112, 6, 134, 29, 64, 192, 172, 174, 28, 45, 168, 8, 46, 31, 116, 85, 131, 51, 32, 176, 198, 151, 42], 'val_indices': [175, 156, 7, 191, 76, 117, 54, 16, 2, 80, 41, 118, 78, 90, 100, 160, 149, 161, 171, 18, 82, 182, 101, 61, 91, 167, 144, 133, 196, 67, 22, 57, 137, 136, 98, 111, 89, 13, 178, 97], 'accuracy': 0.8, 'kappa': 0.6, 'auc': 0.915}, {'fold_index': 2, 'train_indices': [3, 109, 165, 70, 15, 172, 19, 5, 38, 146, 77, 11, 147, 198, 92, 18, 174, 2, 176, 168, 118, 199, 63, 100, 158, 17, 134, 86, 105, 24, 34, 175, 61, 166, 125, 97, 39, 108, 78, 79, 80, 31, 46, 180, 60, 113, 127, 87, 186, 144, 124, 67, 13, 136, 74, 65, 115, 167, 123, 72, 191, 182, 82, 23, 110, 40, 119, 183, 148, 128, 143, 85, 142, 107, 189, 30, 130, 145, 103, 96, 164, 151, 98, 64, 101, 43, 81, 49, 75, 69, 89, 106, 66, 162, 154, 161, 122, 188, 121, 10, 20, 91, 52, 111, 137, 57, 93, 178, 102, 138, 55, 47, 133, 42, 12, 196, 99, 177, 44, 169, 37, 193, 157, 1, 190, 0, 26, 141, 155, 173, 28, 27, 16, 32, 7, 195, 131, 197, 14, 156, 185, 36, 95, 71, 51, 160, 194, 117, 56, 68, 126, 41, 59, 135, 129, 4, 53, 90, 94, 179], 'val_indices': [58, 152, 153, 54, 171, 88, 170, 45, 21, 84, 181, 73, 150, 22, 29, 184, 25, 120, 159, 114, 116, 187, 6, 149, 83, 33, 50, 139, 104, 9, 48, 132, 112, 35, 76, 163, 8, 140, 192, 62], 'accuracy': 0.85, 'kappa': 0.7, 'auc': 0.9400000000000001}, {'fold_index': 3, 'train_indices': [66, 43, 45, 22, 69, 48, 44, 60, 123, 74, 179, 25, 150, 171, 132, 28, 165, 96, 73, 113, 127, 72, 135, 52, 38, 23, 122, 100, 177, 92, 137, 148, 12, 8, 91, 159, 172, 125, 187, 32, 29, 173, 40, 108, 4, 151, 37, 186, 34, 21, 1, 33, 190, 176, 35, 146, 143, 68, 160, 136, 107, 103, 53, 49, 141, 131, 15, 50, 54, 199, 126, 154, 7, 193, 0, 89, 55, 56, 10, 98, 134, 106, 161, 168, 138, 112, 63, 88, 83, 174, 121, 81, 65, 61, 109, 78, 26, 47, 104, 9, 153, 180, 31, 94, 71, 77, 18, 195, 167, 75, 164, 162, 86, 85, 157, 119, 3, 84, 149, 142, 82, 95, 175, 191, 139, 133, 117, 24, 76, 41, 62, 198, 6, 111, 183, 110, 30, 11, 99, 178, 93, 87, 13, 166, 189, 170, 185, 118, 130, 197, 120, 128, 158, 140, 16, 59, 145, 101, 17, 181], 'val_indices': [20, 14, 169, 144, 196, 105, 67, 182, 36, 39, 97, 57, 64, 58, 79, 90, 188, 194, 155, 129, 102, 192, 27, 5, 124, 116, 80, 184, 152, 163, 46, 156, 114, 147, 115, 70, 19, 2, 51, 42], 'accuracy': 0.975, 'kappa': 0.95, 'auc': 0.99}, {'fold_index': 4, 'train_indices': [52, 4, 194, 64, 46, 59, 38, 21, 193, 157, 28, 57, 17, 154, 184, 97, 139, 125, 102, 182, 30, 143, 180, 50, 126, 13, 161, 100, 15, 135, 45, 74, 153, 51, 115, 189, 181, 187, 37, 133, 118, 168, 16, 136, 66, 73, 19, 174, 22, 24, 71, 192, 63, 144, 122, 72, 54, 175, 147, 155, 85, 107, 149, 103, 69, 31, 27, 145, 7, 84, 77, 191, 88, 79, 114, 49, 90, 124, 5, 111, 36, 172, 131, 61, 32, 185, 173, 2, 166, 39, 148, 110, 34, 199, 65, 186, 23, 91, 159, 170, 93, 119, 195, 116, 129, 76, 53, 158, 101, 130, 178, 156, 6, 94, 138, 167, 96, 68, 132, 165, 92, 140, 12, 137, 44, 188, 160, 83, 47, 60, 98, 81, 105, 78, 58, 11, 25, 26, 82, 141, 171, 196, 62, 48, 1, 177, 70, 121, 8, 163, 109, 95, 104, 43, 117, 150, 14, 197, 127, 33], 'val_indices': [123, 35, 89, 183, 0, 80, 75, 134, 10, 87, 120, 40, 151, 67, 86, 99, 152, 42, 20, 176, 162, 169, 41, 190, 56, 9, 142, 146, 112, 108, 3, 128, 198, 106, 55, 29, 18, 164, 113, 179], 'accuracy': 0.85, 'kappa': 0.7, 'auc': 0.9525}], 'std_acc': 0.082, 'std_kappa': 0.163, 'std_auc': 0.056}\n",
      "sbj =  38\n",
      "Total trials loaded: 191\n",
      "Shape of X: (191, 64, 3584), Shape of y: (191,)\n",
      "Resampling from 512 to 128.0 Hz.\n",
      "X_train shape: (191, 64, 320, 1), y_train shape: (191,)\n",
      "Running fold 0 with 152 training samples and 39 validation samples\n",
      "Fold 0: train indices: [177 126  95 180  74], val indices: [ 83  73 137  66  76]\n",
      "Training data shape: (152, 64, 320, 1), Validation data shape: (39, 64, 320, 1)\n",
      "Fold 0 training loss: 0.04508291557431221\n",
      "y_true (val): [0 0 1 0 0]\n",
      "y_pred: [0 0 0 0 1]\n",
      "Appending results for fold 0: {'fold_index': 0, 'train_indices': [177, 126, 95, 180, 74, 55, 80, 37, 20, 0, 78, 172, 65, 4, 47, 86, 57, 58, 56, 155, 60, 70, 90, 147, 163, 120, 145, 183, 101, 41, 71, 109, 1, 178, 14, 77, 62, 23, 173, 175, 59, 61, 165, 133, 2, 28, 176, 18, 139, 111, 141, 27, 42, 113, 94, 182, 184, 174, 43, 105, 26, 135, 168, 104, 164, 82, 79, 102, 93, 24, 167, 68, 169, 15, 185, 132, 140, 157, 81, 115, 103, 127, 148, 17, 50, 46, 38, 52, 112, 188, 7, 8, 89, 161, 187, 19, 29, 160, 13, 5, 179, 11, 91, 35, 151, 153, 92, 10, 114, 110, 32, 124, 162, 30, 34, 33, 22, 186, 63, 98, 159, 118, 85, 9, 116, 121, 152, 142, 36, 72, 122, 67, 154, 143, 189, 97, 108, 156, 88, 144, 171, 16, 3, 106, 44, 117, 170, 53, 99, 136, 87, 181], 'val_indices': [83, 73, 137, 66, 76, 190, 158, 125, 96, 12, 69, 107, 48, 54, 31, 119, 130, 138, 25, 40, 129, 49, 166, 128, 146, 6, 45, 134, 150, 131, 64, 51, 21, 75, 123, 149, 84, 39, 100], 'accuracy': 0.5641025641025641, 'kappa': 0.12185430463576152, 'auc': 0.5368421052631578}\n",
      "New Max Found!\n",
      "Running fold 1 with 152 training samples and 39 validation samples\n",
      "Fold 1: train indices: [ 44 102  25  82  37], val indices: [157  80  54 171 167]\n",
      "Training data shape: (152, 64, 320, 1), Validation data shape: (39, 64, 320, 1)\n",
      "Fold 1 training loss: 0.04752587154507637\n",
      "y_true (val): [1 0 0 1 1]\n",
      "y_pred: [0 1 0 1 0]\n",
      "Appending results for fold 1: {'fold_index': 1, 'train_indices': [44, 102, 25, 82, 37, 93, 46, 182, 20, 63, 17, 56, 35, 150, 99, 127, 71, 158, 188, 184, 176, 94, 116, 68, 6, 159, 121, 138, 52, 59, 172, 106, 142, 151, 135, 149, 51, 4, 183, 109, 10, 189, 87, 128, 39, 27, 65, 134, 141, 153, 34, 28, 48, 110, 30, 75, 130, 66, 139, 45, 5, 146, 12, 120, 136, 124, 97, 101, 62, 100, 119, 85, 161, 104, 41, 40, 131, 76, 166, 36, 79, 160, 8, 0, 72, 154, 164, 1, 175, 29, 155, 115, 187, 26, 117, 11, 165, 111, 95, 64, 23, 118, 69, 122, 58, 84, 24, 105, 60, 168, 144, 126, 173, 143, 179, 170, 50, 98, 9, 123, 162, 73, 83, 81, 169, 147, 15, 103, 55, 53, 137, 125, 177, 74, 77, 49, 14, 19, 148, 70, 185, 47, 42, 108, 112, 180, 31, 43, 132, 33, 91, 3], 'val_indices': [157, 80, 54, 171, 167, 152, 174, 181, 67, 88, 16, 61, 86, 18, 57, 7, 113, 133, 92, 107, 190, 96, 186, 38, 2, 114, 140, 78, 32, 89, 163, 156, 90, 21, 13, 145, 22, 178, 129], 'accuracy': 0.46153846153846156, 'kappa': -0.0819022457067371, 'auc': 0.4605263157894737}\n",
      "Running fold 2 with 152 training samples and 39 validation samples\n",
      "Fold 2: train indices: [126 135  73  82  84], val indices: [  3  94  29 129 187]\n",
      "Training data shape: (152, 64, 320, 1), Validation data shape: (39, 64, 320, 1)\n",
      "Fold 2 training loss: 0.08088438212871552\n",
      "y_true (val): [0 0 0 1 1]\n",
      "y_pred: [0 0 0 1 0]\n",
      "Appending results for fold 2: {'fold_index': 2, 'train_indices': [126, 135, 73, 82, 84, 124, 46, 186, 88, 175, 110, 122, 156, 163, 181, 86, 72, 114, 85, 146, 172, 54, 142, 131, 27, 19, 35, 119, 170, 185, 169, 4, 60, 67, 56, 17, 171, 111, 148, 71, 180, 63, 158, 145, 81, 93, 152, 157, 9, 89, 92, 160, 155, 133, 75, 107, 109, 36, 106, 174, 97, 28, 147, 38, 141, 64, 32, 143, 42, 37, 139, 176, 83, 2, 104, 120, 151, 44, 137, 189, 76, 33, 43, 10, 105, 179, 25, 65, 103, 117, 101, 39, 95, 13, 118, 78, 80, 57, 144, 18, 167, 134, 30, 11, 8, 130, 62, 31, 115, 159, 51, 98, 23, 140, 121, 132, 24, 166, 66, 149, 168, 34, 183, 20, 116, 1, 77, 0, 125, 79, 6, 99, 164, 153, 112, 190, 136, 161, 48, 16, 49, 55, 96, 100, 58, 53, 90, 41, 91, 21, 7, 14], 'val_indices': [3, 94, 29, 129, 187, 138, 26, 127, 87, 45, 15, 188, 165, 108, 123, 150, 102, 128, 178, 74, 70, 184, 47, 177, 162, 52, 173, 113, 69, 22, 154, 182, 59, 50, 40, 68, 61, 12, 5], 'accuracy': 0.6666666666666666, 'kappa': 0.33551769331585846, 'auc': 0.6105263157894737}\n",
      "New Max Found!\n",
      "Running fold 3 with 152 training samples and 39 validation samples\n",
      "Fold 3: train indices: [ 82  91 124   9  52], val indices: [  3  99 163 151  32]\n",
      "Training data shape: (152, 64, 320, 1), Validation data shape: (39, 64, 320, 1)\n",
      "Fold 3 training loss: 0.06397391855716705\n",
      "y_true (val): [0 1 1 1 0]\n",
      "y_pred: [0 0 1 1 0]\n",
      "Appending results for fold 3: {'fold_index': 3, 'train_indices': [82, 91, 124, 9, 52, 154, 166, 67, 54, 159, 114, 142, 115, 117, 138, 57, 40, 14, 156, 22, 85, 27, 133, 188, 108, 7, 96, 178, 97, 143, 111, 20, 139, 157, 144, 5, 93, 84, 168, 41, 187, 73, 74, 170, 186, 19, 4, 102, 58, 11, 46, 79, 81, 86, 175, 8, 59, 173, 131, 78, 2, 1, 153, 180, 184, 147, 12, 80, 123, 55, 48, 176, 158, 100, 112, 126, 106, 44, 116, 39, 50, 121, 161, 61, 169, 113, 171, 167, 181, 47, 16, 38, 62, 128, 136, 164, 43, 162, 26, 150, 177, 119, 185, 135, 140, 118, 53, 24, 29, 92, 51, 90, 64, 130, 37, 21, 77, 0, 101, 182, 145, 25, 109, 152, 13, 132, 75, 71, 189, 89, 160, 149, 42, 31, 190, 87, 94, 65, 141, 134, 56, 10, 120, 36, 103, 146, 137, 34, 63, 66, 17, 18], 'val_indices': [3, 99, 163, 151, 32, 83, 107, 45, 179, 127, 23, 76, 155, 148, 183, 68, 35, 30, 49, 104, 125, 28, 105, 129, 110, 172, 98, 70, 95, 33, 69, 60, 6, 165, 122, 15, 174, 72, 88], 'accuracy': 0.6153846153846154, 'kappa': 0.23127463863337716, 'auc': 0.6447368421052632}\n",
      "Running fold 4 with 152 training samples and 39 validation samples\n",
      "Fold 4: train indices: [ 69   5  39   8 128], val indices: [180  49 166  61  22]\n",
      "Training data shape: (152, 64, 320, 1), Validation data shape: (39, 64, 320, 1)\n",
      "Fold 4 training loss: 0.04600793495774269\n",
      "y_true (val): [1 0 1 0 0]\n",
      "y_pred: [1 0 1 1 1]\n",
      "Appending results for fold 4: {'fold_index': 4, 'train_indices': [69, 5, 39, 8, 128, 30, 155, 152, 168, 36, 27, 132, 118, 142, 189, 134, 68, 140, 32, 98, 183, 181, 89, 78, 167, 15, 171, 71, 103, 33, 125, 108, 144, 23, 14, 67, 172, 52, 3, 47, 46, 137, 38, 80, 9, 86, 62, 92, 105, 17, 130, 109, 45, 190, 70, 162, 83, 12, 81, 133, 148, 10, 11, 1, 59, 65, 129, 74, 124, 50, 42, 41, 112, 174, 25, 90, 161, 16, 64, 143, 104, 75, 88, 53, 110, 100, 87, 113, 96, 127, 187, 163, 85, 54, 91, 116, 123, 26, 157, 0, 21, 2, 4, 120, 7, 79, 121, 24, 99, 93, 165, 72, 107, 147, 135, 176, 51, 177, 179, 77, 58, 122, 173, 102, 175, 48, 56, 159, 101, 31, 154, 19, 149, 139, 114, 18, 82, 185, 106, 160, 111, 44, 13, 84, 170, 182, 184, 60, 151, 141, 169, 164], 'val_indices': [180, 49, 166, 61, 22, 34, 156, 119, 73, 55, 43, 35, 131, 28, 126, 20, 138, 37, 57, 153, 136, 146, 115, 29, 150, 145, 76, 186, 117, 95, 94, 158, 188, 178, 66, 40, 97, 63, 6], 'accuracy': 0.5897435897435898, 'kappa': 0.17894736842105252, 'auc': 0.5368421052631578}\n",
      "Final cross-validation results: {'params': [], 'mean_acc': 0.579, 'mean_kappa': 0.157, 'mean_auc': 0.558, 'mean_f1_left': array([0., 0., 0., 0., 0.]), 'mean_f1_right': array([0., 0., 0., 0., 0.]), 'mean_recall_left': array([0., 0., 0., 0., 0.]), 'mean_recall_right': array([0., 0., 0., 0., 0.]), 'mean_precision_left': array([0., 0., 0., 0., 0.]), 'mean_precision_right': array([0., 0., 0., 0., 0.]), 'all_folds': [{'fold_index': 0, 'train_indices': [177, 126, 95, 180, 74, 55, 80, 37, 20, 0, 78, 172, 65, 4, 47, 86, 57, 58, 56, 155, 60, 70, 90, 147, 163, 120, 145, 183, 101, 41, 71, 109, 1, 178, 14, 77, 62, 23, 173, 175, 59, 61, 165, 133, 2, 28, 176, 18, 139, 111, 141, 27, 42, 113, 94, 182, 184, 174, 43, 105, 26, 135, 168, 104, 164, 82, 79, 102, 93, 24, 167, 68, 169, 15, 185, 132, 140, 157, 81, 115, 103, 127, 148, 17, 50, 46, 38, 52, 112, 188, 7, 8, 89, 161, 187, 19, 29, 160, 13, 5, 179, 11, 91, 35, 151, 153, 92, 10, 114, 110, 32, 124, 162, 30, 34, 33, 22, 186, 63, 98, 159, 118, 85, 9, 116, 121, 152, 142, 36, 72, 122, 67, 154, 143, 189, 97, 108, 156, 88, 144, 171, 16, 3, 106, 44, 117, 170, 53, 99, 136, 87, 181], 'val_indices': [83, 73, 137, 66, 76, 190, 158, 125, 96, 12, 69, 107, 48, 54, 31, 119, 130, 138, 25, 40, 129, 49, 166, 128, 146, 6, 45, 134, 150, 131, 64, 51, 21, 75, 123, 149, 84, 39, 100], 'accuracy': 0.5641025641025641, 'kappa': 0.12185430463576152, 'auc': 0.5368421052631578}, {'fold_index': 1, 'train_indices': [44, 102, 25, 82, 37, 93, 46, 182, 20, 63, 17, 56, 35, 150, 99, 127, 71, 158, 188, 184, 176, 94, 116, 68, 6, 159, 121, 138, 52, 59, 172, 106, 142, 151, 135, 149, 51, 4, 183, 109, 10, 189, 87, 128, 39, 27, 65, 134, 141, 153, 34, 28, 48, 110, 30, 75, 130, 66, 139, 45, 5, 146, 12, 120, 136, 124, 97, 101, 62, 100, 119, 85, 161, 104, 41, 40, 131, 76, 166, 36, 79, 160, 8, 0, 72, 154, 164, 1, 175, 29, 155, 115, 187, 26, 117, 11, 165, 111, 95, 64, 23, 118, 69, 122, 58, 84, 24, 105, 60, 168, 144, 126, 173, 143, 179, 170, 50, 98, 9, 123, 162, 73, 83, 81, 169, 147, 15, 103, 55, 53, 137, 125, 177, 74, 77, 49, 14, 19, 148, 70, 185, 47, 42, 108, 112, 180, 31, 43, 132, 33, 91, 3], 'val_indices': [157, 80, 54, 171, 167, 152, 174, 181, 67, 88, 16, 61, 86, 18, 57, 7, 113, 133, 92, 107, 190, 96, 186, 38, 2, 114, 140, 78, 32, 89, 163, 156, 90, 21, 13, 145, 22, 178, 129], 'accuracy': 0.46153846153846156, 'kappa': -0.0819022457067371, 'auc': 0.4605263157894737}, {'fold_index': 2, 'train_indices': [126, 135, 73, 82, 84, 124, 46, 186, 88, 175, 110, 122, 156, 163, 181, 86, 72, 114, 85, 146, 172, 54, 142, 131, 27, 19, 35, 119, 170, 185, 169, 4, 60, 67, 56, 17, 171, 111, 148, 71, 180, 63, 158, 145, 81, 93, 152, 157, 9, 89, 92, 160, 155, 133, 75, 107, 109, 36, 106, 174, 97, 28, 147, 38, 141, 64, 32, 143, 42, 37, 139, 176, 83, 2, 104, 120, 151, 44, 137, 189, 76, 33, 43, 10, 105, 179, 25, 65, 103, 117, 101, 39, 95, 13, 118, 78, 80, 57, 144, 18, 167, 134, 30, 11, 8, 130, 62, 31, 115, 159, 51, 98, 23, 140, 121, 132, 24, 166, 66, 149, 168, 34, 183, 20, 116, 1, 77, 0, 125, 79, 6, 99, 164, 153, 112, 190, 136, 161, 48, 16, 49, 55, 96, 100, 58, 53, 90, 41, 91, 21, 7, 14], 'val_indices': [3, 94, 29, 129, 187, 138, 26, 127, 87, 45, 15, 188, 165, 108, 123, 150, 102, 128, 178, 74, 70, 184, 47, 177, 162, 52, 173, 113, 69, 22, 154, 182, 59, 50, 40, 68, 61, 12, 5], 'accuracy': 0.6666666666666666, 'kappa': 0.33551769331585846, 'auc': 0.6105263157894737}, {'fold_index': 3, 'train_indices': [82, 91, 124, 9, 52, 154, 166, 67, 54, 159, 114, 142, 115, 117, 138, 57, 40, 14, 156, 22, 85, 27, 133, 188, 108, 7, 96, 178, 97, 143, 111, 20, 139, 157, 144, 5, 93, 84, 168, 41, 187, 73, 74, 170, 186, 19, 4, 102, 58, 11, 46, 79, 81, 86, 175, 8, 59, 173, 131, 78, 2, 1, 153, 180, 184, 147, 12, 80, 123, 55, 48, 176, 158, 100, 112, 126, 106, 44, 116, 39, 50, 121, 161, 61, 169, 113, 171, 167, 181, 47, 16, 38, 62, 128, 136, 164, 43, 162, 26, 150, 177, 119, 185, 135, 140, 118, 53, 24, 29, 92, 51, 90, 64, 130, 37, 21, 77, 0, 101, 182, 145, 25, 109, 152, 13, 132, 75, 71, 189, 89, 160, 149, 42, 31, 190, 87, 94, 65, 141, 134, 56, 10, 120, 36, 103, 146, 137, 34, 63, 66, 17, 18], 'val_indices': [3, 99, 163, 151, 32, 83, 107, 45, 179, 127, 23, 76, 155, 148, 183, 68, 35, 30, 49, 104, 125, 28, 105, 129, 110, 172, 98, 70, 95, 33, 69, 60, 6, 165, 122, 15, 174, 72, 88], 'accuracy': 0.6153846153846154, 'kappa': 0.23127463863337716, 'auc': 0.6447368421052632}, {'fold_index': 4, 'train_indices': [69, 5, 39, 8, 128, 30, 155, 152, 168, 36, 27, 132, 118, 142, 189, 134, 68, 140, 32, 98, 183, 181, 89, 78, 167, 15, 171, 71, 103, 33, 125, 108, 144, 23, 14, 67, 172, 52, 3, 47, 46, 137, 38, 80, 9, 86, 62, 92, 105, 17, 130, 109, 45, 190, 70, 162, 83, 12, 81, 133, 148, 10, 11, 1, 59, 65, 129, 74, 124, 50, 42, 41, 112, 174, 25, 90, 161, 16, 64, 143, 104, 75, 88, 53, 110, 100, 87, 113, 96, 127, 187, 163, 85, 54, 91, 116, 123, 26, 157, 0, 21, 2, 4, 120, 7, 79, 121, 24, 99, 93, 165, 72, 107, 147, 135, 176, 51, 177, 179, 77, 58, 122, 173, 102, 175, 48, 56, 159, 101, 31, 154, 19, 149, 139, 114, 18, 82, 185, 106, 160, 111, 44, 13, 84, 170, 182, 184, 60, 151, 141, 169, 164], 'val_indices': [180, 49, 166, 61, 22, 34, 156, 119, 73, 55, 43, 35, 131, 28, 126, 20, 138, 37, 57, 153, 136, 146, 115, 29, 150, 145, 76, 186, 117, 95, 94, 158, 188, 178, 66, 40, 97, 63, 6], 'accuracy': 0.5897435897435898, 'kappa': 0.17894736842105252, 'auc': 0.5368421052631578}], 'std_acc': 0.068, 'std_kappa': 0.139, 'std_auc': 0.064}\n"
     ]
    }
   ],
   "source": [
    "from pickle import dump\n",
    "\n",
    "subjects = [30, 31, 33, 35, 36, 37, 38]\n",
    "\n",
    "for sbj in subjects[:]:\n",
    "  print('sbj = ', sbj)\n",
    "  load_args['sbj'] = sbj\n",
    "  results = train(db_name, load_args, cv_args, model_args, compile_args, fit_args, seed)\n",
    "  with open('sbj' + str(load_args['sbj']) + '.txt', 'wb') as f:\n",
    "    dump(results, f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d85fc6d3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-20T11:41:04.811760Z",
     "iopub.status.busy": "2025-01-20T11:41:04.810823Z",
     "iopub.status.idle": "2025-01-20T11:41:07.352786Z",
     "shell.execute_reply": "2025-01-20T11:41:07.351143Z"
    },
    "id": "V7-P0xjwzXVX",
    "outputId": "270dceef-351d-48d1-f71e-2c3367c7fdac",
    "papermill": {
     "duration": 2.572311,
     "end_time": "2025-01-20T11:41:07.355646",
     "exception": false,
     "start_time": "2025-01-20T11:41:04.783335",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  adding: sbj30.h5 (deflated 75%)\r\n",
      "  adding: sbj31.h5 (deflated 75%)\r\n",
      "  adding: sbj33.h5 (deflated 75%)\r\n",
      "  adding: sbj35.h5 (deflated 75%)\r\n",
      "  adding: sbj36.h5 (deflated 75%)\r\n",
      "  adding: sbj37.h5 (deflated 75%)\r\n",
      "  adding: sbj38.h5 (deflated 75%)\r\n",
      "  adding: sbj30.txt (deflated 44%)\r\n",
      "  adding: sbj31.txt (deflated 42%)\r\n",
      "  adding: sbj33.txt (deflated 41%)\r\n",
      "  adding: sbj35.txt (deflated 42%)\r\n",
      "  adding: sbj36.txt (deflated 40%)\r\n",
      "  adding: sbj37.txt (deflated 41%)\r\n",
      "  adding: sbj38.txt (deflated 40%)\r\n"
     ]
    }
   ],
   "source": [
    "!zip Models_64ch_EEGNet.zip ./*.h5 \n",
    "!zip Results_64ch_EEGNet.zip ./*.txt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "222eb9d0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-20T11:41:07.401469Z",
     "iopub.status.busy": "2025-01-20T11:41:07.401034Z",
     "iopub.status.idle": "2025-01-20T11:41:07.406518Z",
     "shell.execute_reply": "2025-01-20T11:41:07.405362Z"
    },
    "papermill": {
     "duration": 0.030956,
     "end_time": "2025-01-20T11:41:07.408708",
     "exception": false,
     "start_time": "2025-01-20T11:41:07.377752",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#import pickle as pkl\n",
    "\n",
    "#with open(file= '/kaggle/working/sbj14.txt', mode = 'rb' ) as f:\n",
    "#    results_64ch_ShallowConvNet = pkl.load(f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ee87f6fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-20T11:41:07.455413Z",
     "iopub.status.busy": "2025-01-20T11:41:07.454372Z",
     "iopub.status.idle": "2025-01-20T11:41:07.460789Z",
     "shell.execute_reply": "2025-01-20T11:41:07.459657Z"
    },
    "papermill": {
     "duration": 0.032401,
     "end_time": "2025-01-20T11:41:07.463265",
     "exception": false,
     "start_time": "2025-01-20T11:41:07.430864",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#results_64ch_ShallowConvNet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a167ac02",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-20T11:41:07.509595Z",
     "iopub.status.busy": "2025-01-20T11:41:07.509185Z",
     "iopub.status.idle": "2025-01-20T11:41:07.514277Z",
     "shell.execute_reply": "2025-01-20T11:41:07.513057Z"
    },
    "papermill": {
     "duration": 0.031221,
     "end_time": "2025-01-20T11:41:07.516465",
     "exception": false,
     "start_time": "2025-01-20T11:41:07.485244",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#with open(file= '/kaggle/working/sbj2.txt', mode = 'rb' ) as f:\n",
    " #   results_64ch_ShallowConvNet = pkl.load(f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "647336bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-20T11:41:07.562553Z",
     "iopub.status.busy": "2025-01-20T11:41:07.562131Z",
     "iopub.status.idle": "2025-01-20T11:41:07.566830Z",
     "shell.execute_reply": "2025-01-20T11:41:07.565924Z"
    },
    "papermill": {
     "duration": 0.030241,
     "end_time": "2025-01-20T11:41:07.568766",
     "exception": false,
     "start_time": "2025-01-20T11:41:07.538525",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#results_64ch_ShallowConvNet"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 1645904,
     "sourceId": 2702213,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 1269900,
     "sourceId": 2702226,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 2984453,
     "sourceId": 5137200,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 3008205,
     "sourceId": 5175158,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30786,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 27853.014394,
   "end_time": "2025-01-20T11:41:10.318859",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-01-20T03:56:57.304465",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
