{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9b8b2c52",
   "metadata": {
    "id": "x9LNzEYERaH2",
    "papermill": {
     "duration": 0.006489,
     "end_time": "2025-05-21T01:27:53.470013",
     "exception": false,
     "start_time": "2025-05-21T01:27:53.463524",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Download Packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8297c63b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T01:27:53.480628Z",
     "iopub.status.busy": "2025-05-21T01:27:53.480068Z",
     "iopub.status.idle": "2025-05-21T01:27:54.763050Z",
     "shell.execute_reply": "2025-05-21T01:27:54.761694Z"
    },
    "papermill": {
     "duration": 1.29138,
     "end_time": "2025-05-21T01:27:54.765859",
     "exception": false,
     "start_time": "2025-05-21T01:27:53.474479",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/bin/bash: nvidia-smi: command not found\r\n"
     ]
    }
   ],
   "source": [
    "!nvidia-smi -L"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9a754f44",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T01:27:54.776101Z",
     "iopub.status.busy": "2025-05-21T01:27:54.775668Z",
     "iopub.status.idle": "2025-05-21T01:28:54.230857Z",
     "shell.execute_reply": "2025-05-21T01:28:54.228767Z"
    },
    "id": "K0oS6IH7VTZX",
    "papermill": {
     "duration": 59.4641,
     "end_time": "2025-05-21T01:28:54.234157",
     "exception": false,
     "start_time": "2025-05-21T01:27:54.770057",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "!pip install -U git+https://github.com/UN-GCPDS/python-gcpds.databases #Package for database reading.\n",
    "!pip install mne #The MNE Package is installed\n",
    "FILEID = \"1lo0MjWLvsyne2CgTA6VZ2HGY9SKxiwZ7\"\n",
    "!wget --load-cookies /tmp/cookies.txt \"https://docs.google.com/uc?export=download&confirm=$(wget --quiet --save-cookies /tmp/cookies.txt --keep-session-cookies --no-check-certificate 'https://docs.google.com/uc?export=download&id='$FILEID -O- | sed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\\1\\n/p')&id=\"$FILEID -O MI_EEG_ClassMeth.zip && rm -rf /tmp/cookies.txt\n",
    "!unzip MI_EEG_ClassMeth.zip #Package with useful functions for motor imagery classification based in EEG.\n",
    "!pip install -U git+https://github.com/UN-GCPDS/python-gcpds.EEG_Tensorflow_models.git\n",
    "!dir"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0cd47240",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T01:28:54.247590Z",
     "iopub.status.busy": "2025-05-21T01:28:54.247139Z",
     "iopub.status.idle": "2025-05-21T01:30:53.729124Z",
     "shell.execute_reply": "2025-05-21T01:30:53.722091Z"
    },
    "papermill": {
     "duration": 119.501832,
     "end_time": "2025-05-21T01:30:53.740509",
     "exception": false,
     "start_time": "2025-05-21T01:28:54.238677",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r\n",
      "\r\n",
      "\r\n",
      "E: Unable to locate package libcudnn8\r\n",
      "Collecting tensorflow==2.8.2\r\n",
      "  Downloading tensorflow-2.8.2-cp310-cp310-manylinux2010_x86_64.whl.metadata (2.9 kB)\r\n",
      "Requirement already satisfied: absl-py>=0.4.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (1.4.0)\r\n",
      "Requirement already satisfied: astunparse>=1.6.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (1.6.3)\r\n",
      "Requirement already satisfied: flatbuffers>=1.12 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (24.3.25)\r\n",
      "Requirement already satisfied: gast>=0.2.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (0.5.4)\r\n",
      "Requirement already satisfied: google-pasta>=0.1.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (0.2.0)\r\n",
      "Requirement already satisfied: h5py>=2.9.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (3.11.0)\r\n",
      "Collecting keras-preprocessing>=1.1.1 (from tensorflow==2.8.2)\r\n",
      "  Downloading Keras_Preprocessing-1.1.2-py2.py3-none-any.whl.metadata (1.9 kB)\r\n",
      "Requirement already satisfied: libclang>=9.0.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (18.1.1)\r\n",
      "Requirement already satisfied: numpy>=1.20 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (1.26.4)\r\n",
      "Requirement already satisfied: opt-einsum>=2.3.2 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (3.3.0)\r\n",
      "Collecting protobuf<3.20,>=3.9.2 (from tensorflow==2.8.2)\r\n",
      "  Downloading protobuf-3.19.6-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (787 bytes)\r\n",
      "Requirement already satisfied: setuptools in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (70.0.0)\r\n",
      "Requirement already satisfied: six>=1.12.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (1.16.0)\r\n",
      "Requirement already satisfied: termcolor>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (2.4.0)\r\n",
      "Requirement already satisfied: typing-extensions>=3.6.6 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (4.12.2)\r\n",
      "Requirement already satisfied: wrapt>=1.11.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (1.16.0)\r\n",
      "Collecting tensorboard<2.9,>=2.8 (from tensorflow==2.8.2)\r\n",
      "  Downloading tensorboard-2.8.0-py3-none-any.whl.metadata (1.9 kB)\r\n",
      "Collecting tensorflow-estimator<2.9,>=2.8 (from tensorflow==2.8.2)\r\n",
      "  Downloading tensorflow_estimator-2.8.0-py2.py3-none-any.whl.metadata (1.3 kB)\r\n",
      "Collecting keras<2.9,>=2.8.0rc0 (from tensorflow==2.8.2)\r\n",
      "  Downloading keras-2.8.0-py2.py3-none-any.whl.metadata (1.3 kB)\r\n",
      "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (0.37.0)\r\n",
      "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.8.2) (1.64.1)\r\n",
      "Requirement already satisfied: wheel<1.0,>=0.23.0 in /opt/conda/lib/python3.10/site-packages (from astunparse>=1.6.0->tensorflow==2.8.2) (0.43.0)\r\n",
      "Requirement already satisfied: google-auth<3,>=1.6.3 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.9,>=2.8->tensorflow==2.8.2) (2.30.0)\r\n",
      "Collecting google-auth-oauthlib<0.5,>=0.4.1 (from tensorboard<2.9,>=2.8->tensorflow==2.8.2)\r\n",
      "  Downloading google_auth_oauthlib-0.4.6-py2.py3-none-any.whl.metadata (2.7 kB)\r\n",
      "Requirement already satisfied: markdown>=2.6.8 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.9,>=2.8->tensorflow==2.8.2) (3.6)\r\n",
      "Requirement already satisfied: requests<3,>=2.21.0 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.9,>=2.8->tensorflow==2.8.2) (2.32.3)\r\n",
      "Collecting tensorboard-data-server<0.7.0,>=0.6.0 (from tensorboard<2.9,>=2.8->tensorflow==2.8.2)\r\n",
      "  Downloading tensorboard_data_server-0.6.1-py3-none-manylinux2010_x86_64.whl.metadata (1.1 kB)\r\n",
      "Collecting tensorboard-plugin-wit>=1.6.0 (from tensorboard<2.9,>=2.8->tensorflow==2.8.2)\r\n",
      "  Downloading tensorboard_plugin_wit-1.8.1-py3-none-any.whl.metadata (873 bytes)\r\n",
      "Requirement already satisfied: werkzeug>=0.11.15 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.9,>=2.8->tensorflow==2.8.2) (3.0.4)\r\n",
      "Requirement already satisfied: cachetools<6.0,>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow==2.8.2) (4.2.4)\r\n",
      "Requirement already satisfied: pyasn1-modules>=0.2.1 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow==2.8.2) (0.4.0)\r\n",
      "Requirement already satisfied: rsa<5,>=3.1.4 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow==2.8.2) (4.9)\r\n",
      "Requirement already satisfied: requests-oauthlib>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.9,>=2.8->tensorflow==2.8.2) (2.0.0)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow==2.8.2) (3.3.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow==2.8.2) (3.7)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow==2.8.2) (1.26.18)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow==2.8.2) (2024.8.30)\r\n",
      "Requirement already satisfied: MarkupSafe>=2.1.1 in /opt/conda/lib/python3.10/site-packages (from werkzeug>=0.11.15->tensorboard<2.9,>=2.8->tensorflow==2.8.2) (2.1.5)\r\n",
      "Requirement already satisfied: pyasn1<0.7.0,>=0.4.6 in /opt/conda/lib/python3.10/site-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow==2.8.2) (0.6.0)\r\n",
      "Requirement already satisfied: oauthlib>=3.0.0 in /opt/conda/lib/python3.10/site-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.9,>=2.8->tensorflow==2.8.2) (3.2.2)\r\n",
      "Downloading tensorflow-2.8.2-cp310-cp310-manylinux2010_x86_64.whl (498.0 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m498.0/498.0 MB\u001b[0m \u001b[31m3.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading keras-2.8.0-py2.py3-none-any.whl (1.4 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.4/1.4 MB\u001b[0m \u001b[31m37.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading Keras_Preprocessing-1.1.2-py2.py3-none-any.whl (42 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m42.6/42.6 kB\u001b[0m \u001b[31m1.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading protobuf-3.19.6-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.1 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.1/1.1 MB\u001b[0m \u001b[31m29.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading tensorboard-2.8.0-py3-none-any.whl (5.8 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m5.8/5.8 MB\u001b[0m \u001b[31m69.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading tensorflow_estimator-2.8.0-py2.py3-none-any.whl (462 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m462.3/462.3 kB\u001b[0m \u001b[31m15.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading google_auth_oauthlib-0.4.6-py2.py3-none-any.whl (18 kB)\r\n",
      "Downloading tensorboard_data_server-0.6.1-py3-none-manylinux2010_x86_64.whl (4.9 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.9/4.9 MB\u001b[0m \u001b[31m75.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading tensorboard_plugin_wit-1.8.1-py3-none-any.whl (781 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m781.3/781.3 kB\u001b[0m \u001b[31m26.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hInstalling collected packages: tensorflow-estimator, tensorboard-plugin-wit, keras, tensorboard-data-server, protobuf, keras-preprocessing, google-auth-oauthlib, tensorboard, tensorflow\r\n",
      "  Attempting uninstall: tensorflow-estimator\r\n",
      "    Found existing installation: tensorflow-estimator 2.15.0\r\n",
      "    Uninstalling tensorflow-estimator-2.15.0:\r\n",
      "      Successfully uninstalled tensorflow-estimator-2.15.0\r\n",
      "  Attempting uninstall: keras\r\n",
      "    Found existing installation: keras 3.3.3\r\n",
      "    Uninstalling keras-3.3.3:\r\n",
      "      Successfully uninstalled keras-3.3.3\r\n",
      "  Attempting uninstall: tensorboard-data-server\r\n",
      "    Found existing installation: tensorboard-data-server 0.7.2\r\n",
      "    Uninstalling tensorboard-data-server-0.7.2:\r\n",
      "      Successfully uninstalled tensorboard-data-server-0.7.2\r\n",
      "  Attempting uninstall: protobuf\r\n",
      "    Found existing installation: protobuf 3.20.3\r\n",
      "    Uninstalling protobuf-3.20.3:\r\n",
      "      Successfully uninstalled protobuf-3.20.3\r\n",
      "  Attempting uninstall: google-auth-oauthlib\r\n",
      "    Found existing installation: google-auth-oauthlib 1.2.0\r\n",
      "    Uninstalling google-auth-oauthlib-1.2.0:\r\n",
      "      Successfully uninstalled google-auth-oauthlib-1.2.0\r\n",
      "  Attempting uninstall: tensorboard\r\n",
      "    Found existing installation: tensorboard 2.16.2\r\n",
      "    Uninstalling tensorboard-2.16.2:\r\n",
      "      Successfully uninstalled tensorboard-2.16.2\r\n",
      "  Attempting uninstall: tensorflow\r\n",
      "    Found existing installation: tensorflow 2.16.1\r\n",
      "    Uninstalling tensorflow-2.16.1:\r\n",
      "      Successfully uninstalled tensorflow-2.16.1\r\n",
      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "apache-beam 2.46.0 requires cloudpickle~=2.2.1, but you have cloudpickle 3.0.0 which is incompatible.\r\n",
      "apache-beam 2.46.0 requires dill<0.3.2,>=0.3.1.1, but you have dill 0.3.8 which is incompatible.\r\n",
      "apache-beam 2.46.0 requires numpy<1.25.0,>=1.14.3, but you have numpy 1.26.4 which is incompatible.\r\n",
      "apache-beam 2.46.0 requires pyarrow<10.0.0,>=3.0.0, but you have pyarrow 17.0.0 which is incompatible.\r\n",
      "google-ai-generativelanguage 0.6.10 requires protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.2, but you have protobuf 3.19.6 which is incompatible.\r\n",
      "google-cloud-aiplatform 0.6.0a1 requires google-api-core[grpc]<2.0.0dev,>=1.22.2, but you have google-api-core 2.11.1 which is incompatible.\r\n",
      "google-cloud-automl 1.0.1 requires google-api-core[grpc]<2.0.0dev,>=1.14.0, but you have google-api-core 2.11.1 which is incompatible.\r\n",
      "google-cloud-language 2.14.0 requires protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.2, but you have protobuf 3.19.6 which is incompatible.\r\n",
      "google-cloud-spanner 3.47.0 requires protobuf!=3.20.0,!=3.20.1,!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.2, but you have protobuf 3.19.6 which is incompatible.\r\n",
      "google-cloud-videointelligence 2.13.5 requires protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.2, but you have protobuf 3.19.6 which is incompatible.\r\n",
      "kfp 2.5.0 requires google-cloud-storage<3,>=2.2.1, but you have google-cloud-storage 1.44.0 which is incompatible.\r\n",
      "onnx 1.17.0 requires protobuf>=3.20.2, but you have protobuf 3.19.6 which is incompatible.\r\n",
      "tensorboardx 2.6.2.2 requires protobuf>=3.20, but you have protobuf 3.19.6 which is incompatible.\r\n",
      "tensorflow-datasets 4.9.6 requires protobuf>=3.20, but you have protobuf 3.19.6 which is incompatible.\r\n",
      "tensorflow-decision-forests 1.9.1 requires tensorflow~=2.16.1, but you have tensorflow 2.8.2 which is incompatible.\r\n",
      "tensorflow-serving-api 2.16.1 requires protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3, but you have protobuf 3.19.6 which is incompatible.\r\n",
      "tensorflow-serving-api 2.16.1 requires tensorflow<3,>=2.16.1, but you have tensorflow 2.8.2 which is incompatible.\r\n",
      "tensorflow-text 2.16.1 requires tensorflow<2.17,>=2.16.1; platform_machine != \"arm64\" or platform_system != \"Darwin\", but you have tensorflow 2.8.2 which is incompatible.\r\n",
      "tf-keras 2.16.0 requires tensorflow<2.17,>=2.16, but you have tensorflow 2.8.2 which is incompatible.\u001b[0m\u001b[31m\r\n",
      "\u001b[0mSuccessfully installed google-auth-oauthlib-0.4.6 keras-2.8.0 keras-preprocessing-1.1.2 protobuf-3.19.6 tensorboard-2.8.0 tensorboard-data-server-0.6.1 tensorboard-plugin-wit-1.8.1 tensorflow-2.8.2 tensorflow-estimator-2.8.0\r\n"
     ]
    }
   ],
   "source": [
    "!apt-get install --allow-change-held-packages libcudnn8=8.1.0.77-1+cuda11.2 -y\n",
    "!pip install tensorflow==2.8.2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "10fcd6e3",
   "metadata": {
    "papermill": {
     "duration": 0.02193,
     "end_time": "2025-05-21T01:30:53.807689",
     "exception": false,
     "start_time": "2025-05-21T01:30:53.785759",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "56cc1b21",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T01:30:53.858737Z",
     "iopub.status.busy": "2025-05-21T01:30:53.857983Z",
     "iopub.status.idle": "2025-05-21T01:31:09.221133Z",
     "shell.execute_reply": "2025-05-21T01:31:09.217499Z"
    },
    "id": "yE1sbHYQVbBq",
    "papermill": {
     "duration": 15.400876,
     "end_time": "2025-05-21T01:31:09.230175",
     "exception": false,
     "start_time": "2025-05-21T01:30:53.829299",
     "status": "completed"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [],
   "source": [
    "from gcpds.databases.BCI_Competition_IV import Dataset_2a\n",
    "from typing import Sequence, Tuple\n",
    "from MI_EEG_ClassMeth.FeatExtraction import TimeFrequencyRpr\n",
    "import numpy as np\n",
    "from scipy.signal import resample\n",
    "\n",
    "def load_BCICIV2a(db: Dataset_2a,\n",
    "               sbj: int,\n",
    "               mode: str,\n",
    "               fs: float, \n",
    "               f_bank: np.ndarray, \n",
    "               vwt: np.ndarray, \n",
    "               new_fs: float) -> np.ndarray:\n",
    "\n",
    "  tf_repr = TimeFrequencyRpr(sfreq = fs, f_bank = f_bank, vwt = vwt)\n",
    "\n",
    "  db.load_subject(sbj, mode = mode)\n",
    "    \n",
    "  X, y = db.get_data() #Load all classes, all channels {EEG, EOG}, reject bad trials\n",
    "\n",
    "  X = X[:,:-3,:] # pick EEG channels\n",
    "  X = X*1e6 #uV\n",
    "  X = np.squeeze(tf_repr.transform(X))\n",
    "  #Resampling\n",
    "  if new_fs == fs:\n",
    "    print('No resampling, since new sampling rate same.')\n",
    "  else:\n",
    "    print(\"Resampling from {:f} to {:f} Hz.\".format(fs, new_fs))\n",
    "    X = resample(X, int((X.shape[-1]/fs)*new_fs), axis = -1)\n",
    "    \n",
    "  return X, y\n",
    "\n",
    "\n",
    "from gcpds.databases import GIGA_MI_ME\n",
    "\n",
    "def load_GIGA_MI_ME(db: GIGA_MI_ME,\n",
    "              sbj: int,\n",
    "              eeg_ch_names: Sequence[str],\n",
    "              fs: float, \n",
    "              f_bank: np.ndarray, \n",
    "              vwt: np.ndarray, \n",
    "              new_fs: float) -> Tuple[np.ndarray, np.ndarray]:\n",
    "\n",
    "    index_eeg_chs = db.format_channels_selectors(channels=eeg_ch_names) - 1\n",
    "\n",
    "    tf_repr = TimeFrequencyRpr(sfreq=fs, f_bank=f_bank, vwt=vwt)\n",
    "\n",
    "    # Load subject data\n",
    "    db.load_subject(sbj)\n",
    "    X, y = db.get_data(classes=['left hand mi', 'right hand mi'])\n",
    "    \n",
    "    # Debugging total trials\n",
    "    print(f\"Total trials loaded: {X.shape[0]}\")\n",
    "    print(f\"Shape of X: {X.shape}, Shape of y: {y.shape}\")\n",
    "\n",
    "    # Spatial rearrangement\n",
    "    X = X[:, index_eeg_chs, :]  \n",
    "    X = np.squeeze(tf_repr.transform(X))\n",
    "\n",
    "    # Resampling\n",
    "    if new_fs == fs:\n",
    "        print('No resampling, since new sampling rate is the same.')\n",
    "    else:\n",
    "        print(f\"Resampling from {fs} to {new_fs} Hz.\")\n",
    "        X = resample(X, int((X.shape[-1] / fs) * new_fs), axis=-1)\n",
    "    \n",
    "    return X, y\n",
    "\n",
    "\n",
    "\n",
    "def load_DB(db_name, **load_args):\n",
    "  if db_name == 'BCICIV2a':\n",
    "    X_train, y_train = load_BCICIV2a(**load_args, mode = 'training')\n",
    "    X_test, y_test = load_BCICIV2a(**load_args, mode = 'evaluation')\n",
    "\n",
    "    X_train = np.concatenate([X_train, X_test], axis = 0)\n",
    "    y_train = np.concatenate([y_train, y_test], axis = 0)\n",
    "\n",
    "  elif db_name == 'GIGA_MI_ME':\n",
    "    X_train, y_train = load_GIGA_MI_ME(**load_args)\n",
    "    \n",
    "  else:\n",
    "    raise ValueError('No valid database name')\n",
    "\n",
    "  return X_train, y_train\n",
    "\n",
    "\n",
    "from EEG_Tensorflow_models.Models import DeepConvNet, ShallowConvNet, EEGNet, DMTL_BCI, TCNet_fusion, PST_attention\n",
    "\n",
    "\n",
    "def get_model(model_name, nb_classes):\n",
    "  if model_name == 'DeepConvNet':\n",
    "    model = DeepConvNet\n",
    "    model_params = dict(nb_classes = nb_classes,\n",
    "                      dropoutRate = 0.5, version='2018')\n",
    "    \n",
    "  elif model_name == 'ShallowConvNet':\n",
    "    model = ShallowConvNet\n",
    "    model_params = dict(nb_classes = nb_classes,\n",
    "                      dropoutRate = 0.5,\n",
    "                      version = '2018')\n",
    "    \n",
    "  elif model_name == 'EEGNet':\n",
    "    model = EEGNet\n",
    "    model_params = dict(nb_classes = nb_classes,\n",
    "                      dropoutRate = 0.5,\n",
    "                      kernLength = 32,\n",
    "                      F1 = 8,\n",
    "                      D = 2,\n",
    "                      F2 = 16,\n",
    "                      norm_rate = 0.25, \n",
    "                      dropoutType = 'Dropout')\n",
    "    \n",
    "  elif model_name == 'DMTL_BCI':\n",
    "    model = DMTL_BCI\n",
    "    model_params = dict(nb_classes = nb_classes,\n",
    "                      dropoutRate = 0.5,\n",
    "                      l1 = 0,\n",
    "                      l2 = 0)\n",
    "    \n",
    "  elif model_name == 'TCNet_fusion':\n",
    "    model = TCNet_fusion\n",
    "    model_params = dict(nb_classes = nb_classes,\n",
    "                      layers = 2,\n",
    "                      kernel_s = 4,\n",
    "                      filt = 12,\n",
    "                      dropout = 0.3,\n",
    "                      activation = 'relu',\n",
    "                      F1 = 24,\n",
    "                      D = 2,\n",
    "                      kernLength = 32,\n",
    "                      N_residuals = 2)\n",
    "    \n",
    "  elif model_name == 'PST_attention':\n",
    "    model = PST_attention\n",
    "    model_params = dict(nb_classes = nb_classes,\n",
    "                      dropoutRate = 0.5,\n",
    "                      last_layer = 'Dense')\n",
    "    \n",
    "  else:\n",
    "    raise ValueError('No valid model name')\n",
    "    \n",
    "  return model, model_params\n",
    "\n",
    "from tensorflow.random import set_seed\n",
    "from tensorflow.keras.backend import clear_session\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "from sklearn.metrics import accuracy_score, cohen_kappa_score, roc_auc_score,\\\n",
    "                            f1_score, recall_score, precision_score\n",
    "\n",
    "def train(db_name, load_args, cv_args, model_args, compile_args, fit_args, seed):\n",
    "    X_train, y_train = load_DB(db_name, **load_args)\n",
    "    X_train = X_train[..., np.newaxis]  # Add channel dimension\n",
    "    print(f\"X_train shape: {X_train.shape}, y_train shape: {y_train.shape}\")\n",
    "    \n",
    "    cv_results = {'params': [],\n",
    "                  'mean_acc': np.zeros(cv_args['cv'].get_n_splits()),\n",
    "                  'mean_kappa': np.zeros(cv_args['cv'].get_n_splits()),\n",
    "                  'mean_auc': np.zeros(cv_args['cv'].get_n_splits()),\n",
    "                  'mean_f1_left': np.zeros(cv_args['cv'].get_n_splits()),\n",
    "                  'mean_f1_right': np.zeros(cv_args['cv'].get_n_splits()),\n",
    "                  'mean_recall_left': np.zeros(cv_args['cv'].get_n_splits()),\n",
    "                  'mean_recall_right': np.zeros(cv_args['cv'].get_n_splits()),\n",
    "                  'mean_precision_left': np.zeros(cv_args['cv'].get_n_splits()),\n",
    "                  'mean_precision_right': np.zeros(cv_args['cv'].get_n_splits()),\n",
    "                  'all_folds': []}\n",
    "    \n",
    "    k = 0\n",
    "    max_acc = -np.inf\n",
    "\n",
    "    # Loop through folds\n",
    "    for train_index, val_index in cv_args['cv'].split(X_train, y_train):\n",
    "        print(f\"Running fold {k} with {len(train_index)} training samples and {len(val_index)} validation samples\")\n",
    "        print(f\"Fold {k}: train indices: {train_index[:5]}, val indices: {val_index[:5]}\")  # Print first indices\n",
    "        \n",
    "        X, X_val = X_train[train_index], X_train[val_index]\n",
    "        y, y_val = y_train[train_index], y_train[val_index]\n",
    "        \n",
    "        if model_args['autoencoder']:\n",
    "            y = [X, y]\n",
    "        \n",
    "        print(f\"Training data shape: {X.shape}, Validation data shape: {X_val.shape}\")\n",
    "        \n",
    "        batch_size, C, T = X.shape[:-1]\n",
    "        clear_session()\n",
    "        set_seed(seed)\n",
    "\n",
    "        model_cll, model_params = get_model(model_args['model_name'], model_args['nb_classes'])\n",
    "        model = model_cll(**model_params, Chans=64, Samples=T)\n",
    "        model.compile(loss=compile_args['loss'], optimizer=Adam(compile_args['init_lr']))\n",
    "\n",
    "        history = model.fit(X, y, batch_size=batch_size, **fit_args)\n",
    "        print(f\"Fold {k} training loss: {history.history['loss'][-1]}\")  # Print final loss\n",
    "\n",
    "        if model_args['autoencoder']:\n",
    "            y_prob = model.predict(X_val)[-1]\n",
    "        else:\n",
    "            y_prob = model.predict(X_val)\n",
    "        y_pred = np.argmax(y_prob, axis=1)\n",
    "\n",
    "        print(f\"y_true (val): {y_val[:5]}\")\n",
    "        print(f\"y_pred: {y_pred[:5]}\")\n",
    "        \n",
    "        # Calculate metrics\n",
    "        acc = accuracy_score(y_val, y_pred)\n",
    "        kappa = cohen_kappa_score(y_val, y_pred)\n",
    "        auc = roc_auc_score(y_val, y_prob[:, 1], average='macro') if model_args['nb_classes'] == 2 else None\n",
    "        \n",
    "        # Save metrics for this fold\n",
    "        fold_result = {\n",
    "            'fold_index': k,\n",
    "            'train_indices': train_index.tolist(),\n",
    "            'val_indices': val_index.tolist(),\n",
    "            'accuracy': acc,\n",
    "            'kappa': kappa,\n",
    "            'auc': auc\n",
    "        }\n",
    "        print(f\"Appending results for fold {k}: {fold_result}\")\n",
    "        cv_results['all_folds'].append(fold_result)\n",
    "\n",
    "        # Update overall fold metrics\n",
    "        cv_results['mean_acc'][k] = acc\n",
    "        cv_results['mean_kappa'][k] = kappa\n",
    "        if auc is not None:\n",
    "            cv_results['mean_auc'][k] = auc\n",
    "        \n",
    "        # Save the best model weights\n",
    "        if acc > max_acc:\n",
    "            print('New Max Found!')\n",
    "            max_acc = acc\n",
    "            model.save_weights(f'sbj{load_args[\"sbj\"]}.h5')\n",
    "\n",
    "        k += 1\n",
    "    \n",
    "    # Calculate mean and std metrics\n",
    "    cv_results['std_acc'] = round(cv_results['mean_acc'].std(), 3)\n",
    "    cv_results['mean_acc'] = round(cv_results['mean_acc'].mean(), 3)\n",
    "    cv_results['std_kappa'] = round(cv_results['mean_kappa'].std(), 3)\n",
    "    cv_results['mean_kappa'] = round(cv_results['mean_kappa'].mean(), 3)\n",
    "    cv_results['std_auc'] = round(cv_results['mean_auc'].std(), 3)\n",
    "    cv_results['mean_auc'] = round(cv_results['mean_auc'].mean(), 3)\n",
    "    \n",
    "    print(f\"Final cross-validation results: {cv_results}\")\n",
    "    return cv_results\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "793cdaed",
   "metadata": {
    "id": "uBAeW6J5S68g",
    "papermill": {
     "duration": 0.050219,
     "end_time": "2025-05-21T01:31:09.342737",
     "exception": false,
     "start_time": "2025-05-21T01:31:09.292518",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Config"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cc4c47ea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T01:31:09.448834Z",
     "iopub.status.busy": "2025-05-21T01:31:09.447812Z",
     "iopub.status.idle": "2025-05-21T01:31:09.455867Z",
     "shell.execute_reply": "2025-05-21T01:31:09.454159Z"
    },
    "id": "2I3IQnNSS9-a",
    "papermill": {
     "duration": 0.06277,
     "end_time": "2025-05-21T01:31:09.459502",
     "exception": false,
     "start_time": "2025-05-21T01:31:09.396732",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Marcos, use these two variables to run the state of the art. First, for BCICIV2a run all the models.\n",
    "# Remeber that this network DMTL_BCI is an autoencoder. Set the nb_classses parameter depending of the database.\n",
    "# set autoencoder based on the model\n",
    "# We need to run all these tests again. Do not forget to add the recall, preci, and f1 for each class (bci 4, giga 2)\n",
    "db_name = 'GIGA_MI_ME'\n",
    "model_args = dict(model_name = 'ShallowConvNet',\n",
    "                  nb_classes = 2,\n",
    "                  autoencoder = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "191d1bb2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T01:31:09.564347Z",
     "iopub.status.busy": "2025-05-21T01:31:09.563666Z",
     "iopub.status.idle": "2025-05-21T01:31:09.591387Z",
     "shell.execute_reply": "2025-05-21T01:31:09.589473Z"
    },
    "id": "tqMhUFoBIc3B",
    "outputId": "1405fd59-1374-4d5d-8e3a-5e7a45c79bba",
    "papermill": {
     "duration": 0.082247,
     "end_time": "2025-05-21T01:31:09.596769",
     "exception": false,
     "start_time": "2025-05-21T01:31:09.514522",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from tensorflow.keras.callbacks import ReduceLROnPlateau, TerminateOnNaN\n",
    "import numpy as np\n",
    "from tensorflow.keras.losses import SparseCategoricalCrossentropy, MeanSquaredError\n",
    "from sklearn.model_selection import StratifiedShuffleSplit\n",
    "\n",
    "if db_name == 'BCICIV2a':\n",
    "  db = Dataset_2a('/kaggle/input/dataset-2a')\n",
    "  fs = db.metadata['sampling_rate']\n",
    "  load_args = dict(db = db,\n",
    "                 fs = fs,\n",
    "                 f_bank = np.asarray([[4., 40.]]),\n",
    "                 vwt = np.asarray([[2.5, 6]]),\n",
    "                 new_fs = 128.)\n",
    "  subjects = np.arange(db.metadata['subjects']) + 1\n",
    "  \n",
    "elif db_name == 'GIGA_MI_ME':\n",
    "  db = GIGA_MI_ME('/kaggle/input/giga-science-gcpds/GIGA_MI_ME')\n",
    "  fs = db.metadata['sampling_rate']\n",
    "\n",
    "  eeg_ch_names = ['Fp1','Fpz','Fp2',\n",
    "                     'AF7','AF3','AFz','AF4','AF8',\n",
    "                    'F7','F5','F3','F1','Fz','F2','F4','F6','F8',\n",
    "                   'FT7','FC5','FC3','FC1','FCz','FC2','FC4','FC6','FT8',\n",
    "                    'T7','C5','C3','C1','Cz','C2','C4','C6','T8',\n",
    "                   'TP7','CP5','CP3','CP1','CPz','CP2','CP4','CP6','TP8',\n",
    "                    'P9','P7','P5','P3','P1','Pz','P2','P4','P6','P8','P10',\n",
    "                    'PO7','PO3','POz','PO4','PO8',\n",
    "                    'O1','Oz','O2',\n",
    "                    'Iz']\n",
    "\n",
    "  # eeg_ch_names = ['Fp1','Fp2',\n",
    "  #                  'AF3','AF4',\n",
    "  #                  'F7','F3','Fz','F4','F8',\n",
    "  #                  'FC5','FC1','FC2','FC6',\n",
    "  #                  'T7','C3','Cz','C4','T8',\n",
    "  #                  'CP5','CP1','CP2','CP6',\n",
    "  #                  'P7','P3','Pz','P4','P8',\n",
    "  #                  'PO3','PO4',\n",
    "  #                  'O1','Oz','O2']\n",
    "\n",
    "  # eeg_ch_names = ['Fp1','Fp2',\n",
    "  #                 'F7','F3','F4','F8',\n",
    "  #                 'T7','C3','C4','T8',\n",
    "  #                 'P7','P3','P4','P8',\n",
    "  #                 'O1','O2']\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "  # eeg_ch_names = ['Fp1','Fp2',\n",
    "  #              'T7','C3','C4','T8',\n",
    "  #              'O1','O2']\n",
    "    \n",
    "\n",
    "\n",
    "  load_args = dict(db = db,\n",
    "                  eeg_ch_names = eeg_ch_names,\n",
    "                  fs = fs,\n",
    "                  f_bank = np.asarray([[4., 40.]]),\n",
    "                  vwt = np.asarray([[2.5, 5]]),\n",
    "                  new_fs = 128.)\n",
    "  subjects = np.arange(db.metadata['subjects']) + 1\n",
    "  subjects = np.delete(subjects, [28,33])\n",
    "  \n",
    "else:\n",
    "  raise ValueError('No valid database name')\n",
    "\n",
    "verbose = 0\n",
    "reduce_lr_on_plateau = ReduceLROnPlateau(monitor = 'loss', factor = 0.1, patience = 30, verbose = verbose, mode = 'min', min_delta = 0.01, min_lr = 0)\n",
    "terminate_on_nan = TerminateOnNaN()\n",
    "callbacks = [reduce_lr_on_plateau, terminate_on_nan]\n",
    "seed = 23\n",
    "\n",
    "cv_args = dict(cv = StratifiedShuffleSplit(n_splits = 5, test_size = 0.2, random_state = seed))\n",
    "\n",
    "compile_args = dict(loss = SparseCategoricalCrossentropy(), #['mse' , SparseCategoricalCrossentropy()]\n",
    "                    init_lr = 1e-2)\n",
    "                      \n",
    "fit_args = dict(epochs = 500,\n",
    "                verbose = verbose,\n",
    "                callbacks = callbacks)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0abccf7a",
   "metadata": {
    "id": "ukhXifxzTaj9",
    "papermill": {
     "duration": 0.053544,
     "end_time": "2025-05-21T01:31:09.702071",
     "exception": false,
     "start_time": "2025-05-21T01:31:09.648527",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Main"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3bedfae3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T01:31:09.804832Z",
     "iopub.status.busy": "2025-05-21T01:31:09.804120Z",
     "iopub.status.idle": "2025-05-21T03:57:30.699194Z",
     "shell.execute_reply": "2025-05-21T03:57:30.697549Z"
    },
    "id": "Ymqd_W21y3NK",
    "outputId": "5ca97a2f-f57c-46ee-8f53-f00181ccea90",
    "papermill": {
     "duration": 8780.956577,
     "end_time": "2025-05-21T03:57:30.703534",
     "exception": false,
     "start_time": "2025-05-21T01:31:09.746957",
     "status": "completed"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sbj =  11\n",
      "Total trials loaded: 200\n",
      "Shape of X: (200, 64, 3584), Shape of y: (200,)\n",
      "Resampling from 512 to 128.0 Hz.\n",
      "X_train shape: (200, 64, 320, 1), y_train shape: (200,)\n",
      "Running fold 0 with 160 training samples and 40 validation samples\n",
      "Fold 0: train indices: [  4 142 183  71  50], val indices: [ 25 107  31 188  83]\n",
      "Training data shape: (160, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 0 training loss: 0.008258105255663395\n",
      "y_true (val): [0 1 0 1 0]\n",
      "y_pred: [0 0 0 1 0]\n",
      "Appending results for fold 0: {'fold_index': 0, 'train_indices': [4, 142, 183, 71, 50, 179, 125, 131, 117, 60, 82, 55, 89, 21, 157, 47, 5, 42, 11, 19, 23, 172, 148, 99, 140, 34, 146, 115, 48, 147, 93, 2, 182, 138, 43, 57, 158, 187, 128, 18, 160, 33, 97, 14, 44, 177, 196, 61, 56, 174, 46, 67, 8, 101, 7, 41, 129, 184, 198, 98, 190, 74, 169, 24, 159, 173, 15, 70, 163, 58, 186, 72, 27, 87, 81, 26, 122, 96, 120, 65, 119, 102, 123, 167, 94, 130, 135, 77, 192, 175, 20, 37, 16, 0, 180, 144, 52, 145, 106, 139, 63, 9, 36, 153, 126, 17, 59, 29, 164, 30, 85, 156, 53, 79, 38, 118, 124, 193, 171, 35, 13, 151, 110, 95, 149, 136, 165, 168, 109, 88, 84, 92, 3, 121, 114, 143, 1, 10, 195, 28, 197, 103, 137, 152, 113, 112, 32, 189, 62, 199, 78, 68, 176, 161, 22, 155, 108, 80, 181, 166], 'val_indices': [25, 107, 31, 188, 83, 86, 111, 75, 191, 170, 76, 12, 100, 154, 73, 6, 66, 54, 104, 162, 91, 51, 132, 39, 105, 40, 134, 141, 45, 116, 185, 178, 127, 150, 194, 69, 133, 90, 64, 49], 'accuracy': 0.525, 'kappa': 0.050000000000000044, 'auc': 0.605}\n",
      "New Max Found!\n",
      "Running fold 1 with 160 training samples and 40 validation samples\n",
      "Fold 1: train indices: [162  56 128 110  84], val indices: [175 156   7 191  76]\n",
      "Training data shape: (160, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 1 training loss: 0.0052901688031852245\n",
      "y_true (val): [1 1 0 1 0]\n",
      "y_pred: [1 1 0 1 1]\n",
      "Appending results for fold 1: {'fold_index': 1, 'train_indices': [162, 56, 128, 110, 84, 70, 139, 147, 115, 155, 50, 165, 142, 109, 159, 194, 60, 15, 140, 195, 55, 86, 87, 130, 38, 79, 177, 92, 145, 47, 39, 135, 94, 197, 164, 104, 108, 88, 14, 21, 154, 17, 49, 11, 187, 114, 181, 158, 19, 77, 185, 123, 34, 25, 4, 12, 65, 30, 40, 129, 81, 189, 102, 141, 170, 68, 24, 71, 132, 107, 36, 27, 96, 66, 138, 63, 193, 113, 124, 99, 10, 150, 103, 5, 143, 146, 153, 122, 148, 9, 183, 105, 53, 166, 75, 52, 169, 43, 188, 59, 35, 186, 199, 93, 106, 3, 184, 33, 125, 74, 37, 1, 48, 180, 126, 121, 72, 62, 0, 173, 83, 119, 152, 23, 95, 73, 179, 44, 58, 120, 127, 157, 20, 163, 69, 190, 26, 112, 6, 134, 29, 64, 192, 172, 174, 28, 45, 168, 8, 46, 31, 116, 85, 131, 51, 32, 176, 198, 151, 42], 'val_indices': [175, 156, 7, 191, 76, 117, 54, 16, 2, 80, 41, 118, 78, 90, 100, 160, 149, 161, 171, 18, 82, 182, 101, 61, 91, 167, 144, 133, 196, 67, 22, 57, 137, 136, 98, 111, 89, 13, 178, 97], 'accuracy': 0.625, 'kappa': 0.25, 'auc': 0.6799999999999999}\n",
      "New Max Found!\n",
      "Running fold 2 with 160 training samples and 40 validation samples\n",
      "Fold 2: train indices: [  3 109 165  70  15], val indices: [ 58 152 153  54 171]\n",
      "Training data shape: (160, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 2 training loss: 0.004185070283710957\n",
      "y_true (val): [0 1 1 0 1]\n",
      "y_pred: [1 1 0 1 1]\n",
      "Appending results for fold 2: {'fold_index': 2, 'train_indices': [3, 109, 165, 70, 15, 172, 19, 5, 38, 146, 77, 11, 147, 198, 92, 18, 174, 2, 176, 168, 118, 199, 63, 100, 158, 17, 134, 86, 105, 24, 34, 175, 61, 166, 125, 97, 39, 108, 78, 79, 80, 31, 46, 180, 60, 113, 127, 87, 186, 144, 124, 67, 13, 136, 74, 65, 115, 167, 123, 72, 191, 182, 82, 23, 110, 40, 119, 183, 148, 128, 143, 85, 142, 107, 189, 30, 130, 145, 103, 96, 164, 151, 98, 64, 101, 43, 81, 49, 75, 69, 89, 106, 66, 162, 154, 161, 122, 188, 121, 10, 20, 91, 52, 111, 137, 57, 93, 178, 102, 138, 55, 47, 133, 42, 12, 196, 99, 177, 44, 169, 37, 193, 157, 1, 190, 0, 26, 141, 155, 173, 28, 27, 16, 32, 7, 195, 131, 197, 14, 156, 185, 36, 95, 71, 51, 160, 194, 117, 56, 68, 126, 41, 59, 135, 129, 4, 53, 90, 94, 179], 'val_indices': [58, 152, 153, 54, 171, 88, 170, 45, 21, 84, 181, 73, 150, 22, 29, 184, 25, 120, 159, 114, 116, 187, 6, 149, 83, 33, 50, 139, 104, 9, 48, 132, 112, 35, 76, 163, 8, 140, 192, 62], 'accuracy': 0.575, 'kappa': 0.15000000000000002, 'auc': 0.6925}\n",
      "Running fold 3 with 160 training samples and 40 validation samples\n",
      "Fold 3: train indices: [66 43 45 22 69], val indices: [ 20  14 169 144 196]\n",
      "Training data shape: (160, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 3 training loss: 0.00563874002546072\n",
      "y_true (val): [0 0 1 1 1]\n",
      "y_pred: [1 1 0 1 1]\n",
      "Appending results for fold 3: {'fold_index': 3, 'train_indices': [66, 43, 45, 22, 69, 48, 44, 60, 123, 74, 179, 25, 150, 171, 132, 28, 165, 96, 73, 113, 127, 72, 135, 52, 38, 23, 122, 100, 177, 92, 137, 148, 12, 8, 91, 159, 172, 125, 187, 32, 29, 173, 40, 108, 4, 151, 37, 186, 34, 21, 1, 33, 190, 176, 35, 146, 143, 68, 160, 136, 107, 103, 53, 49, 141, 131, 15, 50, 54, 199, 126, 154, 7, 193, 0, 89, 55, 56, 10, 98, 134, 106, 161, 168, 138, 112, 63, 88, 83, 174, 121, 81, 65, 61, 109, 78, 26, 47, 104, 9, 153, 180, 31, 94, 71, 77, 18, 195, 167, 75, 164, 162, 86, 85, 157, 119, 3, 84, 149, 142, 82, 95, 175, 191, 139, 133, 117, 24, 76, 41, 62, 198, 6, 111, 183, 110, 30, 11, 99, 178, 93, 87, 13, 166, 189, 170, 185, 118, 130, 197, 120, 128, 158, 140, 16, 59, 145, 101, 17, 181], 'val_indices': [20, 14, 169, 144, 196, 105, 67, 182, 36, 39, 97, 57, 64, 58, 79, 90, 188, 194, 155, 129, 102, 192, 27, 5, 124, 116, 80, 184, 152, 163, 46, 156, 114, 147, 115, 70, 19, 2, 51, 42], 'accuracy': 0.5, 'kappa': 0.0, 'auc': 0.5249999999999999}\n",
      "Running fold 4 with 160 training samples and 40 validation samples\n",
      "Fold 4: train indices: [ 52   4 194  64  46], val indices: [123  35  89 183   0]\n",
      "Training data shape: (160, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 4 training loss: 0.00455122347921133\n",
      "y_true (val): [1 0 0 1 0]\n",
      "y_pred: [0 1 1 1 0]\n",
      "Appending results for fold 4: {'fold_index': 4, 'train_indices': [52, 4, 194, 64, 46, 59, 38, 21, 193, 157, 28, 57, 17, 154, 184, 97, 139, 125, 102, 182, 30, 143, 180, 50, 126, 13, 161, 100, 15, 135, 45, 74, 153, 51, 115, 189, 181, 187, 37, 133, 118, 168, 16, 136, 66, 73, 19, 174, 22, 24, 71, 192, 63, 144, 122, 72, 54, 175, 147, 155, 85, 107, 149, 103, 69, 31, 27, 145, 7, 84, 77, 191, 88, 79, 114, 49, 90, 124, 5, 111, 36, 172, 131, 61, 32, 185, 173, 2, 166, 39, 148, 110, 34, 199, 65, 186, 23, 91, 159, 170, 93, 119, 195, 116, 129, 76, 53, 158, 101, 130, 178, 156, 6, 94, 138, 167, 96, 68, 132, 165, 92, 140, 12, 137, 44, 188, 160, 83, 47, 60, 98, 81, 105, 78, 58, 11, 25, 26, 82, 141, 171, 196, 62, 48, 1, 177, 70, 121, 8, 163, 109, 95, 104, 43, 117, 150, 14, 197, 127, 33], 'val_indices': [123, 35, 89, 183, 0, 80, 75, 134, 10, 87, 120, 40, 151, 67, 86, 99, 152, 42, 20, 176, 162, 169, 41, 190, 56, 9, 142, 146, 112, 108, 3, 128, 198, 106, 55, 29, 18, 164, 113, 179], 'accuracy': 0.6, 'kappa': 0.19999999999999996, 'auc': 0.6399999999999999}\n",
      "Final cross-validation results: {'params': [], 'mean_acc': 0.565, 'mean_kappa': 0.13, 'mean_auc': 0.629, 'mean_f1_left': array([0., 0., 0., 0., 0.]), 'mean_f1_right': array([0., 0., 0., 0., 0.]), 'mean_recall_left': array([0., 0., 0., 0., 0.]), 'mean_recall_right': array([0., 0., 0., 0., 0.]), 'mean_precision_left': array([0., 0., 0., 0., 0.]), 'mean_precision_right': array([0., 0., 0., 0., 0.]), 'all_folds': [{'fold_index': 0, 'train_indices': [4, 142, 183, 71, 50, 179, 125, 131, 117, 60, 82, 55, 89, 21, 157, 47, 5, 42, 11, 19, 23, 172, 148, 99, 140, 34, 146, 115, 48, 147, 93, 2, 182, 138, 43, 57, 158, 187, 128, 18, 160, 33, 97, 14, 44, 177, 196, 61, 56, 174, 46, 67, 8, 101, 7, 41, 129, 184, 198, 98, 190, 74, 169, 24, 159, 173, 15, 70, 163, 58, 186, 72, 27, 87, 81, 26, 122, 96, 120, 65, 119, 102, 123, 167, 94, 130, 135, 77, 192, 175, 20, 37, 16, 0, 180, 144, 52, 145, 106, 139, 63, 9, 36, 153, 126, 17, 59, 29, 164, 30, 85, 156, 53, 79, 38, 118, 124, 193, 171, 35, 13, 151, 110, 95, 149, 136, 165, 168, 109, 88, 84, 92, 3, 121, 114, 143, 1, 10, 195, 28, 197, 103, 137, 152, 113, 112, 32, 189, 62, 199, 78, 68, 176, 161, 22, 155, 108, 80, 181, 166], 'val_indices': [25, 107, 31, 188, 83, 86, 111, 75, 191, 170, 76, 12, 100, 154, 73, 6, 66, 54, 104, 162, 91, 51, 132, 39, 105, 40, 134, 141, 45, 116, 185, 178, 127, 150, 194, 69, 133, 90, 64, 49], 'accuracy': 0.525, 'kappa': 0.050000000000000044, 'auc': 0.605}, {'fold_index': 1, 'train_indices': [162, 56, 128, 110, 84, 70, 139, 147, 115, 155, 50, 165, 142, 109, 159, 194, 60, 15, 140, 195, 55, 86, 87, 130, 38, 79, 177, 92, 145, 47, 39, 135, 94, 197, 164, 104, 108, 88, 14, 21, 154, 17, 49, 11, 187, 114, 181, 158, 19, 77, 185, 123, 34, 25, 4, 12, 65, 30, 40, 129, 81, 189, 102, 141, 170, 68, 24, 71, 132, 107, 36, 27, 96, 66, 138, 63, 193, 113, 124, 99, 10, 150, 103, 5, 143, 146, 153, 122, 148, 9, 183, 105, 53, 166, 75, 52, 169, 43, 188, 59, 35, 186, 199, 93, 106, 3, 184, 33, 125, 74, 37, 1, 48, 180, 126, 121, 72, 62, 0, 173, 83, 119, 152, 23, 95, 73, 179, 44, 58, 120, 127, 157, 20, 163, 69, 190, 26, 112, 6, 134, 29, 64, 192, 172, 174, 28, 45, 168, 8, 46, 31, 116, 85, 131, 51, 32, 176, 198, 151, 42], 'val_indices': [175, 156, 7, 191, 76, 117, 54, 16, 2, 80, 41, 118, 78, 90, 100, 160, 149, 161, 171, 18, 82, 182, 101, 61, 91, 167, 144, 133, 196, 67, 22, 57, 137, 136, 98, 111, 89, 13, 178, 97], 'accuracy': 0.625, 'kappa': 0.25, 'auc': 0.6799999999999999}, {'fold_index': 2, 'train_indices': [3, 109, 165, 70, 15, 172, 19, 5, 38, 146, 77, 11, 147, 198, 92, 18, 174, 2, 176, 168, 118, 199, 63, 100, 158, 17, 134, 86, 105, 24, 34, 175, 61, 166, 125, 97, 39, 108, 78, 79, 80, 31, 46, 180, 60, 113, 127, 87, 186, 144, 124, 67, 13, 136, 74, 65, 115, 167, 123, 72, 191, 182, 82, 23, 110, 40, 119, 183, 148, 128, 143, 85, 142, 107, 189, 30, 130, 145, 103, 96, 164, 151, 98, 64, 101, 43, 81, 49, 75, 69, 89, 106, 66, 162, 154, 161, 122, 188, 121, 10, 20, 91, 52, 111, 137, 57, 93, 178, 102, 138, 55, 47, 133, 42, 12, 196, 99, 177, 44, 169, 37, 193, 157, 1, 190, 0, 26, 141, 155, 173, 28, 27, 16, 32, 7, 195, 131, 197, 14, 156, 185, 36, 95, 71, 51, 160, 194, 117, 56, 68, 126, 41, 59, 135, 129, 4, 53, 90, 94, 179], 'val_indices': [58, 152, 153, 54, 171, 88, 170, 45, 21, 84, 181, 73, 150, 22, 29, 184, 25, 120, 159, 114, 116, 187, 6, 149, 83, 33, 50, 139, 104, 9, 48, 132, 112, 35, 76, 163, 8, 140, 192, 62], 'accuracy': 0.575, 'kappa': 0.15000000000000002, 'auc': 0.6925}, {'fold_index': 3, 'train_indices': [66, 43, 45, 22, 69, 48, 44, 60, 123, 74, 179, 25, 150, 171, 132, 28, 165, 96, 73, 113, 127, 72, 135, 52, 38, 23, 122, 100, 177, 92, 137, 148, 12, 8, 91, 159, 172, 125, 187, 32, 29, 173, 40, 108, 4, 151, 37, 186, 34, 21, 1, 33, 190, 176, 35, 146, 143, 68, 160, 136, 107, 103, 53, 49, 141, 131, 15, 50, 54, 199, 126, 154, 7, 193, 0, 89, 55, 56, 10, 98, 134, 106, 161, 168, 138, 112, 63, 88, 83, 174, 121, 81, 65, 61, 109, 78, 26, 47, 104, 9, 153, 180, 31, 94, 71, 77, 18, 195, 167, 75, 164, 162, 86, 85, 157, 119, 3, 84, 149, 142, 82, 95, 175, 191, 139, 133, 117, 24, 76, 41, 62, 198, 6, 111, 183, 110, 30, 11, 99, 178, 93, 87, 13, 166, 189, 170, 185, 118, 130, 197, 120, 128, 158, 140, 16, 59, 145, 101, 17, 181], 'val_indices': [20, 14, 169, 144, 196, 105, 67, 182, 36, 39, 97, 57, 64, 58, 79, 90, 188, 194, 155, 129, 102, 192, 27, 5, 124, 116, 80, 184, 152, 163, 46, 156, 114, 147, 115, 70, 19, 2, 51, 42], 'accuracy': 0.5, 'kappa': 0.0, 'auc': 0.5249999999999999}, {'fold_index': 4, 'train_indices': [52, 4, 194, 64, 46, 59, 38, 21, 193, 157, 28, 57, 17, 154, 184, 97, 139, 125, 102, 182, 30, 143, 180, 50, 126, 13, 161, 100, 15, 135, 45, 74, 153, 51, 115, 189, 181, 187, 37, 133, 118, 168, 16, 136, 66, 73, 19, 174, 22, 24, 71, 192, 63, 144, 122, 72, 54, 175, 147, 155, 85, 107, 149, 103, 69, 31, 27, 145, 7, 84, 77, 191, 88, 79, 114, 49, 90, 124, 5, 111, 36, 172, 131, 61, 32, 185, 173, 2, 166, 39, 148, 110, 34, 199, 65, 186, 23, 91, 159, 170, 93, 119, 195, 116, 129, 76, 53, 158, 101, 130, 178, 156, 6, 94, 138, 167, 96, 68, 132, 165, 92, 140, 12, 137, 44, 188, 160, 83, 47, 60, 98, 81, 105, 78, 58, 11, 25, 26, 82, 141, 171, 196, 62, 48, 1, 177, 70, 121, 8, 163, 109, 95, 104, 43, 117, 150, 14, 197, 127, 33], 'val_indices': [123, 35, 89, 183, 0, 80, 75, 134, 10, 87, 120, 40, 151, 67, 86, 99, 152, 42, 20, 176, 162, 169, 41, 190, 56, 9, 142, 146, 112, 108, 3, 128, 198, 106, 55, 29, 18, 164, 113, 179], 'accuracy': 0.6, 'kappa': 0.19999999999999996, 'auc': 0.6399999999999999}], 'std_acc': 0.046, 'std_kappa': 0.093, 'std_auc': 0.06}\n",
      "sbj =  28\n",
      "Total trials loaded: 196\n",
      "Shape of X: (196, 64, 3584), Shape of y: (196,)\n",
      "Resampling from 512 to 128.0 Hz.\n",
      "X_train shape: (196, 64, 320, 1), y_train shape: (196,)\n",
      "Running fold 0 with 156 training samples and 40 validation samples\n",
      "Fold 0: train indices: [114 127  84 150  63], val indices: [ 83  73 177  12  76]\n",
      "Training data shape: (156, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 0 training loss: 0.0030364212580025196\n",
      "y_true (val): [0 0 1 0 0]\n",
      "y_pred: [0 1 1 0 0]\n",
      "Appending results for fold 0: {'fold_index': 0, 'train_indices': [114, 127, 84, 150, 63, 55, 96, 37, 20, 0, 79, 107, 1, 4, 47, 87, 19, 58, 56, 139, 61, 71, 77, 174, 104, 136, 148, 166, 180, 62, 72, 48, 43, 109, 14, 78, 57, 23, 185, 171, 92, 82, 162, 173, 2, 28, 115, 18, 142, 120, 111, 27, 42, 130, 97, 168, 182, 159, 81, 108, 26, 21, 121, 158, 135, 98, 67, 105, 74, 24, 170, 22, 116, 36, 167, 156, 143, 163, 93, 124, 106, 101, 178, 17, 50, 46, 38, 172, 52, 187, 193, 7, 8, 15, 169, 192, 33, 29, 112, 13, 5, 119, 11, 94, 35, 183, 146, 144, 95, 10, 175, 191, 32, 176, 186, 165, 30, 34, 59, 70, 194, 80, 181, 164, 190, 86, 9, 154, 100, 155, 65, 60, 157, 68, 129, 123, 117, 189, 138, 160, 89, 147, 41, 16, 3, 118, 179, 44, 102, 125, 53, 151, 113, 88, 145, 188], 'val_indices': [83, 73, 177, 12, 76, 131, 161, 184, 99, 6, 66, 110, 85, 54, 31, 122, 133, 141, 39, 40, 132, 45, 140, 103, 149, 25, 51, 137, 128, 153, 134, 75, 90, 64, 49, 126, 152, 69, 91, 195], 'accuracy': 0.775, 'kappa': 0.55, 'auc': 0.8800000000000001}\n",
      "New Max Found!\n",
      "Running fold 1 with 156 training samples and 40 validation samples\n",
      "Fold 1: train indices: [144 168 105  58 121], val indices: [195 116 136 186  91]\n",
      "Training data shape: (156, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 1 training loss: 0.0030279839411377907\n",
      "y_true (val): [1 1 1 1 0]\n",
      "y_pred: [1 1 1 0 0]\n",
      "Appending results for fold 1: {'fold_index': 1, 'train_indices': [144, 168, 105, 58, 121, 51, 17, 102, 44, 37, 81, 46, 96, 120, 103, 20, 123, 118, 73, 129, 126, 122, 173, 71, 138, 69, 124, 175, 59, 151, 6, 180, 24, 53, 89, 146, 139, 106, 63, 84, 193, 154, 183, 10, 119, 87, 97, 65, 39, 27, 162, 128, 111, 194, 167, 130, 34, 152, 48, 125, 30, 85, 131, 68, 142, 45, 5, 35, 12, 158, 104, 171, 156, 33, 64, 149, 41, 88, 157, 145, 108, 40, 172, 47, 179, 36, 70, 133, 8, 0, 4, 134, 107, 28, 109, 29, 76, 137, 15, 26, 77, 11, 187, 114, 188, 66, 25, 23, 178, 75, 150, 182, 60, 50, 79, 101, 55, 176, 164, 153, 189, 169, 82, 115, 190, 93, 161, 9, 127, 83, 112, 56, 62, 184, 185, 163, 94, 98, 192, 49, 14, 19, 141, 72, 165, 52, 42, 113, 140, 147, 31, 43, 100, 1, 74, 3], 'val_indices': [195, 116, 136, 186, 91, 18, 54, 117, 80, 177, 160, 7, 67, 132, 61, 16, 13, 86, 148, 181, 57, 166, 99, 110, 95, 159, 22, 32, 143, 135, 38, 2, 174, 170, 155, 78, 92, 191, 90, 21], 'accuracy': 0.825, 'kappa': 0.65, 'auc': 0.9099999999999999}\n",
      "New Max Found!\n",
      "Running fold 2 with 156 training samples and 40 validation samples\n",
      "Fold 2: train indices: [ 66 134  81  20  79], val indices: [107 111  12 176 188]\n",
      "Training data shape: (156, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 2 training loss: 0.0032959659583866596\n",
      "y_true (val): [1 1 0 1 1]\n",
      "y_pred: [1 1 0 1 1]\n",
      "Appending results for fold 2: {'fold_index': 2, 'train_indices': [66, 134, 81, 20, 79, 23, 139, 137, 39, 78, 170, 117, 148, 112, 158, 175, 9, 76, 164, 177, 163, 16, 31, 38, 173, 167, 96, 41, 149, 63, 129, 122, 179, 186, 172, 174, 195, 162, 147, 189, 192, 191, 184, 190, 36, 51, 1, 159, 84, 4, 97, 19, 60, 28, 14, 140, 183, 92, 146, 103, 124, 11, 151, 114, 187, 6, 194, 150, 108, 24, 2, 152, 109, 118, 91, 115, 144, 80, 30, 104, 43, 55, 49, 145, 34, 135, 18, 125, 73, 56, 113, 101, 154, 58, 166, 193, 75, 35, 17, 10, 138, 99, 27, 52, 21, 121, 136, 86, 53, 32, 127, 64, 54, 48, 123, 62, 143, 169, 178, 77, 7, 95, 33, 89, 42, 120, 94, 37, 102, 100, 160, 88, 132, 119, 82, 90, 0, 8, 46, 25, 57, 110, 155, 105, 44, 156, 106, 83, 65, 72, 67, 161, 171, 13, 93, 71], 'val_indices': [107, 111, 12, 176, 188, 68, 15, 182, 168, 22, 85, 26, 70, 141, 181, 69, 180, 116, 153, 3, 142, 59, 185, 61, 87, 40, 131, 165, 126, 133, 130, 50, 157, 47, 128, 45, 98, 74, 29, 5], 'accuracy': 0.9, 'kappa': 0.8, 'auc': 0.9125}\n",
      "New Max Found!\n",
      "Running fold 3 with 156 training samples and 40 validation samples\n",
      "Fold 3: train indices: [175 194  26  84  96], val indices: [ 13  39  99  36 173]\n",
      "Training data shape: (156, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 3 training loss: 0.0032401217613369226\n",
      "y_true (val): [0 0 1 0 1]\n",
      "y_pred: [1 0 1 0 1]\n",
      "Appending results for fold 3: {'fold_index': 3, 'train_indices': [175, 194, 26, 84, 96, 85, 73, 125, 8, 110, 31, 187, 61, 151, 42, 62, 24, 12, 37, 188, 57, 90, 20, 183, 58, 195, 94, 191, 19, 81, 45, 182, 146, 112, 48, 152, 35, 192, 21, 128, 92, 159, 64, 149, 170, 178, 15, 50, 28, 49, 95, 3, 114, 164, 88, 140, 23, 86, 141, 167, 180, 66, 56, 68, 160, 5, 38, 82, 105, 29, 89, 60, 117, 177, 87, 55, 40, 98, 139, 184, 46, 121, 9, 32, 126, 154, 162, 193, 97, 79, 130, 1, 47, 27, 43, 101, 115, 172, 155, 6, 169, 137, 181, 2, 71, 41, 33, 135, 67, 34, 51, 189, 158, 147, 18, 102, 143, 165, 100, 138, 131, 76, 129, 75, 179, 142, 161, 157, 124, 163, 116, 65, 10, 171, 104, 103, 127, 145, 176, 166, 185, 4, 106, 132, 25, 63, 74, 119, 134, 93, 52, 14, 111, 118, 17, 83], 'val_indices': [13, 39, 99, 36, 173, 44, 54, 70, 133, 186, 107, 150, 168, 136, 122, 0, 16, 53, 22, 80, 72, 7, 30, 78, 91, 190, 77, 109, 148, 11, 156, 144, 113, 108, 153, 69, 120, 174, 123, 59], 'accuracy': 0.8, 'kappa': 0.6, 'auc': 0.8925}\n",
      "Running fold 4 with 156 training samples and 40 validation samples\n",
      "Fold 4: train indices: [ 87 176 153  13 179], val indices: [119 132  79  81 146]\n",
      "Training data shape: (156, 64, 320, 1), Validation data shape: (40, 64, 320, 1)\n",
      "Fold 4 training loss: 0.002375947777181864\n",
      "y_true (val): [1 1 0 0 1]\n",
      "y_pred: [1 0 0 0 1]\n",
      "Appending results for fold 4: {'fold_index': 4, 'train_indices': [87, 176, 153, 13, 179, 109, 147, 12, 40, 93, 130, 107, 190, 73, 83, 158, 112, 55, 37, 9, 172, 125, 178, 169, 72, 183, 120, 145, 22, 76, 0, 161, 106, 157, 45, 150, 50, 167, 26, 187, 77, 142, 92, 171, 57, 174, 114, 25, 101, 95, 23, 60, 1, 18, 7, 177, 36, 118, 117, 70, 96, 48, 186, 3, 192, 63, 175, 68, 33, 141, 34, 155, 116, 105, 111, 89, 88, 97, 24, 52, 4, 108, 144, 127, 15, 160, 90, 113, 131, 11, 194, 8, 14, 49, 86, 54, 71, 75, 193, 180, 2, 41, 182, 156, 168, 128, 149, 143, 164, 80, 17, 136, 42, 30, 29, 188, 44, 148, 137, 39, 16, 59, 102, 181, 74, 99, 151, 129, 51, 61, 162, 38, 121, 47, 126, 122, 140, 184, 53, 31, 91, 10, 104, 98, 124, 35, 135, 115, 85, 67, 58, 69, 103, 64, 166, 134], 'val_indices': [119, 132, 79, 81, 146, 133, 6, 27, 100, 191, 139, 84, 152, 28, 62, 170, 138, 20, 189, 46, 159, 82, 66, 5, 173, 19, 123, 163, 78, 110, 94, 185, 154, 65, 165, 21, 195, 32, 56, 43], 'accuracy': 0.8, 'kappa': 0.6, 'auc': 0.91}\n",
      "Final cross-validation results: {'params': [], 'mean_acc': 0.82, 'mean_kappa': 0.64, 'mean_auc': 0.901, 'mean_f1_left': array([0., 0., 0., 0., 0.]), 'mean_f1_right': array([0., 0., 0., 0., 0.]), 'mean_recall_left': array([0., 0., 0., 0., 0.]), 'mean_recall_right': array([0., 0., 0., 0., 0.]), 'mean_precision_left': array([0., 0., 0., 0., 0.]), 'mean_precision_right': array([0., 0., 0., 0., 0.]), 'all_folds': [{'fold_index': 0, 'train_indices': [114, 127, 84, 150, 63, 55, 96, 37, 20, 0, 79, 107, 1, 4, 47, 87, 19, 58, 56, 139, 61, 71, 77, 174, 104, 136, 148, 166, 180, 62, 72, 48, 43, 109, 14, 78, 57, 23, 185, 171, 92, 82, 162, 173, 2, 28, 115, 18, 142, 120, 111, 27, 42, 130, 97, 168, 182, 159, 81, 108, 26, 21, 121, 158, 135, 98, 67, 105, 74, 24, 170, 22, 116, 36, 167, 156, 143, 163, 93, 124, 106, 101, 178, 17, 50, 46, 38, 172, 52, 187, 193, 7, 8, 15, 169, 192, 33, 29, 112, 13, 5, 119, 11, 94, 35, 183, 146, 144, 95, 10, 175, 191, 32, 176, 186, 165, 30, 34, 59, 70, 194, 80, 181, 164, 190, 86, 9, 154, 100, 155, 65, 60, 157, 68, 129, 123, 117, 189, 138, 160, 89, 147, 41, 16, 3, 118, 179, 44, 102, 125, 53, 151, 113, 88, 145, 188], 'val_indices': [83, 73, 177, 12, 76, 131, 161, 184, 99, 6, 66, 110, 85, 54, 31, 122, 133, 141, 39, 40, 132, 45, 140, 103, 149, 25, 51, 137, 128, 153, 134, 75, 90, 64, 49, 126, 152, 69, 91, 195], 'accuracy': 0.775, 'kappa': 0.55, 'auc': 0.8800000000000001}, {'fold_index': 1, 'train_indices': [144, 168, 105, 58, 121, 51, 17, 102, 44, 37, 81, 46, 96, 120, 103, 20, 123, 118, 73, 129, 126, 122, 173, 71, 138, 69, 124, 175, 59, 151, 6, 180, 24, 53, 89, 146, 139, 106, 63, 84, 193, 154, 183, 10, 119, 87, 97, 65, 39, 27, 162, 128, 111, 194, 167, 130, 34, 152, 48, 125, 30, 85, 131, 68, 142, 45, 5, 35, 12, 158, 104, 171, 156, 33, 64, 149, 41, 88, 157, 145, 108, 40, 172, 47, 179, 36, 70, 133, 8, 0, 4, 134, 107, 28, 109, 29, 76, 137, 15, 26, 77, 11, 187, 114, 188, 66, 25, 23, 178, 75, 150, 182, 60, 50, 79, 101, 55, 176, 164, 153, 189, 169, 82, 115, 190, 93, 161, 9, 127, 83, 112, 56, 62, 184, 185, 163, 94, 98, 192, 49, 14, 19, 141, 72, 165, 52, 42, 113, 140, 147, 31, 43, 100, 1, 74, 3], 'val_indices': [195, 116, 136, 186, 91, 18, 54, 117, 80, 177, 160, 7, 67, 132, 61, 16, 13, 86, 148, 181, 57, 166, 99, 110, 95, 159, 22, 32, 143, 135, 38, 2, 174, 170, 155, 78, 92, 191, 90, 21], 'accuracy': 0.825, 'kappa': 0.65, 'auc': 0.9099999999999999}, {'fold_index': 2, 'train_indices': [66, 134, 81, 20, 79, 23, 139, 137, 39, 78, 170, 117, 148, 112, 158, 175, 9, 76, 164, 177, 163, 16, 31, 38, 173, 167, 96, 41, 149, 63, 129, 122, 179, 186, 172, 174, 195, 162, 147, 189, 192, 191, 184, 190, 36, 51, 1, 159, 84, 4, 97, 19, 60, 28, 14, 140, 183, 92, 146, 103, 124, 11, 151, 114, 187, 6, 194, 150, 108, 24, 2, 152, 109, 118, 91, 115, 144, 80, 30, 104, 43, 55, 49, 145, 34, 135, 18, 125, 73, 56, 113, 101, 154, 58, 166, 193, 75, 35, 17, 10, 138, 99, 27, 52, 21, 121, 136, 86, 53, 32, 127, 64, 54, 48, 123, 62, 143, 169, 178, 77, 7, 95, 33, 89, 42, 120, 94, 37, 102, 100, 160, 88, 132, 119, 82, 90, 0, 8, 46, 25, 57, 110, 155, 105, 44, 156, 106, 83, 65, 72, 67, 161, 171, 13, 93, 71], 'val_indices': [107, 111, 12, 176, 188, 68, 15, 182, 168, 22, 85, 26, 70, 141, 181, 69, 180, 116, 153, 3, 142, 59, 185, 61, 87, 40, 131, 165, 126, 133, 130, 50, 157, 47, 128, 45, 98, 74, 29, 5], 'accuracy': 0.9, 'kappa': 0.8, 'auc': 0.9125}, {'fold_index': 3, 'train_indices': [175, 194, 26, 84, 96, 85, 73, 125, 8, 110, 31, 187, 61, 151, 42, 62, 24, 12, 37, 188, 57, 90, 20, 183, 58, 195, 94, 191, 19, 81, 45, 182, 146, 112, 48, 152, 35, 192, 21, 128, 92, 159, 64, 149, 170, 178, 15, 50, 28, 49, 95, 3, 114, 164, 88, 140, 23, 86, 141, 167, 180, 66, 56, 68, 160, 5, 38, 82, 105, 29, 89, 60, 117, 177, 87, 55, 40, 98, 139, 184, 46, 121, 9, 32, 126, 154, 162, 193, 97, 79, 130, 1, 47, 27, 43, 101, 115, 172, 155, 6, 169, 137, 181, 2, 71, 41, 33, 135, 67, 34, 51, 189, 158, 147, 18, 102, 143, 165, 100, 138, 131, 76, 129, 75, 179, 142, 161, 157, 124, 163, 116, 65, 10, 171, 104, 103, 127, 145, 176, 166, 185, 4, 106, 132, 25, 63, 74, 119, 134, 93, 52, 14, 111, 118, 17, 83], 'val_indices': [13, 39, 99, 36, 173, 44, 54, 70, 133, 186, 107, 150, 168, 136, 122, 0, 16, 53, 22, 80, 72, 7, 30, 78, 91, 190, 77, 109, 148, 11, 156, 144, 113, 108, 153, 69, 120, 174, 123, 59], 'accuracy': 0.8, 'kappa': 0.6, 'auc': 0.8925}, {'fold_index': 4, 'train_indices': [87, 176, 153, 13, 179, 109, 147, 12, 40, 93, 130, 107, 190, 73, 83, 158, 112, 55, 37, 9, 172, 125, 178, 169, 72, 183, 120, 145, 22, 76, 0, 161, 106, 157, 45, 150, 50, 167, 26, 187, 77, 142, 92, 171, 57, 174, 114, 25, 101, 95, 23, 60, 1, 18, 7, 177, 36, 118, 117, 70, 96, 48, 186, 3, 192, 63, 175, 68, 33, 141, 34, 155, 116, 105, 111, 89, 88, 97, 24, 52, 4, 108, 144, 127, 15, 160, 90, 113, 131, 11, 194, 8, 14, 49, 86, 54, 71, 75, 193, 180, 2, 41, 182, 156, 168, 128, 149, 143, 164, 80, 17, 136, 42, 30, 29, 188, 44, 148, 137, 39, 16, 59, 102, 181, 74, 99, 151, 129, 51, 61, 162, 38, 121, 47, 126, 122, 140, 184, 53, 31, 91, 10, 104, 98, 124, 35, 135, 115, 85, 67, 58, 69, 103, 64, 166, 134], 'val_indices': [119, 132, 79, 81, 146, 133, 6, 27, 100, 191, 139, 84, 152, 28, 62, 170, 138, 20, 189, 46, 159, 82, 66, 5, 173, 19, 123, 163, 78, 110, 94, 185, 154, 65, 165, 21, 195, 32, 56, 43], 'accuracy': 0.8, 'kappa': 0.6, 'auc': 0.91}], 'std_acc': 0.043, 'std_kappa': 0.086, 'std_auc': 0.013}\n"
     ]
    }
   ],
   "source": [
    "from pickle import dump\n",
    "\n",
    "subjects = [11,28]\n",
    "\n",
    "for sbj in subjects[:]:\n",
    "  print('sbj = ', sbj)\n",
    "  load_args['sbj'] = sbj\n",
    "  results = train(db_name, load_args, cv_args, model_args, compile_args, fit_args, seed)\n",
    "  with open('sbj' + str(load_args['sbj']) + '.txt', 'wb') as f:\n",
    "    dump(results, f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "10dd898a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T03:57:30.745876Z",
     "iopub.status.busy": "2025-05-21T03:57:30.745392Z",
     "iopub.status.idle": "2025-05-21T03:57:33.366083Z",
     "shell.execute_reply": "2025-05-21T03:57:33.364159Z"
    },
    "id": "V7-P0xjwzXVX",
    "outputId": "270dceef-351d-48d1-f71e-2c3367c7fdac",
    "papermill": {
     "duration": 2.646301,
     "end_time": "2025-05-21T03:57:33.369332",
     "exception": false,
     "start_time": "2025-05-21T03:57:30.723031",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  adding: sbj11.h5 (deflated 12%)\r\n",
      "  adding: sbj28.h5 (deflated 12%)\r\n",
      "  adding: sbj11.txt (deflated 42%)\r\n",
      "  adding: sbj28.txt (deflated 43%)\r\n"
     ]
    }
   ],
   "source": [
    "!zip Models_64ch_TCNet.zip ./*.h5 \n",
    "!zip Results_64ch_TCNet.zip ./*.txt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ca9204f9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T03:57:33.408981Z",
     "iopub.status.busy": "2025-05-21T03:57:33.408506Z",
     "iopub.status.idle": "2025-05-21T03:57:33.414725Z",
     "shell.execute_reply": "2025-05-21T03:57:33.413458Z"
    },
    "papermill": {
     "duration": 0.028989,
     "end_time": "2025-05-21T03:57:33.417371",
     "exception": false,
     "start_time": "2025-05-21T03:57:33.388382",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#import pickle as pkl\n",
    "\n",
    "#with open(file= '/kaggle/working/sbj14.txt', mode = 'rb' ) as f:\n",
    "#    results_64ch_ShallowConvNet = pkl.load(f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f4f75dab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T03:57:33.457433Z",
     "iopub.status.busy": "2025-05-21T03:57:33.456977Z",
     "iopub.status.idle": "2025-05-21T03:57:33.463356Z",
     "shell.execute_reply": "2025-05-21T03:57:33.462103Z"
    },
    "papermill": {
     "duration": 0.029307,
     "end_time": "2025-05-21T03:57:33.466163",
     "exception": false,
     "start_time": "2025-05-21T03:57:33.436856",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#results_64ch_ShallowConvNet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "bdcc0275",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T03:57:33.508052Z",
     "iopub.status.busy": "2025-05-21T03:57:33.507620Z",
     "iopub.status.idle": "2025-05-21T03:57:33.513280Z",
     "shell.execute_reply": "2025-05-21T03:57:33.511583Z"
    },
    "papermill": {
     "duration": 0.03218,
     "end_time": "2025-05-21T03:57:33.515984",
     "exception": false,
     "start_time": "2025-05-21T03:57:33.483804",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#with open(file= '/kaggle/working/sbj2.txt', mode = 'rb' ) as f:\n",
    " #   results_64ch_ShallowConvNet = pkl.load(f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "07f3844b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-21T03:57:33.556475Z",
     "iopub.status.busy": "2025-05-21T03:57:33.556063Z",
     "iopub.status.idle": "2025-05-21T03:57:33.562089Z",
     "shell.execute_reply": "2025-05-21T03:57:33.560435Z"
    },
    "papermill": {
     "duration": 0.029314,
     "end_time": "2025-05-21T03:57:33.564508",
     "exception": false,
     "start_time": "2025-05-21T03:57:33.535194",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#results_64ch_ShallowConvNet"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 1645904,
     "sourceId": 2702213,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 1269900,
     "sourceId": 2702226,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 2984453,
     "sourceId": 5137200,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 3008205,
     "sourceId": 5175158,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30786,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 8987.341496,
   "end_time": "2025-05-21T03:57:37.091805",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-21T01:27:49.750309",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
